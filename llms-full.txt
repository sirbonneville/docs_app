# https://beta.docs.pieces.app/api-reference/apireference

# https://beta.docs.pieces.app/api-reference/apireference



---

# Meet Pieces: AI-Driven Dev Efficiency

# Meet Pieces: AI-Driven Dev Efficiency

Getting to Know Pieces
======================

---

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734014941536/9c298363-d6b4-4e4a-9965-72db0fa59bc6.png?auto=compress,format&format=webp&q=75)

---

Pieces is an **AI-enabled productivity tool** designed to **increase developer efficiency** through **personalized workflow assistance** across the entire toolchain, featuring a dedicated desktop application and integrations with many popular IDEs.

---

Introducing Pieces for Developers
---------------------------------

This documentation is designed to provide a high-level overview of [Pieces features and functionalities](https://beta.docs.pieces.app/products/meet-pieces/fundamentals), with a quick-start and troubleshooting guides for [macOS](https://beta.docs.pieces.app/products/meet-pieces/get-started/macos), [Windows](https://beta.docs.pieces.app/products/meet-pieces/get-started/windows), and [Linux](https://beta.docs.pieces.app/products/meet-pieces/get-started/linux) to help you get started with Pieces as quick as possible.

Let’s answer a few basic questions:

### What is Pieces?

At its core, Pieces is an all-in-one productivity tool that helps developers work *smarter*, not harder, by anchoring engineers to their workflow with the power of the **Long-Term Memory Engine, Pieces Drive,** and the **Pieces Copilot.**

There are **[3]** core pillars of Pieces functionality:

1. [Long-Term Memory Engine (LTM-2)](https://beta.docs.pieces.app/products/meet-pieces/fundamentals#ltm-2): A powerful, AI-powered live context framework that understands what you’re working on across your entire development workflow. The LTM-2 helps by outsourcing the burden of memory and retrieval from the developer to AI to maximize space for creativity driven by human intent.
2. [Pieces Drive](https://beta.docs.pieces.app/products/meet-pieces/fundamentals#pieces-drive): The ability to save, search, reference, reuse, and share small developer resources like code snippets, screenshots, links, and text notes.
3. [Pieces Copilot](https://beta.docs.pieces.app/products/meet-pieces/fundamentals#pieces-copilot): An intelligent assistant that helps with generating code, answering questions, and adding code comments while utilizing a LLM of your choice—featuring an adjustable context window ranging from conversation-only to entire project repositories.

### Who is Pieces For?

To put it simply, Pieces is built from the ground up for developers who frequently reference or reuse small developer materials like code snippets or are looking to pick up where they left off and preserve the context of their workflow.

Pieces is an **excellent productivity option for developers of all levels** and across various fields, including front-end developers, data scientists, DevOps engineers, and students.

If you find yourself …

1. **Preserving Workflow Context:** If you’re wondering where you left off with trying to untangle that permissions mess in Google Cloud Console or Firestore database, the [LTM-2](https://beta.docs.pieces.app/products/meet-pieces/fundamentals#ltm-2) is an invaluable resource that can provide deep-links and anchors in the form of URLs and other helpful context.
2. **Managing Developer Materials**: If you find yourself needing to repurpose or refresh your memory with small developer resources throughout your workflow, the [Pieces Drive](https://beta.docs.pieces.app/products/meet-pieces/fundamentals#pieces-drive) can help you stay organized while providing an efficient pipeline for referencing and reusing them.
3. **Needi
---

macOS

Windows

Linux

**Apple Devices**


# Pieces for Developers

---

---

| **View / Button** | **Explanation** |
| --- | --- |
| *Account* | You can log in or log out of your Pieces Account. |
| --- | --- |
| *Version* | Check for and automatically install available PiecesOS updates. |
| *Long-Term Memory Engine* | Enable or disable LTM. |
| *Long-Term Memory Access Control* | Enable or disable sources from which LTM captures contextual workflow data. |
| *Settings* | Adjust settings like launch on login, enabled Pieces products, ML processing configurations, telemetry permissions, or optimize RAM usage. |
| *Activity* | View recent LTM activity, like most recent Copilot Chats, people, and related websites. |
| *Resources* | Find links to documentation and Pieces for Developers social accounts. |

---

*PiecesOS Quick Menu on macOS*
LTM-2
-----

The **Long-Term Memory (LTM-2) Engine** is a powerful evolution of the original LTM system, designed to store and surface workflow context from up to **nine months** in the past.

By combining automatic “roll-ups” with flexible “memories” browsing, LTM-2 ensures you don’t lose track of code, discussions, or references—even if you return to a project weeks or months later.

This can be found within the [Workstream Activities](https://beta.docs.pieces.app/products/desktop-application/workstream-activity) view in the [Pieces Desktop App](https://beta.docs.pieces.app/products/desktop-application).

---

*Pieces Copilot with LTM-2 Context —* Pieces Desktop App

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734028488469/d128a760-7e91-4dbf-8cfc-e7fc257488b7.png?auto=compress,format&format=webp&q=75?auto=compress,format&format=webp&q=75)

---

### Grounded Assistance

Long-Term Memory designed to boost developer productivity by providing assistance that’s temporally-grounded within the concrete context of your actual workflow, allowing the Pieces Copilot to better understand your development process over time.

This helps it offer more relevant and timely responses to queries, as it has a *local database* of information to work from.

Since LTM has a local database of information to work from, it can offer **relevant, timely** responses to your queries:

* Recall details from older tasks or code reviews without requiring you to re-describe them.
* Understand ongoing projects more holistically, anticipating next steps and offering suggestions aligned with your actual workflow.

### How Context is Captured

Under the hood, LTM monitors your workflow at the operating system level, capturing data from:

* **IDEs** (e.g., changes, commits, open files)
* **Browsers** (e.g., opened tabs, reference links)
* **Collaboration tools** (e.g., messaging apps, file-sharing platforms)

LTM (through PiecesOS) extends your ability to [enable or disable specific sources](https://beta.docs.pieces.app/products/core-dependencies/pieces-os/quick-menu#quick-menu-actions) for data capture—this way, you can decide exactly what gets tracked and stored, providing flexibility if you have sensitive or personal workflows.

---

The data captured by LTM is processed and stored entirely on your device, so you don’t need to worry about privacy and security—[which you can read more about here.](https://beta.docs.pieces.app/products/privacy-security-your-data)

---

### Less Context Switching

Traditionally, AI tools require you to restate your environment—what project you’re working on, the code you just wrote, or the documentation you’ve referenced.

However, with LTM-2’s temporal grounding, you have:

* **Reduced Manual Input**: No more duplicating the same context or re-pasting large code blocks.
* **Enhanced Continuity**: Your interactions flow seamlessly from one coding session to the next, letting you pick up exactly where you left off.
* **Intuitive Interactions**: Ask questions like “What was I working on with John last week?” or “How do I fix that same CocoaPods issue from last Tuesday?”

Pieces Copilot can reference stored LTM data to give you real-time, **context-aware** answers.

### Workstream Activity

In the [Pieces Desktop App](https://beta.docs.pieces.app/products/desktop-application), the 2nd-generation LTM comes with a incredibly powerful feature called [Workstream Activity](https://beta.docs.pieces.app/products/desktop-application/workstream-activity).

The Workstream Activity view is a dedicated interface in the Pieces Desktop App that provides a continuous snapshot of your recent tasks, discussions, and code or document reviews—captured by the **Long-Term Memory (LTM-2)** **Engine.**

Every 10 minutes, LTM generates a *roll-up* that summarizes your workflow context for that period, highlighting details such as major tasks, key decisions, and follow-up actions.

---

*Reviewing a LTM Roll-up —* Pieces Desktop App

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1740758250747/b98dc42a-21f8-4282-b45b-4b1d7afe8573.png?auto=compress,format&format=webp&q=75)

---

In addition to offering a timeline of roll-ups, the Workstream Activity view [lets you search for keywords, open references or links, and even launch Pieces Copilot Chats](https://beta.docs.pieces.app/products/desktop-application/workstream-activity#interacting-with-roll-ups) directly from a summarized entry.

By surfacing relevant data right when you need it, Workstream Activity eliminates the frustration of recounting your background or re-pasting massive prompts every time you want AI assistance—empowering you to focus on high-value work instead.

---

This means you can revisit precisely what you worked on in the past, even if you step away from a project for *weeks* or *months.*

---

### On-Device Data Storage

All data captured by the LTM is stored locally on your device. At no point does this data leave your device or become accessible to anyone, including the Pieces team, unless you choose to share it.

LTM applies on-device machine learning algorithms to filter out sensitive information and secrets, maintaining high levels of performance, security, and privacy.

For advanced components that require blended processing, user preferences can be set to leverage a cloud-powered Large Language Model as the Copilot’s runtime.

Pieces Drive
------------

Pieces Drive is an intelligent and interactive material manager baked into PiecesOS that allows you to save, manage, and share important developer resources such as notes, useful code snippets, links, and more within your personal local repository.

From this repository, you can view, edit, reuse, and share these materials via Pieces Shareable Links.

---

*Viewing Saved Materials with Pieces Drive —* Pieces Desktop App

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734026181487/e947ec50-4346-49f1-a967-62b218aafc47.png?auto=compress,format&format=webp&q=75?auto=compress,format&format=webp&q=75)

---

### Multi-Tool Integration

With PiecesOS, you can use Pieces Drive in tools like [Obsidian](https://beta.docs.pieces.app/products/obsidian), [Raycast](https://beta.docs.pieces.app/products/raycast), [Microsoft Teams](https://beta.docs.pieces.app/products/microsoft-teams), and your favorite code editors like [IntelliJ](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains), [Visual Studio Code](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code), and [Sublime Text](https://beta.docs.pieces.app/products/extensions-plugins/sublime), and *much more.*

You can also view and adjust metadata saved with your materials in the Applet View of Pieces plugins or the Pieces Desktop App.

### AI-Powered Enrichment

When you save code or other useful materials to Pieces Drive, AI automatically enriches them with a wide variety of useful metadata.

The enrichment process, powered by on-device ML models, provides:

* annotations
* anchors
* shareable links
* related links
* related people
* suggested searches
* tags
* sensitive information
* date created
* source of origin

---

Pieces will also identify and flag any sensitive information, like API keys or personal data, and flag this information under **Sensitive Information.**

---

Pieces Copilot
--------------

Like Pieces Drive, you can find Pieces Copilot nested within Pieces plugins and extensions or the Pieces Desktop App, where it can be used to generate code, answer questions, add code documentation, and serves as the bridge between you and your workflow context as captured by the LTM-2.

---

*Pieces Copilot for Code Generation —* Pieces Desktop App

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734028533289/f37f7075-f2d2-4a99-b948-c23fd70e7257.png?auto=compress,format&format=webp&q=75?auto=compress,format&format=webp&q=75)

---

### Introducing Context to Chats

If you encounter a scenario where you need to recall a specific URL to a Firestore database that was used during a live demo with another coworker, you can use Pieces Copilot (with LTM enabled) to recall that *exact link.*

### Understanding Code

Pieces Copilot helps you comprehend complex code snippets by providing explanations, detailing how specific functions work, and suggesting alternative implementations for that code.

Try asking it alternative ways to handle logging, or more robust methods of error handling—give it an entire file, an entire *project,* or just a function.

### Code Generation

By specifying your requirements for a function or script, Pieces Copilot can generate code that fits into your active file seamlessly.

Use Pieces Copilot and Pieces Drive together to generate boilerplate code or adjust a function, then save it to Pieces Drive with enriched metadata for future use, saving time.

### Error Handling

Debugging, checking logs, and handling errors are often the toughest parts of coding. But with Pieces Copilot, you can debug code thoroughly using the Pieces Desktop App or your preferred plugin.

Context-based debugging is powerful because generative AI, whether cloud-based or local, can understand code semantics beyond what's visible and within the project's scope to find solutions and fixes.

You might even be able to finally center that `div`—seriously, we’ve actually done it.

Updated on March 5, 2025, 9:13 PM UTC

---

[Core Dependencies](/products/core-dependencies)

[Manual Installation](/products/core-dependencies/pieces-os/manual-installation)

---

# Pieces for Developers

# Pieces for Developers

Core Dependencies
=================

---

![](https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/figma_mockups/core_dependencies.png)

---

Learn about [PiecesOS](https://beta.docs.pieces.app/products/core-dependencies/pieces-os) and [Ollama](https://beta.docs.pieces.app/products/core-dependencies/ollama), the two core dependencies that power the Pieces Desktop App and the entire Pieces for Developers suite of [plugins and extensions.](https://beta.docs.pieces.app/products/extensions-plugins)

---

What Are Core Dependencies?
---------------------------

Pieces for Developers products, including the [Pieces for Developers Desktop Application](https://beta.docs.pieces.app/products/desktop-application), utilize *two core dependencies* to provide a local, secure, and efficient development experience—[PiecesOS](https://beta.docs.pieces.app/products/core-dependencies/pieces-os) and [Ollama](https://beta.docs.pieces.app/products/core-dependencies/ollama)**.**

### What Are They?

To run any sort of Pieces software, you will need **[1] PiecesOS,** the backbone of the Pieces Suite. This application is lightweight and runs in the background of your device and powers the [Long-Term Memory (LTM-2) Engine](https://beta.docs.pieces.app/products/core-dependencies/pieces-os#ltm-2), [Pieces Drive,](https://beta.docs.pieces.app/products/desktop-application/managing-materials) and the [Pieces Copilot.](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot)

Running local LLMs requires downloading and installing the **[2] Ollama** wrapper to power on-device AI capabilities, such as querying Pieces Copilot or the local inference required by the LTM-2 Engine.

1. **PiecesOS**: The backbone of the Pieces suite, managing local memory, AI-driven workflow enhancements, and seamless integrations with your development environment.
2. **Ollama**: A specialized wrapper that enables local AI inference, allowing Pieces Copilot and other features to leverage machine learning models *directly on your device.*

### What Do They Do?

These dependencies—**PiecesOS and Ollama**—are lightweight services & engines that handle everything from local model management and context storage to advanced local inference for AI-assisted workflows.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/figma_mockups/pfd_x_piecesos_and_ollama.png)

PiecesOS is **required** for all Pieces products, including:

* Pieces for Developers Desktop App
* Plugins & Extensions for [JetBrains](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains), [VS Code](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code), [Sublime Text](https://beta.docs.pieces.app/products/extensions-plugins/sublime), [JupyterLab](https://beta.docs.pieces.app/products/extensions-plugins/jupyterlab), [Azure Data Studio](https://beta.docs.pieces.app/products/extensions-plugins/azure-data-studio), [Neovim](https://beta.docs.pieces.app/products/extensions-plugins/neovim-plugin), [Raycast](https://beta.docs.pieces.app/products/raycast), [Microsoft Teams](https://beta.docs.pieces.app/products/microsoft-teams), [Obsidian](https://beta.docs.pieces.app/products/obsidian), [the Pieces CLI](https://beta.docs.pieces.app/products/extensions-plugins/cli), and more.

### Why Do We Need Them?

Pieces for Developers is designed with **speed and efficiency** in mind, so PiecesOS acts as the end-all between different Pieces products to minimize client-side overhead and additional code—while also being secure and highly-configurable.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/figma_mockups/performance_privacy_flexibility.png)

Our focus on **security and flexibility** is why we’ve introduced the Ollama wrapper for local large language models—users can switch to entirely on-device generative AI, and by offloading most operations locally, the user experience benefits from:

* **Instant AI-powered assistance** without cloud latency.
* **100% local memory storage** with full control over data.
* **Offline functionality**, ensuring a seamless experience even when disconnected from the internet.
* **Lightweight, background operation**, consuming minimal system resources.

However, you don't have to install Ollama if you don't want to use it.

You can choose to install it if you want to use local models, which is especially useful in enterprise settings where strong device security is important.

---

| **Dependency** | **Purpose** | **Required?** |
| --- | --- | --- |
| PiecesOS | Manages memory, developer material storage, and plugin communication. | Yes — this is required for all Pieces products. |
| --- | --- | --- |
| Ollama | Enables locally-powered generative AI queries and model execution. | No — but this is required for local AI inference. |

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Linux](/products/desktop-application/troubleshooting/linux)

[PiecesOS](/products/core-dependencies/pieces-os)

---

# Pieces for Developers

# Pieces for Developers

---

Keyboard Shortcuts
==================

Keyboard shortcuts enable you to access parts of Pieces for Developers without having to use the **Power Menu** or the settings page.

---

Overview
--------

You can browse the list of keyboard shortcuts below as a reference guide, or you can open the **Keyboard Shortcuts** modal by navigating to **Settings,** and scrolling to **Support** or use `⌘+;` (macOS) or `ctrl+;` (Windows/Linux).

### Use a Piece

These shortcuts let you quickly interact with a saved material in your workspace, making it easy to download, duplicate, or copy it with context.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Download a Piece* | `shift+ctrl+d` | `shift+⌘+d` |
| --- | --- | --- |
| *Duplicate a Piece* | `ctrl+d` | `⌘+d` |
| *Copy with Context* | `ctrl+alt+c` | `⌘+option+c` |

---

### Add a Piece

Use these shortcuts to seamlessly add new materials into Pieces—whether you're importing files, creating new snippets, or adding collections.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Add Code file to Pieces* | `ctrl+v` | `⌘+v` |
| --- | --- | --- |
| *Add Collections to Pieces* | `ctrl+shift+c` | `⌘+shift+c` |
| *Add Code Snippet to Pieces from IDE* | `ctrl+c` *(in IDE),* `ctrl+v` | `⌘+c,⌘+v` |
| *Create New Material from Scratch* | `ctrl+n` | `⌘+n` |

---

### Manage a Saved Material

These keyboard shortcuts help you organize your content by renaming, editing, reclassifying, or even deleting a piece as needed.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Rename* | `ctrl+r` | `⌘+r` |
| --- | --- | --- |
| *Open quick menu* | `ctrl+o` | `⌘+o` |
| *Reclassify* | `ctrl+y` | `⌘+y` |
| *Delete* | `del` | `del` |
| *Edit piece description* | `shift+ctrl+n/shift+ctrl+p` | `shift+⌘+n/shift+⌘+p` |
| *Add related links* | `ctrl+k (if shown)` | `⌘+k (if shown)` |
| *Add tags* | `ctrl+t (if shown)` | `⌘+t (if shown)` |
| *Toggle information view* | `ctrl+i (if shown)` | `⌘+i (if shown)` |
| *Highlight sensitive information* | `ctrl+! (if shown)` | `⌘+! (if shown)` |
| *Open action menu* | `ctrl+enter` | `⌘+enter` |

---

### Editing a Piece

Quickly focus on the editor, save your changes, or exit editing mode with these shortcuts, so you stay in control of your work.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Edit Mode* | `ctrl+e` | `⌘+e` |
| --- | --- | --- |
| *Escape Editing* | `esc` | `esc` |
| *Save Edits* | `ctrl+s` | `⌘+s` |

---

### Share with People / Support

Access options for generating shareable links or reaching out for support directly within the app using these commands.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Generate Shareable Link* | `ctrl+l` | `⌘+l` |
| --- | --- | --- |
| *Submit Feedback/Issues* | `shift+?` | `shift+?` |

---

### Navigating Pieces

These shortcuts make it simple to jump between different views and features, keeping your workflow smooth and efficient.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Focus search* | `ctrl+f or /` | `⌘+f or /` |
| --- | --- | --- |
| *Workflow activity view* | `shift+ctrl+a` | `shift+⌘+a` |
| *Jump to first/last piece* | `ctrl+→/ctrl+←` | `⌘+→/⌘+←` |
| *Toggle between image and code view* | `t` | `t` |
| *View next or previous piece* | `→ or ←` | `→ or ←` |

---

### Zoom & Updates

Adjust the UI scale and check for updates quickly with these handy shortcuts, ensuring a comfortable and current user experience.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Zoom in* | `ctrl++` | `⌘++` |
| --- | --- | --- |
| *Zoom out* | `ctrl+-` | `⌘+-` |
| *Check for desktop app updates* | `shift+u` | `shift+⌘+u` |
| *Release notes* | `shift+w` | `shift+⌘+w` |
| *View keyboard shortcuts* | `ctrl+;` | `⌘+;` |

---

### Configuring Pieces

Use these shortcuts to open settings and toggle themes, allowing you to personalize your Pieces environment with ease.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Open Settings* | `ctrl+,` | `⌘+,` |
| --- | --- | --- |
| *Change Theme* | `ctrl+t` | `⌘+t` |

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Power Menu](/products/desktop-application/actions-keyboard-shortcuts/power-menu)

[Troubleshooting](/products/desktop-application/troubleshooting)

---

# Pieces for Developers

# Pieces for Developers

Power Menu Actions
==================

Pieces for Developers is designed to keep you in the flow. Below is a comprehensive list of actions available within the [Power Menu](https://beta.docs.pieces.app/products/desktop-application/navigation#power-menu) and their associated shortcuts to help you quickly access common tasks.

---

Dynamic View-Based Actions
--------------------------

The **Power Menu** in Pieces for Developers is a dynamic command palette.

When you press the Power Menu hotkey or open it from the app interface, you’ll see different actions *depending on which view or section of the app you’re currently in*.

For example:

* **Pieces Drive View:** You’ll see commands related to creating, editing, or managing snippets (e.g., “Create New Material,” “Optimize Snippet,” etc.).
* **Pieces Copilot View:** You’ll see commands focused on AI-driven interactions (e.g., “Ask Copilot,” “Analyze this Snippet,” etc.).
* **Application & Cloud / Global Context:** Some commands (e.g., “Check for Updates,” “Manage Accounts & Cloud Integrations,” “Go to Settings”) appear in multiple views or from a global context.

---

If you search for a command in the Power Menu and you’re *not* in the view where that command is valid, **it will not appear** in your search results.

---

### Pieces Copilot

You can find lots of saved material and generative AI-focused actions when accessing the Power Menu from the Pieces Copilot view.

---

| **Command** | **Description** |
| --- | --- |
| *Manage General Copilot Settings* | Takes you to the Pieces Copilot settings page. |
| --- | --- |
| *Manage Copilot LLM Runtime Configuration* | Opens a modal for changing cloud and local LLMs. |
| *Enter Focused Copilot* | Collapses the sidebar and enters Focus Mode. |
| *Launch Copilot in Browser* | Launches an instance of the Pieces Desktop App UI in your browser. |
| *New Copilot Conversation with LTM Context* | Starts a new Pieces Copilot Chat with LTM enabled. |
| *New General Copilot Conversation* | Starts a new Pieces Copilot Chat without additional prompting pipelines. |
| *New Contextual Copilot Conversation* | Starts a new Pieces Copilot Chat with context. |
| *New Copilot Conversation* | Starts a new Pieces Copilot Chat that defaults to the set LTM behavior. |
| *New Generative Copilot Conversation* | Starts a new Pieces Copilot Chat with a code-generating prompt pipeline preset. |
| *Delete All Copilot Chats* | Deletes all Pieces Copilot chats. |

---

### Pieces Drive

These actions cover everything from creating and editing your code materials to duplicating and optimizing them, ensuring your content is always well-managed.

---

| **Command** | **Description** |
| --- | --- |
| *Create New Material* | Initiate the creation of a new material (snippet or resource). |
| --- | --- |
| *Create New Material from Scratch* | Build a fresh material without importing existing files. |
| *Create New Material from File(s)* | Generate a material by importing local files. |
| *Create New Material from Description* | Produce a material based on user-provided descriptive text. |
| *View in Gallery* | Open the selected material in a gallery-style view. |
| *Edit Selected Material* | Modify the currently highlighted material. |
| *Open Quick Menu* | Launch a quick-access menu for the selected material. |
| *Templatize Selected Material* | Convert the chosen material into a reusable template. |
| *Optimize Selected Material for Readability* | Improve clarity and structure of the material. |
| *Optimize Selected Material for Speed* | Enhance the performance-focused aspects of the material. |
| *Convert Selected Material to New Language* | Translate or adapt the material into another programming language. |
| *Copy Selected Material* | Duplicate the material content to the clipboard. |
| *Generate Shareable Link* | Create a link that can be shared externally. |
| *Manage Annotations for Selected Material* | Add or edit annotations for context and clarity. |
| *Manage Related Websites for Selected Material* | Associate relevant URLs or references. |
| *Manage Tags for Selected Material* | Assign or remove tags to categorize the material. |
| *Manage Sensitives for Selected Material* | Mark or handle sensitive data within the material. |
| *Manage Anchors for Selected Material* | Attach anchor points for reference or navigation. |
| *Manage Related People for Selected Material* | Link collaborators or owners to the material. |
| *Discover Related Materials* | Find other materials that share context or tags. |
| *Duplicate Selected Material* | Create a direct copy of the current material. |
| *Start Copilot Chat about Selected Material* | Launch an AI-powered conversation focused on this material. |
| *Rename Selected Material* | Change the title or identifier of the material. |
| *Delete Selected Material* | Remove the chosen material from your collection. |
| *View Selected Material Context* | Display contextual information or references. |
| *Copy Context for Selected Material* | Copy contextual details (metadata, tags, etc.) to the clipboard. |

---

### Application & Cloud

Manage your account, cloud integrations, backups, and updates with these commands to keep the app running smoothly and securely.

---

| **Command** | **Description** |
| --- | --- |
| *Backup & Restore Data* | Manage or recover saved backups of your Pieces data. |
| --- | --- |
| *Toggle Light Mode* | Switch the user interface between light and dark themes. |
| *Manage Accounts & Cloud Integrations* | Connect or configure your Pieces Cloud and linked accounts. |
| *Manage Early Access Program* | Enroll in or manage beta features of Pieces for Developers. |
| *Check for Desktop App Updates* | Manually verify if a new version of the Pieces desktop app is available. |
| *Check for Pieces OS Updates* | Inspect whether Pieces OS has an update ready. |
| *Manage In-App Notifications* | Configure or silence various in-app alerts and messages. |
| *Manage Pieces Drive Action Toolbar* | Customize toolbar actions for Pieces Drive integrations. |
| *Turn Long-Term Memory Engine Off* | Disable the memory engine that stores historical snippet context. |
| *Pause Long-Term Memory Engine* | Temporarily stop the memory engine from updating. |
| *View Auto-Saved Materials* | Access automatically saved drafts or snippets. |
| *View All Plugins* | See a complete list of available plugins for Pieces. |
| *Clear Long-Term Memory Engine Data* | Erase stored context or historical data from the memory engine. |

---

### Navigation

These commands help you traverse the Pieces interface, letting you access different panels, search features, and integrations with ease.

---

| **Command** | **Description** |
| --- | --- |
| *Go to Workflow Activity* | Open the workflow overview to see recent tasks or snippet changes. |
| --- | --- |
| *Go to Updates & Upcoming* | Check upcoming features, announcements, or patch notes. |
| *Go to Global Search* | Access the global search interface for snippets and materials. |
| *Go to Settings* | Open the main settings panel for Pieces for Developers. |
| *Go to Snippet Discovery* | Explore recommended or newly discovered snippets. |
| *Go Back* | Return to the previous screen or menu. |
| *Go to Pieces Copilot* | Launch or navigate to the AI-assisted Copilot interface. |
| *Go to Captured Context* | View context automatically captured during snippet creation or usage. |
| *Go Home* | Navigate to the main dashboard or home screen. |
| *Go to VS Code Plugin* | Redirect to the Visual Studio Code integration. |
| *Go to Visual Studio Plugin* | Redirect to the Visual Studio integration. |
| *Go to JetBrains Plugin* | Open the JetBrains family of IDE plugins. |
| *Go to Chromium Extension* | Jump to the Google Chrome browser extension. |
| *Go to Microsoft Edge Extension* | Access the Edge browser extension for Pieces. |
| *Go to Brave Extension* | Navigate to the Brave browser extension. |
| *Go to Opera Extension* | Navigate to the Opera browser extension. |
| *Go to Firefox Extension* | Navigate to the Firefox browser extension. |
| *Go to Obsidian Plugin* | Explore the Obsidian plugin for Pieces integration. |
| *Go to JupyterLab Plugin* | Access the JupyterLab plugin for code snippets. |
| *Go to Microsoft Teams Add-On* | Jump to the Teams add-on for sharing snippets. |
| *Go to Pieces Open Source* | Browse the open-source repos related to Pieces. |
| *Go to Pieces Discord* | Join the Pieces Discord community for support or discussion. |
| *Go to Documentation* | Open the official Pieces documentation. |
| *Go to Support* | Access the Pieces support resources. |
| *Go to Feedback* | Navigate to feedback channels for product improvements. |
| *Report Issue or Bug* | Submit a bug report for the Pieces team to address. |
| *Share Feature Idea or Request* | Propose a new feature or enhancement. |

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Actions & Keyboard Shortcuts](/products/desktop-application/actions-keyboard-shortcuts)

[Keyboard Shortcuts](/products/desktop-application/actions-keyboard-shortcuts/keyboard-shortcuts)

---

# Pieces for Developers

# Pieces for Developers

---

Actions & Keyboard Shortcuts
============================

You can use **Power Menu Actions** and **Keyboard Shortcuts** to quickly perform tasks or navigate from view to view.

---

Overview
--------

The Pieces Desktop App provides two primary ways to quickly perform *actions* and navigate around the app:

1. **Power Menu Actions**: A context-aware command palette that surfaces different options depending on the *view* you’re in (e.g., Pieces Drive or Pieces Copilot).
2. **Keyboard Shortcuts**: System or app-level keyboard shortcuts that let you instantly perform common tasks without opening any menus.

Context-Aware Power Menu
------------------------

When you open the **Power Menu**, the actions you see can change based on your current location in the app.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/actions_and_keyboard_shortcuts/actions_and_keyboard_shortcuts_MAIN/power_menu_actions_screenshot.png)

Here are some examples:

* **Pieces Drive Actions**: Creating, editing, and organizing saved materials, etc.
* **Pieces Copilot Actions**: Generative AI-related features like analyzing or refactoring code, starting new chats, etc.
* **Global/App Actions**: Account management, backup and restore, settings, etc.

Because these commands depend on the active *View*, you’ll *only see and be able to search for* relevant options in that moment.

### When to Use the Power Menu

There are plenty of use cases for using the **Power Menu**—here are a couple:

* **Discoverability**: If you’re unsure which action you need or want to browse available commands, simply open the menu and type a keyword.
* **Context-Specific Actions**: The Power Menu dynamically shows commands that make sense in your current view (e.g., Pieces Drive vs. Copilot).

Keyboard Shortcuts
------------------

For a detailed list of all possible shortcuts and their descriptions, visit the [Keyboard Shortcuts](https://beta.docs.pieces.app/products/desktop-application/power-menu-actions/keyboard-shortcuts) page for multi-platform shortcut tables and action titles.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/actions_and_keyboard_shortcuts/actions_and_keyboard_shortcuts_MAIN/power_menu_actions_screenshot.png)

### When to Use Shortcuts

Shortcuts are a time-tested and often-preferred method of accomplishing individual tasks or processes for developers, creatives, and knowledge-workers alike.

Here are some examples:

* **Speed & Muscle Memory**: If you already know a shortcut (like ⌘+S to save), it’s the fastest way to perform routine tasks.
* **Consistent, Regardless of View**: Many shortcuts (e.g., toggling edit mode or saving a snippet) work across multiple views, even though some may be view-specific.

Actions vs Shortcuts
--------------------

The Pieces Desktop App provides the best of both worlds—a wealth of actions accessible from the **Power Menu** and plenty of keyboard shortcuts to boot.

You might want to try getting familiar with both, and here are two reasons why:

* **Invocation**: Shortcuts are **pressed**, while Power Menu commands are **typed** and then selected.

* **Scope**: Shortcuts typically work globally or in a specific view, while Power Menu commands are always **context-aware** and only appear if they’re relevant to the current workspace.

---

Try to familiarize yourself with both **Power Menu** actions and **Keyboard Shortcuts** to see which better fit your workflow.

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Support & Information](/products/desktop-application/configuration/support-and-information)

[Power Menu](/products/desktop-application/actions-keyboard-shortcuts/power-menu)

---

# Pieces for Developers

# Pieces for Developers

---

Account & Cloud
===============

The **Account & Cloud** settings allows you to manage third-party account connections, cloud synchronization, backups, your personal domain, and more.

---

Accessing Settings
------------------

To open the **Account & Integration** and **Personal Cloud** settings, click the `Settings` gear in the bottom-left of the *default view* when opening the Pieces Desktop App.

Then, navigate to either of the two sections:

1. **Account & Integrations**: Manage external account connections and sign into or out of your Pieces account.
2. **Personal Cloud**: Connect to or disconnect from your Personal Cloud, manage backups, and edit the URL of your personal domain.

Account Management
------------------

External account connections in Pieces are managed through third-party services such as Microsoft, Google, or GitHub.

### Viewing & Editing Linked Accounts

You can connect or disconnect third-party services from this modal.

* View connected accounts (GitHub, Google, Microsoft).
* Accounts are linked upon sign-in and cannot be manually edited.
* Profile information (name, email, avatar) is pulled from the linked service.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/account_and_cloud/account_management_modal_demo.png)

Personal Cloud
--------------

Pieces can run entirely offline, but connecting to Pieces Cloud enables real-time syncing and access across devices.

### Cloud Syncing

Cloud syncing is *optional.*

Once connected, syncing is automatic and happens in real time. Once connected, the only way to disable syncing is by disconnecting from Pieces Cloud.

---

Any material saved in **Pieces Drive** or marked as a snippet is backed up. There are *no storage limits* on cloud-synced data.

---

### Disconnecting Personal Cloud

You can disconnect from your *Personal Cloud* at anytime by clicking the slashed `Cloud` icon, which opens up a *Disconnect Cloud* modal.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/account_and_cloud/disconnect_cloud_modal.png)

There are several features which require connectivity to your *Personal Cloud,* so be sure to read through these before disconnecting:

1. **Link Sharing:** The ability to generate and share links for saved materials from the **Pieces Drive.**
2. **Cloud ML:** Cloud-based enrichment of metadata for saved materials.
3. **Cloud Backup:** The automatic synchronization of your data to Pieces Cloud.
4. **Cloud Integrations:** Your Pieces Cloud which controls your personal subdomain and other integrations.

### Backup & Restore

Pieces allows *manual backups* of your data for long-term storage and recovery.

These data backups are *not automatic* and must be manually created—to do so, open the **Backup Manager** modal by clicking `Backup & Restore Data`.

Clicking `Create Backup` saves a snapshot and uploads it to Pieces Cloud.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/account_and_cloud/backup_and_restore_2.png)

### Backup Contents

A Pieces backup contains the following data:

---

| **Data Type** | **Summary** |
| --- | --- |
| *Snippets* | All saved code snippets and related metadata. |
| --- | --- |
| *Pieces Drive Files* | Any files stored in Pieces Drive. |
| *User Preferences* | Theme, UI settings, and personalization options. |
| *Pieces Copilot Data* | Recent chat history and AI context for Pieces Copilot. |
| *Search & Tagging Data* | User-defined tags and previous searches for quick retrieval. |
| *Account Connections* | Linked GitHub, Google, or Microsoft accounts (without passwords). |

---

Backups *do not include* Pieces Cloud data that is already synced or external files which are not explicitly stored in Pieces Drive.

---

### Restoring a Backup

Previous backups are listed in the **Backup Manager** with details including:

1. **Timestamp** of when the backup was created.
2. **File size** of the backup.
3. **Device name** that created the backup.
4. **PiecesOS version** at the time of backup.

Clicking the `Restore` icon will recover all saved materials, settings, and preferences and return Pieces Drive and the Pieces Desktop App to that previous state.

### Deleting a Backup

To delete a backup, click the `Trash` icon. Note that, when a backup is deleted, it *cannot be restored.* This is a permanent deletion.

Personal Domain
---------------

When connected to Pieces Cloud, each user receives a personal subdomain for sharing snippets.

These domains are *not directly accessible,* but rather prepend the URLs that are generated when sharing saved materials.

### Custom Subdomain

The assigned subdomain (`yourname.pieces.cloud`) is used when sharing snippets.

There is no profile page associated with the domain.

### Changing the Subdomain

You can change the subdomain (i.e., your name) if you like.

To do so, navigate to `Personal Cloud` inside of the **Settings** view and edit the text input field under *Personal Domain.*

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/account_and_cloud/gifs/edit_personal_domain.gif)

Updated on March 5, 2025, 9:13 PM UTC

---

[Configuration](/products/desktop-application/configuration)

[Pieces Copilot & Machine Learning](/products/desktop-application/configuration/pieces-copilot-and-machine-learning)

---

# Pieces for Developers

# Pieces for Developers

---

Additional Settings
===================

There are several configurable behaviors and adjustable settings within the main Settings view that offer deeper configuration choices to help you align the app with your workflow.

---

Accessing Settings
------------------

To access the general **Settings** view, navigate to the `Home Icon` and type “settings” then click `Go to Settings`—or you can click the `Settings` gear in the bottom-left corner of the *default view.*

### Telemetry & Diagnostics

You can control whether or not Pieces collects crash data and anonymous usage information, which is used by the Pieces team to help fix bugs and improve the app.

To enable or disable **Telemetry,** all you have to do is check or uncheck the `Tickbox` to the right of the **Telemetry** setting.

---

Participating in telemetry helps Pieces evolve more effectively, but you can choose to opt out for greater privacy.

---

### Notification Preferences

Avoid unnecessary interruptions by customizing how and when you receive in-app alerts.

You can select the `Bell` icon under *Notifications* to enable `All`, `Critical`, or `None` to determine how many—and what type—of notifications you receive.

`Critical` notifications are regarded primarily as errors and alerts—i.e., if PiecesOS is not detected (an edge case).

Updated on March 5, 2025, 9:13 PM UTC

---

[Aesthetics & Layouts](/products/desktop-application/configuration/aesthetics-layout)

[Support & Information](/products/desktop-application/configuration/support-and-information)

---

# Pieces for Developers

# Pieces for Developers

---

Aesthetics & Layouts
====================

The **Views & Layouts** and **Aesthetics** settings allow users to adjust the visual appearance of the app, including dark and light-themed UI modes, accent colors, and UI scaling.

---

Accessing Settings
------------------

To open the **Views & Layouts** and **Aesthetics** settings, click the `Settings` gear in the bottom-left of the *default view* when opening the Pieces Desktop App.

Then, navigate to either of the two sections:

1. **Views & Layouts**: Manage the layout of the Pieces Desktop app to customize it according to your preferences.
2. **Aesthetics**: Change the brightness, colors, and zoom level for the Pieces App to make sure you're comfortable while using it.

---

Changing Theme
--------------

Pieces allows users to toggle between *dark mode* and *light mode*, giving you full control over the appearance of the Pieces Desktop App.

### Dark & Light Mode

In the **Aesthetics** settings section, you can click the `Toggle Mode` button to switch between a *light* theme and a *dark* UI theme.

You can also use the keyboard shortcuts `⌘+shift+t` (macOS) or `ctrl+shift+t` for (Windows/Linux).

### Changing the Accent Color

Users can customize the UI with one of 35 preset accent colors.

Click the `Accent Color` dropdown in the **Aesthetics** settings section, select one of the available preset colors, and the accent color will apply to interactive elements like buttons and highlights, but not to the entire UI.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/aesthetics_and_layouts/gifs/changing_accent_color.gif)

### Font & UI Size

Use the `Font Size` setting to adjust the size of all text.

To zoom in, use `⌘+,+` (macOS) or `ctrl+,+` (Windows/Linux)—to zoom out, use `⌘+,-` (macOS) or `ctrl+,-` (Windows/Linux).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/aesthetics_and_layouts/gifs/changing_font_and_ui.gif)

---

Adjusting Layout
----------------

There are several default layout behaviors to adjust within the **Views & Layouts** page.

### Default Layout

In this section, you can select the `Default Layout` option to determine which interface appears when Pieces Desktop first launches.

For example, setting it to Pieces Copilot allows you to start with the default generative AI interface, whereas Pieces Drive sets the default interface to the saved materials view on application launch.

---

### Default List View Sort

In this section, the `Default List View Sort` option lets you arrange materials in *List View* based on `Recent`, `Suggested`, or `Alphabetical`, and `Language` criteria.

This default sorting ensures you see new or popular items first (or in whichever order best suits your workflow), without needing to manually re-sort each time.

---

### Default Gallery View Sort

The **Views & Layout** settings also include `Default Gallery View Sort`, allowing you to specify how items appear in *Gallery View* (e.g., sorted by `Most Recent` or `Alphabetical`).

If you frequently rely on visual cues, this setting ensures you’ll quickly spot the snippets or media you need, saving time on manual sorting.

---

### Default Search Mode

You can pick `Default Search Mode` to define which search method Pieces uses by default.

For instance, selecting `Neural Code Search (NCS)` lets you enter natural language queries—perfect for quickly finding code snippets or references without remembering exact filenames or tags.

This is opposed to `Full Text Search (FTS)` or `Search with Snippet` which are more specific, hyper-focused querying workflows.

---

### Confirmation Settings

Confirmation prompts can protect you from unintended deletions or other irreversible changes.

Here, enabling or adjusting `Confirmation Settings` determines whether Pieces requests an extra step (such as “Are you sure?”) before making significant modifications.

---

### Metrics Summary Settings

Each setting in the **Metrics Summary** settings view addresses a distinct scenario or user action within *Pieces Drive*.

Under the *Gallery View*. for instance, `Smart Layout` automatically displays the context summary for smaller snippets, while `All` shows summaries whenever you navigate or hover over snippet icons.

The `Navigating` option triggers summaries only when you scroll or switch between snippets in the *Gallery View*, and `Hovering` keeps them hidden until you hover over the context icon.

By mixing and matching these options, you can highlight crucial snippet details precisely when you need them.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/aesthetics_and_layouts/layout_metrics_summary.png)

---

Theme changes are automatically saved when adjusted, and settings are stored locally, not syncing with Pieces Cloud.

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Copilot & Machine Learning](/products/desktop-application/configuration/pieces-copilot-and-machine-learning)

[Additional Settings](/products/desktop-application/configuration/additional-settings)

---

# Pieces for Developers

# Pieces for Developers

---

Pieces Copilot & Machine Learning
=================================

The **Pieces Copilot & Machine Learning** settings let you configure Copilot chats, manage LLM runtimes, control auto-enrichment, and fine-tune the Long-Term Memory (**LTM-2**) Engine.

---

Accessing Settings
------------------

To open the Pieces Copilot Chats and Machine Learning configuration screens, click the `Settings` gear in the bottom-left corner of the Pieces Desktop App’s main view.

Then, navigate to either of the two sections:

1. **Copilot Chats:** Manage the Pieces Copilot runtime, accent color, LTM defaults, and more.
2. **Machine Learning**: Configure auto-enrichment and control how Pieces handles cloud vs. local ML processing.

Copilot Chats
-------------

Within the *Pieces Copilot Chats* section, you can adjust your Copilot’s behavior, manage the underlying AI model, and clear chat history as needed.

### Manage LLM Runtime

The `Manage Copilot LLM Runtime` option allows you to switch between available AI models (e.g., “GPT-4o Mini”) or configure any new runtimes provided by Pieces—both *cloud* and *local.*

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/pieces_copilot_and_machine_learning/copilot_runtime_modal_inside_settings.png)

---

Switching models can be useful if you want to try different levels of quality or speed.

---

### Reset Active Runtime

Use the `Hard-Reset Active Runtime` button if the Pieces Copilot stops generating responses or behaves unexpectedly.

This effectively *restarts* the AI model so that it can begin processing requests again.

### Accent Color

The **Accent Color** sets a highlight color for specific elements, like text bubbles and other view-based UI elements within the [Pieces Copilot](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot) view or other views.

For more information about customizing your UI colors, visit our [Aesthetics & Layouts](https://beta.docs.pieces.app/products/desktop-application/configuration/aesthetics-layout) documentation.

### Default LTM Behavior

Enable or disable `Use Long-Term Memory (LTM-2) Context by Default` to control whether Pieces Copilot automatically references your recent workflow context as captured by the LTM.

Turning this off means the AI will respond without leveraging your workflow context unless manually enabled when starting a new Pieces Copilot Chat.

### Delete Chats

Click `Delete All Copilot Chats` to remove all stored chat history from your device.

This is useful if you want to start fresh or clear out older conversations that are no longer needed.

Machine Learning
----------------

The *Machine Learning* section governs how Pieces enriches your saved materials, controls local vs. cloud-based ML resources, and manages on-device LTM.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/pieces_copilot_and_machine_learning/machine_learning_settings_view.png)

### Auto-Enrichment Behavior

`Auto-Enrichment` settings let you control how much metadata is automatically attached to code snippets and other saved materials.

Pieces can add *tags, related websites, hints,* and *references to people* (e.g., authors of code) at varying levels of detail: `No Enriched Data`, `Low`, `Medium`, and `High`.

---

By default, all auto-generated metadata settings are set to `Medium`.

Lowering these levels may be beneficial if you prefer minimal automatic annotations or need to limit external lookups.

---

### Machine Learning (ML) Processing

Under *ML Processing*, you can fine-tune how Pieces uses local and cloud resources to power various functions and processes within the Pieces software experience.

### Enrichment Mode

You can select whether or not Pieces utilizes cloud or local models—or a mix of both—for saved material enrichment.

* `Blended`: Uses both local and cloud resources for material enrichment.
* `Local`: Restricts enrichment to on-device analysis and generation *only*—the best case scenario for privacy-forward workflows.
* `Cloud`: Optimized for speed, Pieces sends your material data to Pieces Cloud for processing.

---

Selecting the mode that best fits your security and performance needs ensures that Pieces processes your snippets in the most efficient or privacy-conscious way possible.

---

### LTM-2 Engine

Pieces employs an on-device **Long-Term Memory (LTM-2) Engine** to capture recent contexts, usage patterns, and snippet details for more intelligent Copilot suggestions.

Configurable behaviors include:

* `On`: LTM is fully active and enabled by default and on start-up.
* `Off`: Disables LTM entirely.
* `Pause`: Provides options for halting the LTM for 15 minutes, 1 hour, 6 hours, 12 hours, or 24 hours.

While *paused* or *off,* Pieces Copilot won’t use your workflow context to inform suggestions or provide more accurate information in generative AI responses.

[You can read more about the LTM-2 Engine here.](https://beta.docs.pieces.app/products/core-dependencies/pieces-os#ltm-2)

### Clearing LTM-2 Data

Click the `Trash` icon next to `Clear Long-Term Memory Engine Data` to remove any persisted context that LTM has gathered over time.

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Account & Cloud](/products/desktop-application/configuration/account-and-cloud)

[Aesthetics & Layouts](/products/desktop-application/configuration/aesthetics-layout)

---

# Pieces for Developers

# Pieces for Developers

---

Support & Information
=====================

Find support links and information on your device and active version for PiecesOS and the Pieces for Developers Desktop App in these three “sticky” sections within the **Settings** view.

---

Accessing Settings
------------------

To access the general **Settings** view, navigate to the `Home Icon` and type *settings* then click `Go to Settings`—or you can click the `Settings` gear in the bottom-left corner of the *default view.*

Discover & Support Sections
---------------------------

No matter which tab you select in **Settings** (e.g., [Machine Learning](https://beta.docs.pieces.app/products/desktop-application/configuration/pieces-copilot-and-machine-learning#machine-learning), [Telemetry](https://beta.docs.pieces.app/products/desktop-application/configuration/additional-settings#telemetry--diagnostics), [Aesthetics](https://beta.docs.pieces.app/products/v.1.06/desktop-application/configuration/aesthetics-layout#changing-theme)), you’ll always see three smaller sections at the bottom of that specific settings view.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/support_and_information/support_pfd_pos_info_demo.png)

These three sections are “sticky,” meaning they’re appended to the end of every Settings tab for quick access.

### Support

Links to support resources and keyboard shortcuts.

---

| **Button / Action** | **Explanation** |
| --- | --- |
| *Documentation* | Opens Pieces’ official documentation. |
| --- | --- |
| *Submit Feedback/Issues* | Redirects you to a feedback or bug-reporting flow. |
| *Keyboard Shortcuts* | Displays or links to a list of relevant hotkeys. |

---

### Desktop App Information

Check the active app version, check for updates, get platform information and launch onboarding if you want to refamiliarize yourself with the fundamentals of the Pieces Desktop App\*\*.\*\*

---

| **Button / Action** | **Explanation** |
| --- | --- |
| *Desktop App Version* | Shows the installed version of the Pieces Desktop App. |
| --- | --- |
| *Check for Desktop App Updates* | Manually triggers an update check to see if a new version is available. |
| *Launch Onboarding* | Re-opens the guided setup workflow. |
| *Platform* | Displays OS & platform details (e.g., macOS 15.1.1). |

---

### PiecesOS Information

View the installed PiecesOS version, check for updates and see what port PiecesOS is calling to.

---

| **Button / Action** | **Explanation** |
| --- | --- |
| *PiecesOS Version* | Displays the currently installed version of PiecesOS. |
| --- | --- |
| *Check for PiecesOS Updates* | Manually triggers an update check for PiecesOS. |
| *PiecesOS Port* | Lists the port number currently being used by PiecesOS. |

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Additional Settings](/products/desktop-application/configuration/additional-settings)

[Actions & Keyboard Shortcuts](/products/desktop-application/actions-keyboard-shortcuts)

---

# Pieces for Developers

# Pieces for Developers

---

Aesthetics & Layouts
====================

The **Views & Layouts** and **Aesthetics** settings allow users to adjust the visual appearance of the app, including dark and light-themed UI modes, accent colors, and UI scaling.

---

Accessing Settings
------------------

To open the **Views & Layouts** and **Aesthetics** settings, click the `Settings` gear in the bottom-left of the *default view* when opening the Pieces Desktop App.

Then, navigate to either of the two sections:

1. **Views & Layouts**: Manage the layout of the Pieces Desktop app to customize it according to your preferences.
2. **Aesthetics**: Change the brightness, colors, and zoom level for the Pieces App to make sure you're comfortable while using it.

---

Changing Theme
--------------

Pieces allows users to toggle between *dark mode* and *light mode*, giving you full control over the appearance of the Pieces Desktop App.

### Dark & Light Mode

In the **Aesthetics** settings section, you can click the `Toggle Mode` button to switch between a *light* theme and a *dark* UI theme.

You can also use the keyboard shortcuts `⌘+shift+t` (macOS) or `ctrl+shift+t` for (Windows/Linux).

### Changing the Accent Color

Users can customize the UI with one of 35 preset accent colors.

Click the `Accent Color` dropdown in the **Aesthetics** settings section, select one of the available preset colors, and the accent color will apply to interactive elements like buttons and highlights, but not to the entire UI.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/aesthetics_and_layouts/gifs/changing_accent_color.gif)

### Font & UI Size

Use the `Font Size` setting to adjust the size of all text.

To zoom in, use `⌘+,+` (macOS) or `ctrl+,+` (Windows/Linux)—to zoom out, use `⌘+,-` (macOS) or `ctrl+,-` (Windows/Linux).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/aesthetics_and_layouts/gifs/changing_font_and_ui.gif)

---

Adjusting Layout
----------------

There are several default layout behaviors to adjust within the **Views & Layouts** page.

### Default Layout

In this section, you can select the `Default Layout` option to determine which interface appears when Pieces Desktop first launches.

For example, setting it to Pieces Copilot allows you to start with the default generative AI interface, whereas Pieces Drive sets the default interface to the saved materials view on application launch.

---

### Default List View Sort

In this section, the `Default List View Sort` option lets you arrange materials in *List View* based on `Recent`, `Suggested`, or `Alphabetical`, and `Language` criteria.

This default sorting ensures you see new or popular items first (or in whichever order best suits your workflow), without needing to manually re-sort each time.

---

### Default Gallery View Sort

The **Views & Layout** settings also include `Default Gallery View Sort`, allowing you to specify how items appear in *Gallery View* (e.g., sorted by `Most Recent` or `Alphabetical`).

If you frequently rely on visual cues, this setting ensures you’ll quickly spot the snippets or media you need, saving time on manual sorting.

---

### Default Search Mode

You can pick `Default Search Mode` to define which search method Pieces uses by default.

For instance, selecting `Neural Code Search (NCS)` lets you enter natural language queries—perfect for quickly finding code snippets or references without remembering exact filenames or tags.

This is opposed to `Full Text Search (FTS)` or `Search with Snippet` which are more specific, hyper-focused querying workflows.

---

### Confirmation Settings

Confirmation prompts can protect you from unintended deletions or other irreversible changes.

Here, enabling or adjusting `Confirmation Settings` determines whether Pieces requests an extra step (such as “Are you sure?”) before making significant modifications.

---

### Metrics Summary Settings

Each setting in the **Metrics Summary** settings view addresses a distinct scenario or user action within *Pieces Drive*.

Under the *Gallery View*. for instance, `Smart Layout` automatically displays the context summary for smaller snippets, while `All` shows summaries whenever you navigate or hover over snippet icons.

The `Navigating` option triggers summaries only when you scroll or switch between snippets in the *Gallery View*, and `Hovering` keeps them hidden until you hover over the context icon.

By mixing and matching these options, you can highlight crucial snippet details precisely when you need them.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/aesthetics_and_layouts/layout_metrics_summary.png)

---

Theme changes are automatically saved when adjusted, and settings are stored locally, not syncing with Pieces Cloud.

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Copilot & Machine Learning](/products/desktop-application/configuration/pieces-copilot-and-machine-learning)

[Additional Settings](/products/desktop-application/configuration/additional-settings)

---

# Pieces for Developers

# Pieces for Developers

---

Configuration
=============

In the **Pieces for Developers Desktop App**, you can customize everything from visuals and aesthetics to Pieces Drive enrichment and Pieces Copilot models to fit your preferences and workflow.

---

Accessing Settings
------------------

There are two ways to open up the **Settings** view in the Pieces Desktop App.

You can either navigate to the **Power Menu** by clicking the `Home Icon`, or if in the Pieces Copilot view, click the small `Settings` gear in the bottom-left hand corner of the application.

This will open up the settings & configuration menu where you can adjust account and cloud behaviors, check your application versions, adjust views and layouts, and more.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/configuration_main/gifs/accessing_settings_from_gear.gif)

### Account & Cloud

The [Account & Cloud](https://beta.docs.pieces.app/products/desktop-application/configuration/account-and-cloud) section manages your Pieces account, cloud services, and backups. This ensures a seamless connection across devices and helps keep your data secure.

1

### Cloud Management

Connect and sync with Pieces Cloud for *real-time access* across multiple devices, or monitor your connection status and manage sync preferences.

2

### Database Backups

Automatically backup your snippets, files, and projects or restore previous versions in case of data loss.

### Pieces Copilot & Machine Learning

These [Pieces Copilot and Pieces Drive](https://beta.docs.pieces.app/products/desktop-application/configuration/pieces-copilot-and-machine-learning) configuration sections let you adjust default behaviors related to metadata, LTM context, models, and local model processing.

1

### Runtime

Change models, reset the active runtime if facing issues, and use Long-Term Memory (LTM) context by default, and more.

2

### Enrichment

Adjust the level of auto-enrichment performed locally when Pieces Drive generates and assigns metadata to saved materials.

### Aesthetics & Layouts

The [Aesthetics & Layouts](https://beta.docs.pieces.app/products/desktop-application/configuration/aesthetics-layout) section allows you to customize the visual appearance of the Pieces Desktop App—dark and light modes, UI scaling, accent color, and more.

You can also set the default UI of different views and adjust default sorting and listing methods for displaying snippets & summaries

1

### Dark & Light Mode

Adjust auto-switch settings based on system preferences.

2

### Accent Colors

Select from a range of colors to adjust Pieces Copilot chat accents and other visual elements.

3

### Font & UI Scaling

Increase or decrease font size and UI size for different screen resolutions.

4

### Layout Settings

Set the default view to Pieces Copilot or Pieces Drive, default search mode, and default gallery & list views.

5

### Default Search Mode

Choose blended, full-text, neural code search, or search-with-material as the default search mode for the **Search Bar.**

### Additional Settings

The [Additional Settings](https://beta.docs.pieces.app/products/desktop-application/configuration/additional-settings) section contains advanced configurations that allow you to fine-tune Pieces for Developers to suit your workflow.

1

### Telemetry & Diagnostics

Enable or disable anonymous usage data collection and manage crash reporting and performance monitoring.

2

### Notifications

Customize which in-app alerts you receive as well as the frequency of notification pop-up modals.

3

### Shortcuts

View the list of default shortcuts for Pieces Desktop App functionality specific to your devices operating system (OS).

Support & Information
---------------------

Whenever you access the **Settings** view and click on a specific section—i.e., *Machine Learning, Telemetry,* or *Copilot Chats*—there are always three smaller [Support & Information sections](https://beta.docs.pieces.app/products/desktop-application/configuration/support-and-information) appended to the end of the focused settings view.

These always-available sections are:

1. *Support*\*\*:\*\* Contains links to documentation, submitting feedback or reporting issues, and all keyboard shortcuts.
2. *Desktop App Information*\*\*:\*\* Lists the Pieces Desktop App version, lets you check for updates, launch onboarding, and provides your platform information.
3. *PiecesOS Information*\*\*:\*\* Lists your PiecesOS version, lets you check for updates, and lists the active PiecesOS port.

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Global Search](/products/desktop-application/navigation/global-search)

[Account & Cloud](/products/desktop-application/configuration/account-and-cloud)

---

# Pieces for Developers

# Pieces for Developers

---

Download | Pieces for Developers
================================

Find download links for the Pieces Desktop App and links to OS-specific and method-specific installation guides.

---

Installing the Pieces Desktop App
---------------------------------

Installation for the Pieces Desktop App and its core dependencies—[PiecesOS](https://beta.docs.pieces.app/products/core-dependencies/pieces-os) and [Ollama](https://beta.docs.pieces.app/products/core-dependencies/ollama)—is straightforward.

Select the appropriate download file for your platform (macOS/Windows) or follow the CLI installation instructions for Linux.

---

macOS users will be prompted to select the proper download file based on their device’s architecture—ARM or Intel.

---

Downloads
---------

Find the download files for the Pieces Desktop App for your macOS or Windows device below.

### macOS

If you know your macOS device’s CPU architecture, select either the ARM or Intel buttons to download the Pieces Desktop App using the *recommended* installation method.

Read this [guide on determining your CPU architecture](https://beta.docs.pieces.app/products/v.1.06/desktop-application/troubleshooting/macos#checking-cpu-type) if you need help.

For detailed instructions, refer to our comprehensive [macOS installation and quick-start guide.](https://beta.docs.pieces.app/products/meet-pieces/macos-quickstart)

[![Apple Silicon / ARM](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740593663020%2Fd271a302-cec3-466c-9d9d-085f762d95bc.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Apple Silicon / ARM

*macOS 12.0 (Monterey) or higher*](https://builds.pieces.app/stages/production/macos_packaging/pkg-arm64/download?download=true&product=DOCUMENTATION_WEBSITE&ga_visitor=286281413.1724689222&_gl=1*soqacc*_gcl_au*MTgwNDcwNzY1OC4xNzQwNDA5MjEz*_ga*Mjg2MjgxNDEzLjE3MjQ2ODkyMjI.*_ga_BVYEFRWCYX*MTc0MDU3NzUzMS42My4xLjE3NDA1OTM3MjEuNTIuMC4w)[![Intel](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740593657157%2Fc79ed786-39f3-4fca-a596-451ce98307b1.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Intel

*macOS 12.0 (Monterey) or higher*](https://builds.pieces.app/stages/production/macos_packaging/pkg/download?download=true&product=DOCUMENTATION_WEBSITE&ga_visitor=108380292.1740593596&_gl=1*1vo6txu*_gcl_au*MTE0NTE1OTUyLjE3NDA1OTM1OTY.*_ga*MTA4MzgwMjkyLjE3NDA1OTM1OTY.*_ga_BVYEFRWCYX*MTc0MDU5MzU5NS4xLjEuMTc0MDU5MzYxMS40NC4wLjA.)

Otherwise, you can download Pieces software using [alternative installation methods](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/macos#alternative-installation-methods) (.DMG, Homebrew).

### Windows

Click the download button to install the Pieces Desktop App using the *recommended* installation method.

For detailed instructions, refer to our comprehensive [Windows installation and quick-start guide.](https://beta.docs.pieces.app/products/meet-pieces/windows-quickstart)

[![Windows](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740593810761%2F7014560e-d011-438c-aa0d-1509abcf313d.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Windows

*Windows 10 (1809) or higher*](https://builds.pieces.app/stages/production/pieces_for_x/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE&ga_visitor=108380292.1740593596&_gl=1*6zitif*_gcl_au*MTE0NTE1OTUyLjE3NDA1OTM1OTY.*_ga*MTA4MzgwMjkyLjE3NDA1OTM1OTY.*_ga_BVYEFRWCYX*MTc0MDU5MzU5NS4xLjEuMTc0MDU5Mzc2Ny42MC4wLjA.)

If you want alternative installation methods (.MSIX, WinGet), [click here.](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/windows#alternative-installation-methods)

### Linux

Installation of Pieces software is done using the Command-Line Interface (CLI).

For a step-by-step terminal process using the CLI, refer to our [comprehensive Linux installation and quick-start guide.](https://beta.docs.pieces.app/products/meet-pieces/linux-quickstart)

Updated on March 5, 2025, 9:13 PM UTC

---

[Desktop App](/products/desktop-application)

[Pieces Copilot](/products/desktop-application/pieces-copilot)

---

# Pieces for Developers

# Pieces for Developers

---

Introduction to Pieces Drive
============================

**Pieces Drive** is a central feature of the Pieces for Developers Desktop App—your all-in-one workspace for saving, managing, and quickly accessing code snippets and other development materials.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pfd_docs_figmas/pieces_drive.png)

---

Overview
--------

Pieces Drive gives you the tools to collect and access your most valuable development assets—code snippets, notes, and more—all in one integrated interface.

You can quickly add items, enrich them with tags and annotations, search using natural language or filters, transform snippets into different languages, and share links with others.

Below are quick overviews of Pieces Drive's features. For detailed information on a specific function, click the links for documentation and walkthroughs:

* [Saving & Organizing](https://beta.docs.pieces.app/products/desktop-application/pieces-drive/saving-and-organizing-materials): Learn how to add new materials, import existing code from local files or GitHub Gists, and keep your snippets neatly structured.

* [Searching & Filtering](https://beta.docs.pieces.app/products/desktop-application/pieces-drive/searching-and-filtering): Discover how to leverage natural language queries, filters, and tags to quickly locate specific materials in Pieces Drive.
* [Enrichment & Metadata](https://beta.docs.pieces.app/products/desktop-application/pieces-drive/enrichment-and-metadata): Understand how Pieces automatically generates tags, annotations, suggested links, and captures context for each snippet, as well has how to access and update associated metadata.
* [Transforming Code](https://beta.docs.pieces.app/products/desktop-application/pieces-drive/transforming-code): See how you can duplicate code snippets to create more readable, more performant, or entirely different-language versions.
* [Sharing:](https://beta.docs.pieces.app/products/desktop-application/pieces-drive/sharing) Find out how to generate shareable links to your snippets, including managing sensitive information before sending links to colleagues.

Pieces Drive | Main View
------------------------

To access the Pieces Drive view, first click the *home* icon in the top-left corner to open the [Power Menu.](https://beta.docs.pieces.app/products/desktop-application/power-menu-actions/power-menu)

Then, select `Pieces Drive` from the list of available views.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/gifs/opening_pieces_drive_overview.gif)

Inside the Pieces Drive view, you can:

1. Scroll through list of saved materials, or search using Natural Language Processing (NLP) to find the materials you need.
2. Save new materials or create materials from scratch using a range of mediums.
3. View captured context alongside individual snippets and edit the metadata generated alongside them.
4. Discover related snippets, duplicate and transform snippets, or start [Pieces Copilot Chats with them.](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot/context-and-project-integration#enriching-chats-with-ltm-2-context)

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/pieces_drive_main_view.png)

By incorporating Pieces Drive into your workflow, you can stay both efficient and organization whether you’re working in a solo capacity or as part of a larger team.

### Saving & Organizing

We’ll walk you through the main Pieces Drive saving workflow and touch on all the essential elements you can interact with here.

You’ll learn how to add materials in various ways—pasting code from your clipboard, using an IDE plugin, importing GitHub Gists, or even discovering snippets in a local folder.

Or, you can create from scratch when you need a quick note or brand-new snippet and organize your growing library with tags, annotations, and reclassification.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/gifs/saving_and_organizing_snippet_creation_demo.gif)

### Searching & Filtering

One of Pieces Drive’s major advantages is its robust search capabilities.

By typing natural language queries or toggling filters for titles, annotations, or full snippet content, you can zero in on exactly what you need—even if you have hundreds of stored snippets.

In this section, we’ll cover how to use natural language to find snippets by function or topic, use filters to narrow down results by language, tags or custom phrases, and save specific search filters for repeated use.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/gifs/searching_filtering_pieces_drive_parent_page.gif)

### Enrichment & Metadata

Pieces Drive automatically enriches every snippet with valuable context, making it more than just a code vault.

This includes auto-generated titles, suggested queries, related websites, and tags that help you quickly see what a snippet does and how it might be used.

You’ll learn how to access *Captured Context* for individual saved materials, how to manage sensitive information, view and edit automatically generated annotations and tags, and more.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/enrichment_metadata_pieces_drive_parent_page.png)

### Transforming Code

Ever need a quick performance boost, a language switch, or a stripped-down boilerplate version of a saved code snippet?

Pieces Drive’s transformation options let you duplicate snippets in a few clicks to generate more readable or performance enhanced versions, snippets in different languages, and more.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/ransforming_code_pieces_drive_parent.png)

### Sharing

Collaboration often requires easily accessible code references.

Pieces Drive allows you to create secure, shareable links for your snippets—complete with the same metadata and context found in your desktop app.

Learn how to generate shareable links with best practices in mind for handling sensitive data, and both internal and external use cases for sharing code.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/sharing_pieces_drive_parent_page.png)

### Integrating Pieces Drive & Pieces Copilot

When you want AI-assisted code explanations, troubleshooting, or generation, Pieces Copilot can reference the snippets you have saved in Pieces Drive.

By adding a snippet as context in a Copilot chat, the AI can read its entire content and produce more relevant, targeted answers.

We’ll show you how to attach snippets directly from Pieces Drive into a Pieces Copilot Chat, how to navigate back and forth between different views and help you understand how snippet metadata informs AI responses.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/gifs/integrating_drive_copilot_parent_page.gif)

---

Get Started with Pieces
-----------------------

Click one of the links below to be redirected to your platform-specific (OS) download and installation Quickstart page:

* [macOS](https://beta.docs.pieces.app/products/meet-pieces/macos-quickstart)
* [Windows](https://beta.docs.pieces.app/products/meet-pieces/windows-quickstart)
* [Linux](https://beta.docs.pieces.app/products/meet-pieces/linux-quickstart)

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Copilot in Multiple Environments](/products/desktop-application/pieces-copilot/pieces-copilot-in-multiple-environments)

[Saving & Organizing Materials](/products/desktop-application/pieces-drive/saving-and-organizing-materials)

---

# Pieces for Developers

# Pieces for Developers

---

Captured Context
================

The Captured Context view in Pieces for Developers uses the Long-Term Memory Engine (**LTM-2**) to automatically gather, categorize, and display details from your coding workflow—such as websites, file anchors, people, annotations, and tags.

---

Accessing the Captured Context View
-----------------------------------

To open the **Power Menu**, click the `Home Icon` next to the search bar in the Pieces Desktop App, or press `⌘+return` (macOS) or `ctrl+enter` (Windows/Linux).

Then select `Captured Context` from the dropdown.

When you first open the *Captured Context* view, you’ll see a list of recently captured websites:

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/captured_context/pieces_captured_context_overview.png)

Each entry typically includes a snapshot image, a page title slug, a short description generated by Pieces Copilot, and a clickable URL.

Navigation & Actions
--------------------

A series of tabs appears above the list—**websites**, **anchors**, **people**, **annotations**, and **tags**—along with a search bar.

These tabs let you switch between different categories of captured context, while the search bar instantly filters your repository based on any keywords you enter.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/captured_context/gifs/pieces_captured_context_tabs_search.gif)

### Websites

Under *websites*, you’ll see pages that the LTM detected during your workflow.

Each entry usually includes a thumbnail or banner image, a short description, and a direct link to the site.

Clicking the link opens the webpage in your browser.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/captured_context/gifs/open_website_from_cc_view.gif)

### Anchors

The **Anchors** tab displays context tied to specific files or folders you’ve accessed, such as project directories, code bases, and locations where snippets are stored.

This is especially helpful for recalling exactly where certain references or snippets live in your projects.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/global_search/anchors_with_previews.png)

### People

Under **People**, you’ll see names, email addresses, or organization members that the LTM captured during your workflow—which is great when multiple contributors are involved in a particular task.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/captured_context/pieces_captured_context_people.png)

### Annotations

The **Annotations** tab provides AI-generated short descriptions for your snippets or other saved materials.

These concise overviews allow you to recall a snippet’s purpose without opening the entire material, keeping your workspace uncluttered.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/captured_context/pieces_captured_context_annotations.png)

### Tags

Within **Tags**, you’ll find automatically generated descriptors that highlight the frameworks, languages, or key concepts that are continually referenced in your workflow.

Scanning these tags makes it easy to locate related items or filter your collection based on a specific technology or theme.

You can also add your own tags, too—just click the `Add Tags` button in the bottom right of the Pieces Desktop App.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/captured_context/add_tags_modal.png)

Updated on March 5, 2025, 9:13 PM UTC

---

[Settings](/products/desktop-application/navigation/settings)

[Updates & Upcoming](/products/desktop-application/navigation/updates-upcoming)

---

# Pieces for Developers

# Pieces for Developers

---

Global Search
=============

**Global Search** in Pieces for Developers provides a unified way to find snippets, people, tags, links, and anchors across your entire repository.

---

Accessing Global Search
-----------------------

**Global Search** is a universal search query feature which helps you find *anything* that’s been captured, tracked or saved to your Pieces Drive.

By scanning all stored content, it delivers quick, context-rich results that help you locate and utilize your materials more efficiently.

Here’s how to open **Global Search**:

1. Open the **Power Menu** by clicking the `Home Icon` next to the search bar in the Pieces Desktop App, or press `⌘+return` (macOS) or `ctrl+enter` (Windows/Linux).
2. In the *Find Action* field, type **Global Search**.
3. Select `Go to Global Search` from the dropdown.

Main Interface Overview
-----------------------

When **Global Search** first opens, you’ll see:

* A *Find Materials...* search bar at the top.
* A *Suggested Searches* section under the search bar.
* A `Refresh` icon next to Suggested Searches to get a new set of recommendations.
* A ‘Powered by NCS’ indicator and an `i` icon at the bottom, which explains more about NCS when hovered over.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/global_search/pieces_global_search_main_view.png)

### Suggested Searches

Below the search bar, you’ll find a list of *Suggested Searches* based on your recent activity or frequently accessed snippets.

To use this feature, either click a *Suggested Search* to immediately run that query, or click the `Refresh` icon to load a new set of suggestions.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/global_search/gifs/pieces_global_search_suggestions.gif)

### Performing a Search

To perform a search, type your query into the *Find Materials* field, then press `return` (macOS) or `enter` (Windows/Linux), or you can click the `Search` icon.

Pieces will perform the search and display your results in the main view, sorted by how relevant they are to your query.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/global_search/gifs/how_to_search.gif)

Search Results
--------------

Once you run a search, **Global Search** populates the main area with matching snippets and related info.

Results are split into two sections showing the list of located code snippets and materials and other related context.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/global_search/both_sides_all_info.png)

### Material List

The left-side of the view displays the **Material List,** where all relevant saved materials are displayed:

* **Snippet Title**: Auto-generated by Pieces to describe the snippet. Click the title to open it in Pieces Drive.
* **Snippet Code Preview**: A quick look at the snippet’s content.
* **Copy**: Copies the snippet to your clipboard.
* **Productivity Score**: Indicates how frequently or effectively this snippet has been used. Higher scores mean greater utility.

### Related Information

The right-side of the view displays related information and other contextual data:

* **Related People**: Names or emails of collaborators associated with your search query.
* **Related Anchors**: Files, folders, or code bases linked to the snippets.
* **Related Tags**: Automatically generated descriptors (e.g., frameworks, languages).
* **Related Links**: URLs or external references tied to the snippets.

Updated on March 5, 2025, 9:13 PM UTC

---

[Workflow Activity](/products/desktop-application/navigation/workflow-activity)

[Configuration](/products/desktop-application/configuration)

---

# Pieces for Developers

# Pieces for Developers

---

Settings
========

The `Settings` page in Pieces for Developers contains all of the configurable options, adjustable preferences, and modifiable behaviors for the Desktop Application.

By integrating external services or customizing the interface, you can tailor the Pieces Desktop App to your coding workflow.

---

Accessing Settings
------------------

To access settings, press `⌘+,` (macOS) or `ctrl+,` (Windows/Linux).

You can also open the **Power Menu**, type ‘settings’ in the search field, then select `Go To Settings` from the dropdown.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/settings/pieces_settings_overview.png)

Understanding the Settings Layout
---------------------------------

When you open **Settings**, you’ll find several configuration categories on the left side and an `All` tab at the top.

Click any category to reveal its associated options in the main panel.

* `Categories`: Organized for quick navigation.
* `All`**:** Displays every setting in one place.

You can review each section individually or see everything at once by selecting `All`**.**

Account & Integrations
----------------------

In this section, you can integrate external services with Pieces and adjust your user details, beginning with **Account Information.**

This area displays your email address and any linked accounts.

If you’re interested in testing upcoming features, the **Early Access Program** lets you join beta releases and stay ahead of the curve.

Personal Cloud
--------------

The **Personal Cloud** tab controls how your snippets and materials sync across devices.

You’ll see a status for your cloud connection (including the last sync time), plus options to set or modify your personal domain.

There’s also a `Backup & Restore Data` feature to preserve or retrieve your snippets from the cloud whenever needed.

* `Status`: Check if your cloud is connected and see when it last synced.
* `Domain`: Update your personal domain.
* `Backup & Restore Data`: Protect your snippets and data.

Copilot Chats
-------------

Within **Pieces Copilot Chats**, decide which LLM runtime powers the Pieces Copilot and manage your chat-specific settings.

You can **Manage Copilot LLM Runtime** or **Hard-Reset Active Runtime** if it becomes unresponsive. You can also pick an accent color for the chat UI, and `Delete All Copilot Chats` to clear your chat history.

* `Manage Copilot LLM Runtime`: Switch or reset your current LLM.
* `Hard-Reset Active Runtime`: Restart the runtime if it’s unresponsive.
* `Delete All Copilot Chats`: Remove your entire chat history.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/settings/copilot_chats_tab.png)

Machine Learning
----------------

Pieces uses an on-device ML engine (with optional cloud capabilities) to enrich and tag your snippets.

You can toggle `Auto-Generated Tags`, `Auto-Generated Websites`, `Auto-Generated Hints`, and `Auto-Generated People`.

Adjust the Enrichment Level (0 to 9) or choose an *Enrichment Mode* (local, cloud, or blended). The LTM captures historical data for additional context—if needed, you can clear it to start fresh.

* `Auto-Generated Tags`: Enable or disable automated tagging.
* `Auto-Generated Websites`, `Auto-Generated Hints`, `Auto-Generated People`: Fine-tune which content gets generated.
* `Enrichment Level`: Control how detailed the ML analysis should be.
* `Enrichment Mode`: Decide between local, cloud, or blended.
* `Long-Term Memory Engine`: Provides temporal context, with an option to clear data.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/settings/enrichment_levels.png)

Views & Layouts
---------------

**Views & Layouts** controls how you see content in Pieces.

You can set a `Default Layout`, choose how items are sorted in list or gallery views, and select a `Default Search Mode` like `Neural Code Search (NCS)`.

You’ll also find options for `Confirmation Settings` (for specific actions), toggles for usage or metrics summaries, and a `Default Toolbar` for newly saved snippets.

* `Default Layout`: Choose your preferred view on launch.
* `Default Search Mode`: Select how you search by default.
* `Confirmation Settings`: Control dialog prompts.
* `Default Toolbar`: Assign a default toolbar to new snippets.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/settings/views_layouts_tab.png)

Aesthetics
----------

In the **Aesthetics** tab, customize the overall appearance of Pieces.

Switch between light or dark mode, select an accent color for UI highlights, and `Zoom In/Out` to adjust the interface scale.

These controls help you create a comfortable coding environment for extended sessions.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/settings/theme_tab.png)

Other Options & Settings Pages
------------------------------

Additional preferences live here, including In-App Notifications (to minimize distractions or stay fully informed), Release Notes (for the latest updates), and Power Tips (for efficiency boosts).

You can also manage Plugins, invite colleagues via Refer a Friend, and control how much crash or compliance data is shared under Telemetry & Diagnostics.

* `In-App Notifications`: Decide which alerts you receive.
* `Release Notes`: View the most recent updates.
* `Power Tips`: Learn shortcuts and advanced capabilities.
* `Plugins`: Extend Pieces with extra functionality.
* `Refer a Friend`: Invite others to use Pieces.
* `Telemetry & Diagnostics`: Configure data sharing preferences.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/settings/other_options_tab.png)

Updated on March 5, 2025, 9:13 PM UTC

---

[Navigation](/products/desktop-application/navigation)

[Captured Context](/products/desktop-application/navigation/captured-context)

---

# Pieces for Developers

# Pieces for Developers

---

Snippet Discovery
=================

The Snippet Discovery feature in Pieces for Developers helps you quickly find and add multiple code snippets from your files or folders.

---

Accessing Snippet Discovery
---------------------------

Open the **Power Menu** by clicking the home icon next to the search bar in the Pieces for Developers Desktop App, or press `⌘+return` (macOS) and `ctrl+enter` (Windows/Linux).

Select `Snippet Discovery` from the dropdown to begin.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/snippet_discovery/gifs/pieces_snippet_discovery.gif)

---

The **Snippet Discovery** page can only be accessed through the `Power Menu` at this time.

---

Features
--------

This feature lets you utilize Pieces to research and scan local code repositories for useful code snippets. Once found, they can be saved directly to your Pieces Drive.

### Drag & Drop Files or Folders

On the **Snippet Discovery** page, a large drag-and-drop area awaits your files or folders.

Simply drop your code files or an entire folder, and Pieces will begin scanning them for snippets.

### Discovering Snippets

After your files or folders are uploaded, Pieces scans them for potential code snippets.

You’ll see a *“We discovered X snippets”* screen, where `X` is the total number of snippets found.

Three actions appear at the top-right:

* `Start Over`: Resets the view, allowing you to drag in a new file or folder.
* `Select All`: Toggles all snippets to be selected or deselected at once.
* `Save All`: Saves every discovered snippet in a single action. Once you click it, a loading indicator shows progress (e.g., *Adding 18 of 26*).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/snippet_discovery/discovered_snippets.png)

### Selecting and Saving Snippets

Each snippet shows a `+` sign by default.

Click `Select All` to change every `+` to a `-`, which means all snippets are ready to be saved. If you only want certain snippets, click the `+` next to each one you want to include.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/snippet_discovery/gifs/discovery_select_snippets.gif)

When you’re ready, the button at the top-right displays a `Save All` message if all snippets are selected, or `Save # of Selected Snippets` if only some are chosen.

As each snippet saves successfully, you’ll see a small green check mark in its bottom-right corner.

### Partial Saves & Continuing

You don’t have to save every snippet immediately.

Feel free to save a subset of snippets (e.g., `Save X Snippets`), leave others for later, or select more as you go.

If you decide to start fresh with a different file or folder, click `Start Over` to discard the current session.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/snippet_discovery/check_mark_snippet.png)

Exiting Snippet Discovery
-------------------------

Click the `Back Arrow` in the top-left corner to leave the Snippet Discovery page.

A prompt appears to confirm whether you want to exit without saving additional snippets or return to finish saving them.

You can also click `esc` (macOS/Windows/Linux).

Updated on March 5, 2025, 9:13 PM UTC

---

[Updates & Upcoming](/products/desktop-application/navigation/updates-upcoming)

[Workflow Activity](/products/desktop-application/navigation/workflow-activity)

---

# Pieces for Developers

# Pieces for Developers

---

Updates & Upcoming
==================

The **Updates & Upcoming** page in Pieces for Developers provides a straightforward overview of recent releases and upcoming features.

You can check for new updates, preview future enhancements, and even share feedback or discuss features with the Pieces community—all in one place.

---

Accessing Updates & Upcoming
----------------------------

You can open this page through the **Power Menu** by clicking the home icon next to the search bar in the Pieces for Developers Desktop App, then selecting `Updates & Upcoming` from the dropdown.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/updates_and_upcoming/updates_upcoming_modal.png)

Alternatively, press `shift+w` (macOS/Windows/Linux) on your keyboard to jump there instantly.

Overview of the Updates & Upcoming Page
---------------------------------------

This page is divided into two main sections.

At the top, you’ll find **Upcoming Features**, which highlight planned features or enhancements scheduled for future releases (since September 1, 2023).

Below that, you’ll see **Previous Releases**, which outlines all new additions, fixes, and improvements that have already been rolled out.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/updates_and_upcoming/updates_upcoming_overview.png)

### Upcoming Features

The **Upcoming Features** section showcases everything on the horizon for Pieces, displaying each potential addition alongside a thumbs-up and thumbs-down button.

You can show your excitement or raise concerns for any feature, and a **Join the Discussion** button links directly to a GitHub discussion, where you can share ideas, provide suggestions, or raise any issues.

Updated on March 5, 2025, 9:13 PM UTC

---

[Captured Context](/products/desktop-application/navigation/captured-context)

[Snippet Discovery](/products/desktop-application/navigation/snippet-discovery)

---

# Pieces for Developers

# Pieces for Developers

---

Workflow Activity
=================

The **Workflow Activity** page in Pieces for Developers offers a chronological timeline of snippet events, showing when snippets are created, updated, deleted, or referenced.

---

The **Workflow Activity** view is currently live, but will soon be deprecated—stay tuned for more information, and don’t forget to check out the [Updates & Upcoming](http://google.com) view within the Pieces Desktop App.

---

Accessing Workflow Activity
---------------------------

You can open the **Workflow Activity** page in several ways.

One approach is through the **Power Menu**—click the **Home** icon next to the search bar in the Pieces Desktop App, then select `Go to Workflow Activity`.

You can also press `⌘+return` (macOS) or `ctrl+enter` (Windows/Linux) to open the Power Menu, and choose `Workflow Activity` from the dropdown.

If you prefer a direct keyboard shortcut, use `⌘+shift+a` (macOS) or `ctrl+shift+a` (Windows/Linux) to jump straight to the **Workflow Activity** page.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/workflow_activity/pieces_workflow_activity_overview.png)

Main View
---------

Once opened, you’ll see a timeline of chronological events as they relate to your **Pieces Drive** usage.

Each entry shows key details, such as the snippet name, the event type (created, updated, deleted, or referenced), and a timestamp.

A `Show: (All)` dropdown appears at the top, allowing you to filter using several *events:* `created`, `updated`, `deleted`, or `referenced`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/workflow_activity/pieces_workflow_activity_filter_dropdown.png)

A `Refresh` button in the corner lets you reload the page to fetch the latest events, and a `Back` button returns you to the previous view.

Searching for Events
--------------------

At the top of the page, a search bar labeled *Find an Event* enables you to quickly locate specific items in your timeline.

As you type a query, the list filters in real time, displaying only events that match your search.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/workflow_activity/workflow_activity_search_deleted.png)

Right-Side Panels
-----------------

To the right of the main activity list, you’ll find two panels—**Recent Searches** and **Top Materials.**

### Recent Searches

This panel shows your most recent event queries.

Hovering over a search term reveals options to `Search in Global Search`, `Copy Query`, or `Remove` the query from the list.

Clicking a recent search will also automatically initiate a global snippet search for that term.

### Top Materials

Here, Pieces displays your most frequently used or highest-ranked snippets, measured by *Productivity Points.*

Each snippet is accompanied by an icon and a productivity score (e.g., 113 points). Hovering over the productivity score icon reveals the exact number of points.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/workflow_activity/top_materials_info.png)

### Productivity Points

A small `i` icon near the **Top Materials** heading provides an explanation of how *Productivity Points* are calculated.

Pieces uses a *heuristics-based system* to determine how often and in what ways a snippet is used, with higher scores indicating saved code materials that may be particularly useful given the task at hand.

Opening Snippets
----------------

When you click on a snippet in **Top Materials** or in the main **Workflow Activity** list, Pieces immediately opens the Snippet View for that saved material.

Additionally, accessing any snippet triggers a new `Referenced` event in your timeline, confirming that you revisited or used that snippet.

Updated on March 5, 2025, 9:13 PM UTC

---

[Snippet Discovery](/products/desktop-application/navigation/snippet-discovery)

[Global Search](/products/desktop-application/navigation/global-search)

---

# Pieces for Developers

# Pieces for Developers

---

Navigating the Pieces Desktop
=============================

The Pieces for Developers Desktop Application offers a variety of views and layouts to enhance your workflow, with primary navigation occurring through the **Power Menu.**

---

Power Menu
----------

Navigation throughout the Pieces Desktop App is performed through the **Power Menu.**

To open the **Power Menu**, click the `Home Icon` to the left of the search bar, or you can use the `⌘+return` (macOS) or `ctrl+enter` (Windows/Linux).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/navigation_main/power_menu.png)

Interactive, labeled buttons in this menu let you jump to different views that correspond with different features and functionalities within the Pieces Desktop App.

There are 7 views available within the **Power Menu** at any given point.

If you want more information, click the titles of the views below to read more specific documentation on them:

* [Pieces Copilot](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot) **/** [Pieces Drive](https://beta.docs.pieces.app/products/desktop-application/managing-materials)**:** Depending on which view you’re currently in, one of these buttons will display—or both, if in another view.
* [Settings](https://beta.docs.pieces.app/products/desktop-application/navigation/settings)**:** The master settings window.
* [Captured Context](https://beta.docs.pieces.app/products/desktop-application/navigation/captured-context)**:** View websites, anchors, people, annotations, and tags captured by LTM.
* [Updates & Upcoming](https://beta.docs.pieces.app/products/desktop-application/navigation/updates-upcoming)**:** View release notes for upcoming features and past releases.
* [Snippet Discovery](https://beta.docs.pieces.app/products/desktop-application/navigation/snippet-discovery)**:** Let Pieces scan a local code repository for useful materials.
* [Workflow Activity](https://beta.docs.pieces.app/products/desktop-application/navigation/workflow-activity)**:** See top materials, recent searches, and a timeline history of added or adjusted materials within the Pieces Drive.
* [Global Search](https://beta.docs.pieces.app/products/desktop-application/navigation/global-search)**:** Search your Pieces Drive for specific saved materials.

### via Power Menu — Find Action

From within the Power Menu, there is a search bar titled *Find Action*.

From this menu, you can either click or scroll through some of the available options, like `Manage General Copilot Settings`, `New General Copilot Conversation`, or `Refresh Selected Chat`.

These actions, some of which are view-specific—like refreshing a selected Pieces Copilot Chat—are useful ways to navigate throughout the Pieces Desktop App while maintaining speed and efficiency in your workflow.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/navigation_main/gifs/find_actions_list_demo.gif)

Included at the very end of the scrollable **Find Actions** list are links to other Pieces for Developers plugins and extensions, as well as social outlets ([Pieces YouTube](https://www.youtube.com/@getpieces), [Pieces Discord](https://discord.com/invite/getpieces), etc.) and two additional links for [reporting issues](https://github.com/pieces-app/support/issues) or [contacting support.](https://getpieces.typeform.com/to/mCjBSIjF?typeform-source=beta.docs.pieces.app#page=docs-support)

### via Power Menu — Settings

The **Settings** view is the only page from which the **Power Menu** cannot be accessed.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/navigation_main/setting_page_screenshot.png)

This view contains several different buckets of configurable options, such as [Account & Cloud](https://beta.docs.pieces.app/products/desktop-application/configuration/account-and-cloud), [Pieces Copilot & Machine Learning](https://beta.docs.pieces.app/products/desktop-application/configuration/pieces-copilot-and-machine-learning), [Aesthetics & Layouts](https://beta.docs.pieces.app/products/desktop-application/configuration/theme), and [other settings](https://beta.docs.pieces.app/products/desktop-application/configuration/additional-settings).

Focus Mode
----------

**Focus Mode** allows you to concentrate on your current task by minimizing distractions.

You can toggle Focus Mode by clicking the `Focus Mode` button located in the upper left of the Pieces Copilot or Pieces Drive view, near the sidebar.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/navigation_main/gifs/enter_focus_mode_from_chat.gif)

When activated, it closes the sidebar, giving you an expanded view of your current Pieces Copilot conversation.

To exit **Focus Mode**, simply click the button again to restore the sidebar, or press `esc` (macOS/Windows/Linux).

Updated on March 5, 2025, 9:13 PM UTC

---

[Workstream Activity](/products/desktop-application/workstream-activity)

[Settings](/products/desktop-application/navigation/settings)

---

# Pieces for Developers

# Pieces for Developers

---

Adjusting Pieces Copilot
========================

Customization is key to getting the most out of any AI assistant. Read about switching between local and cloud-hosted models, adjusting the appearance of Pieces Copilot Chats, and more.

---

Managing the LLM Runtime
------------------------

There are dozens of local and cloud-hosted LLMs to choose from within the Pieces Desktop App—here’s how to do it.

### LLM Runtime Modal

At the bottom left of the Pieces Copilot view is the active model—by default you’ll see *GPT4o-Mini.*

Clicking this button opens the **Manage Copilot LLM Runtime** modal, where you can enter your own API key or [select local and cloud-hosted LLMs served through Pieces.](https://beta.docs.pieces.app/products/core-dependencies/ollama#using-local-vs-cloud-models)

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/configuring_pieces_copilot/open_llm_modal.png)

### Model Selection

Pieces Copilot allows you to choose between cloud-hosted models and on-device models.

Each option has its benefits:

* **Cloud LLMs:** Typically offer state-of-the-art performance and are ideal for complex queries requiring deep context.
* **On-Device LLMs:** Ensure data privacy and are optimal for offline or air-gapped environments.

You can read this documentation containing [all local and cloud-hosted LLMs served through the Pieces Desktop App.](https://beta.docs.pieces.app/products/core-dependencies/ollama/supported-models)

### Resetting Conversations

In case you need a fresh start or want to clear the current context, the interface includes options (accessible via the **Chat Options** menu) to reset the conversation.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/configuring_pieces_copilot/resetting_conversation.png)

This is particularly useful when you want to switch focus or change the conversation pipeline.

### Search Functionality

A search bar labeled *Find Cloud LLMs* lets you browse available cloud-based models—then, switching to *On-Device,* you can search through the list of local models available with the [optional Ollama client.](https://beta.docs.pieces.app/products/core-dependencies/ollama)

---

Ollama is required to use local LLMs with Pieces software.

If you don’t have it installed, that’s okay—you can download and install it through the Pieces Desktop App by clicking on the `Active Model` button.

---

To switch between the *Cloud* and *On-Device* model list, click the slider next to the search bar.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/configuring_pieces_copilot/gifs/opening_llm_modal_scroll.gif)

Once toggled, the search bar updates to *Find On-Device LLMs* and shows a message either prompting you to install Ollama or indicating that Ollama is installed and ready, along with its version number.

---

While Ollama is required for on-device generative AI, you do not need it to use the Long-Term Memory Engine.

This distinction ensures that you can benefit from local Long-Term Memory features even if you choose not to use on-device LLMs.

---

### Adjusting Chat Appearance

Within the same modal area, a `Settings Gear` icon gives you access to personalization options.

From here, you can choose a chat accent color to customize the look and feel of your Copilot interface, and enable or disable the option to enable LTM by default when starting a new chat.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/configuring_pieces_copilot/gifs/changing_chat_accent.gif)

When enabling Long-Term Memory Context by default, every new chat automatically incorporates your saved long-term memory context, ensuring that your conversations are always informed by your previous work.

You can also use the keyboard shortcut `cmd+shift+t` (macOS) or `ctrl+shift+t` (Windows/Linux) to toggle the *Dark/Bright* theme for the Pieces Desktop App.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/configuring_pieces_copilot/pfd_day_mode_demo.png)

Updated on March 5, 2025, 9:13 PM UTC

---

[Context & Project Integration](/products/desktop-application/pieces-copilot/context-and-project-integration)

[Pieces Copilot in Multiple Environments](/products/desktop-application/pieces-copilot/pieces-copilot-in-multiple-environments)

---

# Pieces for Developers

# Pieces for Developers

---

Integrating Context & Projects
==============================

Learn how to enrich your Pieces Copilot chats by integrating context—like folders, file, and other saved materials—from your previous tasks and current projects.

---

Enriching Chats with LTM-2 Context
----------------------------------

Integrating context ensures Pieces Copilot isn’t answering in a vacuum.

By including Long-Term Memory data and project-specific resources, you can improve the accuracy of generative AI responses, reduce context-switching, work more effectively.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/context_and_project_integration/enriching_chats_with_context_closeup.png)

### LTM Context Toggle

Below the *Set Context* section of the main Pieces Copilot view, you have the option to enable LTM Context.

When turned on, your long-term memory data—captured by PiecesOS from your previous workflow—is automatically injected into every new chat.

This means that even if you start a fresh conversation, Pieces Copilot has access to important context from earlier sessions.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/context_and_project_integration/gifs/enabling_context_in_new_chat.gif)

### Adding Folders

Click the `Folders` button in the *Set Context* area.

This opens the **Manage Copilot Context** modal, where you can add local code directories.

To do so, click `Add Folders` to open your Finder (macOS) or File Explorer (Windows/Linux).

Select the directories that you want the Pieces Copilot to use as context. This is especially useful when working on large projects where entire folders contain valuable code references.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/context_and_project_integration/gifs/adding_folder_as_directory_context.gif)

### Adding Files

Similarly, clicking the `Files` button opens the same modal so you can select individual files from anywhere on your device.

Click `Add Files` to select specific code files.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/context_and_project_integration/gifs/adding_several_files_as_context%20%20.gif)

These files are then parsed by Pieces Copilot to provide precise answers related to your code.

### Adding Websites

If you need to reference external code on a website—like on Stack Overflow—click the `Add Websites` option, which is accessible via the [Quick Action menu.](https://beta.docs.pieces.app/products/desktop-application/pieces-drive/enrichment-and-metadata#using-the-quick-menu)

This opens a modal where you can enter a website URL.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/context_and_project_integration/gifs/adding_websites_as_context_demo.gif)

Websites with code snippets or technical documentation can then be used as contextual material for your Pieces Copilot queries.

Enriching Chats with Saved Materials
------------------------------------

You can also add saved materials from the [Pieces Drive](https://beta.docs.pieces.app/products/desktop-application/pieces-drive) into your Pieces Copilot Chat as context for the conversation.

### Selecting Saved Materials

Clicking the `Saved Materials` button opens up an interface that displays a clickable list of code snippets and documents previously saved in Pieces Drive.

Choose the relevant saved material that you’d like to include in your current conversation.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/context_and_project_integration/gifs/selecting_saved_materials_add_as_context.gif)

This ensures that the Pieces Copilot is aware of your pre-curated, AI-enriched materials and can reference them in its responses.

Updated on March 5, 2025, 9:13 PM UTC

---

[Interacting with Pieces Copilot](/products/desktop-application/pieces-copilot/interacting-with-pieces-copilot)

[Configuring Pieces Copilot](/products/desktop-application/pieces-copilot/configuring-pieces-copilot)

---

# Pieces for Developers

# Pieces for Developers

---

Using Pieces Copilot
====================

Learn the basics of using the Pieces Copilot within the Pieces Desktop App, and discover how to navigate the view, find and start new conversations, add context, and utilize prebuilt chat pipelines.

---

Chat Interface & Navigation
---------------------------

When opening the Pieces Desktop App after installation, you are first presented with a default view—the Pieces Copilot.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/interacting_with_pieces_copilot/default_view_is_pieces_copilot.png)

This view is the central hub from which you can start new chats, access previous chats, and configure Long-Term Memory, models, and context to suit the task at hand.

Main Chat Window
----------------

The central area of the Copilot view is a blank chat where you can start a new conversation.

At the top of the window, you will see a set of three *Suggested Prompts*—these dynamic prompts adapt based on your topics common to your workflow (if captured by LTM) and serve as a quick way to begin engaging with the AI.

Directly above the chat input field, a *Set Context* area provides four buttons:

* `LTM Context: Off / On`**:** Toggle whether to automatically include long-term memory context from your workflow.
* `Folders`**:** Opens a modal to add local code directories.
* `Files`**:** Opens a modal to add individual files.
* `Saved Materials`**:** Lets you pick items previously saved in Pieces Drive.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/interacting_with_pieces_copilot/gifs/main_chat_window_demo.gif)

These buttons help you easily inject context into your chat so that the Copilot can deliver more accurate and relevant responses.

Input Field and Quick Actions
-----------------------------

Inside the Pieces Copilot Chat view, there are several quick actions you can utilize that let you proactively adjust chat context—like toggling the LTM state, adding folders or websites containing code, and more.

### Text Input Field

At the bottom of the chat window is a text input field with the placeholder:

```
Copy“Paste code, drag and drop an image, or ask a technical question…” 

```

This is your primary area for entering queries or pasting code, and is flanked by buttons on either side for adding context or using other in-chat tools:

* To the *left* of the input field is the Quick Action button, which contains a modal menu with quick access to several context-adding actions.
* To the *right,* you’ll find actions to insert code blocks into the chat or extract code from screenshots.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/interacting_with_pieces_copilot/gifs/left_right_side_chat_button_demo_all.gif)

### Left-Side Quick-Action Button

Just to the left of the input field is a **Chat Bubble** icon.

Clicking it opens a [context menu](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot/context-and-project-integration) with a list of quick actions:

1. `LTM Context`**:** Toggle the current state—*on* or *off.*
2. `Add Files`**,** `Add Folders`**,** `Add Snippets`**,** `Add Websites`**:** Each option opens the corresponding modal for adding context from local resources or the web.
3. `Add Messages`**:** (Currently grayed out—coming soon.)

[Read more about adding context to your Pieces Copilot Chats.](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot/context-and-project-integration#adding-folders)

### Right-Side Tools

Next to the text input field, you’ll find:

1. A `{ }` button that, when clicked, automatically inserts a code block template (using triple backticks) for pasting code.
2. A square button featuring an `“A”` icon that enables you to extract code from screenshots. When you click this button, your file explorer opens, allowing you to select an image that contains code.

Chat Options
------------

There are 2 kinds of chat options available within the Pieces Copilot Chat view—actions which let you pin, refresh or delete chats, and the `New Chat` button with optional **Chat Pipelines.**

### Chat Options Menu

At the top right corner of the active chat window, a vertical ellipsis (three stacked dots) reveals additional options:

1. `Pin Chat`**:** Keeps the current chat pinned at the top of your sidebar.
2. `Refresh`**:** Reloads the chat if the AI stops generating a response.
3. `Delete`**:** Removes the chat from your history.

---

These options are available inside of an existing chat with user input and AI generations—i.e., an *active* chat. You will not see these options when inside a blank chat template.

---

### New Chat & Pipelines

In the left sidebar, the `New Chat` button features a dropdown arrow.

When clicked, it presents you with 3 options:

---

| **Chat Pipeline** | **Type** | **Use Case** |
| --- | --- | --- |
| *Generally discuss technical topics* | Multipurpose | For discussing more multi-modal, general but technical topics. |
| --- | --- | --- |
| *Ask questions about a local code base* | Project-oriented comprehension and documentation | An optimized LLM pathway for keeping generations relevant to your code context. Useful for learning new codebases. |
| *Generate code for a local project* | Project-oriented code generation | Oriented for contextualized code generation—works best when local code repositories are added to the chat as context. |

---

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/interacting_with_pieces_copilot/chat_pipelines_dropdown.png)

---

You can select one of these chat pipelines as the default pipeline when creating new chats.

---

Sidebar & Chat History
----------------------

When the Pieces Copilot view is opened, you are presented with a *left-hand sidebar* that displays your past chat conversations arranged chronologically.

This allows you to quickly revisit previous interactions by clicking on a chat entry with its date stamp.

An icon at the top of the sidebar lets you collapse or expand this panel as needed—called **Focus Mode**—so you can focus solely on your current conversation if desired.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/interacting_with_pieces_copilot/gifs/sidebar_chat_history_focus_mode_demo.gif)

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Copilot](/products/desktop-application/pieces-copilot)

[Context & Project Integration](/products/desktop-application/pieces-copilot/context-and-project-integration)

---

# Pieces for Developers

# Pieces for Developers

---

Pieces Copilot in Other Environments
====================================

You can use the Pieces Copilot within various Pieces plugins and extensions made for some of the most popular IDEs and productivity tools.

---

Cross-Environment Access
------------------------

Pieces for Developers has launched several plugins and extensions for popular code editors and IDEs like Visual Studio Code, JetBrains, and productivity tools like Obsidian.

You can also access Pieces Drive and PiecesOS-enabled LTM context alongside Pieces Copilot in these plugins and extensions, giving you the full set of tools to use.

### Plugins & Extensions

Click the links below to view up-to-date or upcoming documentation for all Pieces for Developers products, including plugins and extensions.

---

| **Plugin** | **Extension** |
| --- | --- |
| [JetBrains](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains) | [Visual Studio](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio) |
| --- | --- |
| [Sublime Text](https://beta.docs.pieces.app/products/extensions-plugins/sublime) | [Visual Studio Code](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code) |
| [Azure Data Studio](https://beta.docs.pieces.app/products/extensions-plugins/azure-data-studio) | [Web Extension](https://beta.docs.pieces.app/products/extensions-plugins/web-extension) |
| [Neovim](https://beta.docs.pieces.app/products/extensions-plugins/neovim-plugin) | [JupyterLab](https://beta.docs.pieces.app/products/extensions-plugins/jupyterlab) |

---

Additionally, find documentation here for our other productivity & collaboration tools:

* [Pieces CLI](https://beta.docs.pieces.app/products/extensions-plugins/cli)
* [RayCast](https://beta.docs.pieces.app/products/raycast)
* [Obsidian](https://beta.docs.pieces.app/products/obsidian)

Integration with Other Applications
-----------------------------------

Pieces Copilot is integrated into several IDEs through dedicated plugins and extensions.

When you use Pieces Copilot within an IDE, you experience a similar chat interface with environments using the Pieces Applet view, complete with context-aware suggestions tailored to your current project.

The settings and configurations (such as LTM context and model preferences) remain consistent with the Desktop App, ensuring a seamless transition between environments.

### Shared Conversation Threads

The Copilot experience supports *cross-threading.*

This means that your chat history and contextual data can be shared between the Desktop App and other environments.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_in_multiple_environments/copilot_in_environment_demo_part_one.png)

Whether you start a conversation in the Desktop App and later continue it in an IDE, your context and settings persist—making for a fluid, uninterrupted workflow.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_in_multiple_environments/copilot_in_environment_demo_part_two.png)

The Pieces User Experience
--------------------------

Pieces Copilot is designed to maintain a consistent core experience—offering essential features like chat history, context management, and LLM configuration—across all environments.

### Flutter-Supported Environments

In platforms such as JetBrains, Visual Studio Code, and the Pieces Web Extension, Pieces leverages a dedicated Flutter-based *Applet* view which provides a standardized user experience for interacting with Pieces Copilot and the Pieces Drive.

---

*Pieces Web Extension*

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_in_multiple_environments/pieces_web_extension_copilot_applet.png)

---

### Custom UI Environments

For environments that do not support Flutter applets (e.g., Sublime Text or the CLI), Pieces Copilot adapts with a custom interface tailored to the specific platform.

Although the visual presentation differs, all core features remain available, so the learning curve is as minimal as possible while still providing Pieces functionalities.

---

*Pieces for Sublime Text Plugin*

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_in_multiple_environments/pieces_copilot_sublime_text.png)

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Configuring Pieces Copilot](/products/desktop-application/pieces-copilot/configuring-pieces-copilot)

[Pieces Drive](/products/desktop-application/pieces-drive)

---

# Pieces for Developers

# Pieces for Developers

---

Introduction to Pieces Copilot
==============================

**Pieces Copilot** is your primary interface for interacting with Pieces’ generative AI. It allows you to ask technical questions, generate code snippets, request debugging assistance, and receive insights—all within a familiar chat environment.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pfd_docs_figmas/pieces_copilot.png)

---

Overview
--------

Pieces Copilot enables you to interact with advanced generative AI (both cloud-hosted and on-device), engage in technical chats, generate and debug code, and access your workflow context effortlessly.

It’s designed for *developers, designers, knowledge workers,* and *enterprise teams* alike.

On this page, you’ll find a brief overview of the key capabilities of Pieces Copilot.

For more in-depth guidance, please explore our dedicated subpages:

* [Interacting with Pieces Copilot](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot/interacting-with-pieces-copilot): Learn how to start a conversation, leverage suggested prompts, and utilize quick-action tools.

* [Context & Project Integration](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot/context-and-project-integration): Discover how to enrich your chats by providing context from your local files, folders, saved materials, and websites.

* [Configuring Pieces Copilot](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot/configuring-pieces-copilot): Understand how to manage your LLM runtime, choose between cloud and on-device models, and customize settings to fit your workflow.

* [Pieces Copilot in Multiple Environments](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot/pieces-copilot-in-multiple-environments): Find out how the Copilot experience extends to different IDEs and external integrations.

Pieces Copilot | Main View
--------------------------

When you launch the Pieces for Developers Desktop App, you are greeted by the **Pieces Copilot View**—a dynamic, context-rich chat interface designed to help you interact with powerful generative AI, manage your project context, and streamline your coding workflow.

Inside the Pieces Copilot view, you can:

1. Interact with advanced [local and cloud-hosted LLMs](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot/interacting-with-pieces-copilot) for multi-purpose generative AI needs.
2. Leverage [Long-Term Memory (LTM-2) context captured by PiecesOS](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot/context-and-project-integration) to enhance AI responses.
3. Attach and manage folders, files, saved materials, and websites as [chat context.](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot/context-and-project-integration#adding-folders)
4. Search and [add saved code snippets as additional context](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot/context-and-project-integration#enriching-chats-with-saved-materials) to Pieces Copilot chats.

### Interacting with Pieces Copilot

We’ll walk you through the main Copilot Chat window and touch on all of the main elements you can interact with here.

You’ll learn how to interact with Pieces Copilot, utilize flexible *Suggested Prompts* when starting new chats, enable or disable Long-Term Memory context, add individual items to the chat, and discover other productivity-centric *Quick Actions.*

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_MAIN/gifs/nteracting_with_pieces_copilot_parent_page.gif)

### Context & Project Integration

One of Pieces Copilot’s key advantages is context awareness.

By integrating local folders, files, and your saved code snippets, you can significantly boost the relevance and accuracy of the Pieces Copilot’s AI responses.

In this section, we'll cover context and project management—adding items from Pieces Drive or your device as chat context, offering real-world examples to reduce context switching, and showing how to adjust the AI's understanding of your environment or workflow.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_MAIN/gifs/context_and_project_integration_parent_page_gif.gif)

### Configuring Pieces Copilot

Pieces Copilot offers flexibility in choosing the AI model (cloud-based or local) and customizing the chat appearance and default context usage.

Discover the array of 40+ cloud-hosted and local models, served through Ollama or other providers, learn how to adjust your runtime, customize the appearance of your Pieces Copilot Chat view, enable or disable LTM context for new chats, and more.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_MAIN/configuring_pieces_copilot_parent_page.png)

### Pieces Copilot in Multiple Environments

If you don't want the wide range of tools designed to boost your productivity and reduce context switching in your workflow with the Pieces Desktop App—that’s fine.

You can still find Pieces for Developers plugins & extensions available in your favorite collaboration tools, text editors, and most importantly, IDEs.

We’ll go over cross-platform consistency with context, history, and usage synchronization through PiecesOS, cross-threaded use case scenarios, link you to other Pieces software, and more.

---

*Pieces Copilot in JetBrains IDEs*

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_MAIN/pieces_copilot_in_multiple_environments_parent_page.png)

---

Get Started with Pieces
-----------------------

Click one of the links below to be redirected to your platform-specific (OS) download and installation *Quickstart* page:

* [macOS](https://beta.docs.pieces.app/products/meet-pieces/macos-quickstart)
* [Windows](https://beta.docs.pieces.app/products/meet-pieces/windows-quickstart)
* [Linux](https://beta.docs.pieces.app/products/meet-pieces/linux-quickstart)

Updated on March 5, 2025, 9:13 PM UTC

---

[Download & Install](/products/desktop-application/download-and-install)

[Interacting with Pieces Copilot](/products/desktop-application/pieces-copilot/interacting-with-pieces-copilot)

---

# Pieces for Developers

# Pieces for Developers

---

Material Enrichment & Saved Metadata
====================================

After adding your snippets, you’ll want to keep them organized. Pieces Drive streamlines this process by offering automatic enrichment and intuitive editing features.

---

Editing Your Materials
----------------------

There are several types of saved metadata and captured context to make use of, edit, repurpose, and delete—if you want.

Below are the primary methods for managing your materials once they’re in the Pieces Drive:

### Saved Materials List

Located on the left sidebar, the **Saved Materials List** displays each of your snippets with titles and notes:

* **Auto-Generated Titles**: Pieces instantly names each snippet based on its contents, so you can see a human-readable summary at a glance.
* **Annotations:** An automatically-generated description of the saved material’s purpose and function.

Click any item to load it in the main detail pane. This is where you’ll see the code or text, along with a wealth of automatically generated context (tags, annotations, etc.).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/enrichment_and_metadata/gifs/opening_from_saved_materials_list.gif)

### Renaming and Reclassifying

In the detail view, locate the three-dot **Quick Menu** to reveal actions for customizing your snippet:

* `Rename`: Override the auto-generated title with something that better fits your naming conventions.
* `Reclassify`: If Pieces incorrectly detects the code’s language or you’d prefer to classify it differently, you can manually select a new language (e.g., reclassifying JavaScript as TypeScript).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/enrichment_and_metadata/reclassifying_code_snippet.png)

### Managing Tags

Tags are a powerful organizational tool. Pieces automatically generates tags based on the snippet’s contents, but you can refine or add your own.

From the **Quick Menu** or in the **Captured Context** panel, click `Manage Tags` to type new tags or remove existing ones.

---

Group snippets by frameworks (“React,” “Express”), projects (“Client A,” “Side Project”), or problem domains (“API calls,” “Data Structures”).

---

### Annotations

Annotations act like descriptive notes or documentation entries attached to your snippet.

They’re especially useful if:

* **Multiple Developers Share the Same Snippet**: Add clarifications, usage examples, or important disclaimers.
* **You Want Version Notes**: Document changes or reasons you created a new snippet in the first place.

### Sensitive Information

If you import a saved material that contains API keys or credentials, Pieces may automatically assign them the **Sensitive Information** tag.

Pieces prevents accidental leakage by warning you when you generate a shareable link, so you’ve got a heads-up before you share the link with others.

If something isn’t automatically detected, you can still mark something as *sensitive* manually to add an extra layer of privacy for materials th

* **Warning Before Sharing**: Pieces prevents accidental leakage by warning you when you generate a shareable link.
* **Manual Entry**: You can also mark something as sensitive if it’s not automatically detected. This adds an extra layer of privacy for your team or organization.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/enrichment_and_metadata/gifs/manually_adding_sensitive_info_to_snippets.gif)

### Anchors & Related People

Pieces automatically connects the dots between origin location (in terms of files) and related people who may have contributed into the code, and saves it alongside each material.

* `Anchors`: If you want to track exactly where a snippet originated—like a specific file path, repository, or a web link—you can set Anchors in the snippet’s context panel.
* `Related People`: Attach team members or collaborators’ names/emails to a snippet, creating a record of who contributed to its creation or usage.

Using the Quick Menu
--------------------

From within the main detail view of a snippet, the **Quick Menu** (often represented by three vertical dots or an ellipsis icon) consolidates the most important snippet actions:

1. `Duplicate`: Quickly create a second version of the snippet, either exact or transformed.
2. `Related Links`: See or add relevant URLs (like documentation pages).
3. `Manage Annotations`: Add new notes or edit existing ones.
4. `Sensitive Information`: Review or add any recognized keys, tokens, or secrets.
5. `Delete`: Permanently remove the snippet if it’s no longer needed.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/enrichment_and_metadata/gifs/using_quick_menu_annotations_links_demo.gif)

---

The **Quick Menu** is essentially your control center for material maintenance.

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Searching & Filtering](/products/desktop-application/pieces-drive/searching-and-filtering)

[Transforming Code](/products/desktop-application/pieces-drive/transforming-code)

---

# Pieces for Developers

# Pieces for Developers

---

Saving & Organizing Materials
=============================

Learn about bringing new code snippets into Pieces Drive, keeping them tidy, and maintaining context and clarity as your library expands.

---

Overview
--------

Saving materials—code snippets, text notes, or entire files—is the foundation of Pieces Drive.

Once saved, these materials are automatically enriched with valuable metadata such as tags, annotations, and suggested links, helping you find and reuse them easily.

### Saved Materials List

All of your saved materials are listed on the left-hand side of the view.

From this list, you can scroll down to see previous saved materials, or click the `Clock` icon to sort them in a few different ways:

* `Recent`**:** Sorts the list of materials by which were most recently used.
* `Suggested`**:** Presents saved materials that are likely to benefit your current workflow, eg., if you’ve been working on API calls in Python, you may see API boilerplate code snippets.
* `Alphabetical`**:** Sorts the list by *titles* in alphabetically-descending order.
* `Language`**:** Groups saved materials by language—Python, JavaScript, Kotlin, etc.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/saving_and_organizing_materials/alphabetically_viewing_snippet_list.png)

### Adding New Materials

The primary way to add materials to Pieces Drive is through the `Add Materials` button, located in the bottom-left corner of the Pieces Drive view.

Clicking it opens a modal that presents several distinct options for different workflows and preferences.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/saving_and_organizing_materials/adding_new_materials.png)

### Paste Code from Clipboard

Paste code from your clipboard to save as a new material.

1

### Purpose

Quickly add snippets you’ve copied from somewhere else—an IDE, a website, or a note.

2

### How It Works

Select `Paste Code from Clipboard`, then paste or drag and drop your code snippet into the provided text field. Pieces will instantly parse it and create a new snippet in your drive.

### Use a Plugin

Find materials in your Pieces Drive that you saved in other Pieces-enabled plugins and extensions.

1

### Purpose

Seamlessly save snippets to Pieces Drive from within your favorite IDE or browser.

2

### How It Works

Install a Pieces for Developers extension or plugin (e.g., for Visual Studio Code, JetBrains IDEs, Chrome, etc.).

Whenever you highlight code and choose “Save to Pieces” (or similar), it syncs directly to your Pieces Drive.

Then, the snippet appears in your Saved Materials List with an auto-generated title and immediate enrichment.

### Snippet Discovery

Scan local code repositories for useful snippets that are relevant to your workflow.

1

### Purpose

Automate finding reusable code within a local folder or repository.

2

### How It Works

Select **Snippet Discovery** in the modal, then choose a folder or repository on your device.

Pieces scans these files for frequently repeated code patterns (snippets).

You can decide which discovered snippets to add to Pieces Drive.

### Import GitHub Gists

Import GitHub Gists as individual saved materials in your Pieces Drive.

1

### Purpose

Bring your Gists (public or private) into one centralized repository.

2

### How It Works

Log in with your GitHub account if prompted. Select `Import GitHub Gists` and pick the Gist(s) you want to import.

Each file in the selected Gist becomes a separate snippet in Pieces Drive.

### Create from Scratch

Create new saved materials from scratch.

1

### Purpose

Quickly craft a new snippet or note that doesn’t yet exist anywhere else.

2

### How It Works

Click `Create from Scratch`.

Then, type or paste the content you’d like to save—this can be code or plain text.

You can assign an initial title or let Pieces generate one automatically.

### Duplicate Current Material

Make a duplicate copy of a material to fork, revise, or modify.

1

### Purpose

Make an immediate copy of the snippet you have open, often used for branching or revisions.

2

### How It Works

Choose **Duplicate Current Material** in the modal.

Decide whether you want an exact copy, or a transformed version (e.g., more readable, more performant, different language, or boilerplate template).

The new snippet appears alongside the old one, preserving all context.

### Describe a Snippet to Generate

Use generative AI to generate new saved materials based on your exact requirements.

1

### Purpose

Use natural language to generate brand-new code.

2

### How It Works

Click `Describe a Snippet to Generate`.

Type a short or detailed description, e.g., “A basic Node.js HTTP server with URL parsing.”

Pieces produces the snippet automatically, complete with immediate enrichment and classification.

### Add Files

Import files from your device to use as a base for snippet discovery, or as context for future workflows.

1

### Purpose

Import entire local files into Pieces Drive for safekeeping and snippet discovery.

2

### How It Works:

Select `Add Files`.

Browse and pick one or multiple files.

Pieces scans their content, creating separate snippets if it detects multiple distinct code sections—or it may create a single snippet if the file is smaller.

---

Best Practices & Tips
---------------------

Find some additional information and quick tips for saving and organizing materials in the Pieces Drive below.

Name Snippets Wisely

Use Tags for Faster Search

Annotate for Clarity

Enable Snippet Discovery (Early)

Leverage Plugins

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Drive](/products/desktop-application/pieces-drive)

[Searching & Filtering](/products/desktop-application/pieces-drive/searching-and-filtering)

---

# Pieces for Developers

# Pieces for Developers

---

Searching & Filtering Materials
===============================

As your collection of saved snippets and code files grows, finding the right material at the right time becomes critical.

Pieces Drive addresses this need with a powerful search engine, user-friendly filters, and intuitive ways to narrow down results by content, language, and more.

---

Using the Search Bar
--------------------

At the very top of the Pieces Drive view is the **Search Bar**, labeled *Find Materials.*

This is your starting point for quick lookups.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/searching_and_filtering/gifs/using_search_bar_demo.gif)

### Natural Language Queries

Pieces supports more than simple keyword matching.

Type a phrase like *“How to parse JSON in Python,”* and it looks through titles, annotations, and snippet content for matches.

If you recall partial details about a snippet—*“route handler,”* for example—Pieces tries to interpret your intent and provide the best possible matches.

### Instant Results

After you type your query, results populate in the Saved Materials List on the left.

Each matching snippet’s auto-generated title and a quick preview appear—just click any snippet to open it in the main detail pane.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/searching_and_filtering/instant_results_demo.png)

---

Searching “local storage React” can bring up multiple snippets involving React’s local storage usage, even if the phrase “local storage” doesn’t appear verbatim in the snippet title.

---

Quick Filters
-------------

Right next to the search bar, you’ll see **Quick Filter** toggles in the dropdown that can help you narrow down your search quickly.

These are:

* `Titles`: Matches against snippet titles (auto-generated or custom).
* `Annotations`: Matches text that appears in the snippet’s annotations or descriptions.
* `Content`: Matches the literal code or text content of your snippet.

You can enable one, two, or all three filters at once.

---

| **Filter** | **Search Type** | **Result** |
| --- | --- | --- |
| *Title* | Matches against snippet titles (auto-generated or custom). | ✅ |
| --- | --- | --- |
| *Annotation* | Matches text that appears in the snippet’s annotations or descriptions. | ✅ |
| *Content* | Matches the literal code or text content of your snippet. | ✅ |
| *All Filters* | Pieces searches titles, annotations, and snippet code simultaneously—broadest results. | ✅ |

---

This level of granularity helps you quickly dial into the snippet you need without scrolling through dozens of partial matches.

Advanced Filtering
------------------

For deeper searching, Pieces Drive offers an **Add Search Filters** feature which has an icon, located to the left or right of the Quick Filters (depending on your interface layout).

These advanced filters let you refine your search using specific criteria and store them for later reuse.

### via Language, Tags, and Phrases

Pieces lets you filter using *language*, *tags* and specific *natural language phrases* so that you see only what you need to see—this is particularly useful if you have similar-sounding snippets across multiple languages.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/searching_and_filtering/all_filter_types_modal.png)

There are a few different use cases for searching with these methods:

* `Language`**:** Search your Pieces Drive for saved materials written in Python, C#, JavaScript, TypeScript, or other languages.
* `Tags`**:** If you only want backend-related Node.js snippets, you can add a *tag* filter for *“Node.js”* AND *“backend.”*
* `Phrase`**:** If you remember an exact line of code or an exact phrase, place it within quotes to perform a more strict search (e.g., "server.listen(port)").

Updated on March 5, 2025, 9:13 PM UTC

---

[Saving & Organizing Materials](/products/desktop-application/pieces-drive/saving-and-organizing-materials)

[Enrichment & Metadata](/products/desktop-application/pieces-drive/enrichment-and-metadata)

---

# Pieces for Developers

# Pieces for Developers

---

Sharing Saved Materials
=======================

You can generate and copy unique shareable links for saved materials in the Pieces Drive, letting you showcase your code and easily collaborate other developers on your team.

---

Sharing
-------

One of the most convenient ways to collaborate or showcase work is by sending a code snippet to your team, friends, or the broader developer community.

Pieces Drive makes this process dirt-simple using *shareable links*, which allow others to view your snippet and its related metadata in a consistent, Pieces-branded web interface—even if they don’t have Pieces installed.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/sharing/shared_snippet_demo_1.png)

These links preserve the snippet’s code, syntax highlighting, tags, annotations, and other contextual data—this way, recipients see not just lines of text, but the snippet’s *entire backstory and classification.*

Generating Shareable Links
--------------------------

There are two ways to generate shareable links for saved materials in your Pieces Drive.

### via Quick Menu

Start by opening the material you want in the main *Detail View* of Pieces Drive.

Find and click the **three-dot Quick Menu** (usually in the top-right corner of the snippet's section).

Then, choose `Generate Shareable Link` or `Shareable Link`—if it's your first time creating a link for that snippet, Pieces will make a new unique URL.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/sharing/gifs/sharing_via_quick_menu.gif)

---

If you’ve already generated a link for this material before, it exists in the cloud—so you can just copy the shareable link to your clipboard.

---

### via Keyboard Shortcut

You can toggle a different shareable link modal that provides you with the previously-generated link or generates a new one by using keyboard shortcuts—`cmd+L` (macOS) or `ctrl+L` (Windows/Linux).

If you want to see how the snippet appears, simply paste the link into a web browser.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/sharing/material_in_browser_demo_2.png)

You’ll find a code view, syntax highlighting, any relevant tags, annotations, and a snippet description—just like in Pieces Drive.

Security & Sensitive Data
-------------------------

Pieces Drive takes security seriously.

When you begin generating a shareable link, Pieces is designed to initiate and allow specific behaviors pertaining to privacy and security:

* **Automatic Detection of Secrets**: If the code snippet contains credentials or tokens that Pieces recognizes (API keys, client secrets, etc.), you’ll *receive a warning* before proceeding.
* **Sensitive Info Management**: You can explicitly mark or unmark certain strings as sensitive within the material’s context panel.
* **User Confirmation**: Pieces prompts you to confirm that you’re okay sharing the snippet as-is or suggests that you *remove or redact sensitive* *portions* first.

### Best Practices

Pieces may not catch everything, so you should *always be careful* of what code materials you generate links for, and *with whom you share them.*

1

### Review for Secrets

Even if Pieces doesn’t automatically flag something, it’s good practice to check for any private tokens, database credentials, or other sensitive data.

2

### Create ‘Safe’ Versions

If you need to show code logic without actual credentials, consider duplicating your snippet, removing the secrets, and then sharing that sanitized version.

3

### Boilerplate or Readability Transformation

If you just want to demonstrate a concept, consider using the [Transforming Code](https://beta.docs.pieces.app/products/desktop-application/pieces-drive/transforming-code) features to create a boilerplate or more readable version for sharing.

Managing Existing Links
-----------------------

Once a snippet has a shareable link, Pieces Drive helps you track and modify it.

Revisit the **Quick Menu** for the saved material, then look under the first section titled *Shareable Link* and click `Manage`.

This will give you access to the shareable link in an input field, the option to generate a GitHub Gist based on that code, and then 3 further options:

1. `Open in Browser`**:** Automatically opens the code snippet’s shareable link in your default browser.
2. `Refresh Link`**:** Refreshes the link if you’ve made changes to the saved material itself, so you can always share an up-to-date version.
3. `Revoke Link`**:** Similar to *deleting a material,* this button essentially ‘deletes’ the shared link, taking the saved material off of the cloud so that it cannot be accessed outside of your Pieces Drive.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/sharing/managing_existing_links_menu.png)

Use Cases & Workflows
---------------------

Check out the workflow use cases below for ideas or inspiration on how to share code using the Pieces system.

---

Team Collaboration

Open-Source Contributions

Code Reviews & Documentation

Demo or Client Presentations

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Transforming Code](/products/desktop-application/pieces-drive/transforming-code)

[Workstream Activity](/products/desktop-application/workstream-activity)

---

# Pieces for Developers

# Pieces for Developers

---

Transforming & Translating Code
===============================

You can use the **Code Transformation** feature when editing saved materials to intelligently optimize and translate code into other languages or to fit different use cases.

---

Use Cases
---------

As you expand your snippet library, you may find situations where a snippet needs to be adapted for a new project or platform.

Instead of rewriting the snippet from scratch, you can harness Pieces Drive’s transformation options.

These transformations let you quickly produce alternative versions, making your code more maintainable and shareable across different scenarios.

This is useful for:

* **Rapid Prototyping:** Spin up new, specialized versions of a snippet in seconds.
* **Code Reuse:** Save time by leveraging existing logic and adjusting it to new requirements (e.g., different language, more performant).
* **Collaboration:** Provide colleagues with multiple snippet variations—like a simpler ‘readable’ version and a separate ‘optimized’ version.

How To Transform Code
---------------------

There are two ways to access the code transformation feature within the Pieces Drive view.

### via Add Materials Button

By clicking the white `‘+’ icon` in the bottom left of the Pieces Drive view—also known as the *Add Materials* button—you can click `Duplicate Current`, which accesses the currently-viewed saved material and provides several different options for transformation.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/transforming_code/ss_duplicate_snippet_modal.png)

### via Quick Menu

You can also access the code transformation menu through the **Detailed View**, which is the modal containing all of the saved material’s enriched metadata—[which you can read more about here.](https://beta.docs.pieces.app/products/desktop-application/pieces-drive/enrichment-and-metadata)

To do so, open the **Quick Menu** by clicking the **three vertical dots** on the right side of the *Focused Snippet* view, and select `Duplicate` to trigger the same code transformation modal.

Transformation Types
--------------------

The first option is called **Non-Modified** and lets you create an exact duplicate of the in-focus saved material, in case you want to save a copy and make experimental edits and other changes without losing the original material.

There are four following options:

---

| **Type** | **Purpose** | **Use Case** |
| --- | --- | --- |
| *More Readable* | Create a more-readable copy that’s more understandable to others. | Useful for working with junior developers or sharing a snippet with non-developer stakeholders. |
| --- | --- | --- |
| *More Performant* | Create a more performance-optimized copy that utilizes less computational resources. | Perfect for code that needs to handle larger workloads or run more efficiently in production. |
| *Boilerplate Template* | Create a copy that can be used as a template for future workflows. | Great for starting new projects quickly using a proven pattern or code structure. |
| *Different Language* | Create a version using a different programming language. | Essential for integrating logic in another language or exploring a different tech stack without rewriting the entire snippet. |

---

Post-Transformation Management
------------------------------

Each transformation results in a brand-new material in your Pieces Drive.

This new saved material is immediately re-enriched as if it was a brand new material:

* **Auto-Generated Title:** Often describing the type of transformation applied—e.g., *Optimized Python Script For Parsing Data* or another such title.
* **Tags & Annotations:** If relevant, Pieces may retain or revise tags based on the snippet’s updated content.
* **Captured Context:** The snippet will record its transformation history, so you know it originated from another piece of code.

You can further refine the newly created material by [renaming it, adding or removing tags, editing annotations, and more.](https://beta.docs.pieces.app/products/desktop-application/pieces-drive/enrichment-and-metadata#renaming-and-reclassifying)

Updated on March 5, 2025, 9:13 PM UTC

---

[Enrichment & Metadata](/products/desktop-application/pieces-drive/enrichment-and-metadata)

[Sharing](/products/desktop-application/pieces-drive/sharing)

---

# Pieces for Developers

# Pieces for Developers

---

Introduction to Pieces Drive
============================

**Pieces Drive** is a central feature of the Pieces for Developers Desktop App—your all-in-one workspace for saving, managing, and quickly accessing code snippets and other development materials.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pfd_docs_figmas/pieces_drive.png)

---

Overview
--------

Pieces Drive gives you the tools to collect and access your most valuable development assets—code snippets, notes, and more—all in one integrated interface.

You can quickly add items, enrich them with tags and annotations, search using natural language or filters, transform snippets into different languages, and share links with others.

Below are quick overviews of Pieces Drive's features. For detailed information on a specific function, click the links for documentation and walkthroughs:

* [Saving & Organizing](https://beta.docs.pieces.app/products/desktop-application/pieces-drive/saving-and-organizing-materials): Learn how to add new materials, import existing code from local files or GitHub Gists, and keep your snippets neatly structured.

* [Searching & Filtering](https://beta.docs.pieces.app/products/desktop-application/pieces-drive/searching-and-filtering): Discover how to leverage natural language queries, filters, and tags to quickly locate specific materials in Pieces Drive.
* [Enrichment & Metadata](https://beta.docs.pieces.app/products/desktop-application/pieces-drive/enrichment-and-metadata): Understand how Pieces automatically generates tags, annotations, suggested links, and captures context for each snippet, as well has how to access and update associated metadata.
* [Transforming Code](https://beta.docs.pieces.app/products/desktop-application/pieces-drive/transforming-code): See how you can duplicate code snippets to create more readable, more performant, or entirely different-language versions.
* [Sharing:](https://beta.docs.pieces.app/products/desktop-application/pieces-drive/sharing) Find out how to generate shareable links to your snippets, including managing sensitive information before sending links to colleagues.

Pieces Drive | Main View
------------------------

To access the Pieces Drive view, first click the *home* icon in the top-left corner to open the [Power Menu.](https://beta.docs.pieces.app/products/desktop-application/power-menu-actions/power-menu)

Then, select `Pieces Drive` from the list of available views.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/gifs/opening_pieces_drive_overview.gif)

Inside the Pieces Drive view, you can:

1. Scroll through list of saved materials, or search using Natural Language Processing (NLP) to find the materials you need.
2. Save new materials or create materials from scratch using a range of mediums.
3. View captured context alongside individual snippets and edit the metadata generated alongside them.
4. Discover related snippets, duplicate and transform snippets, or start [Pieces Copilot Chats with them.](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot/context-and-project-integration#enriching-chats-with-ltm-2-context)

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/pieces_drive_main_view.png)

By incorporating Pieces Drive into your workflow, you can stay both efficient and organization whether you’re working in a solo capacity or as part of a larger team.

### Saving & Organizing

We’ll walk you through the main Pieces Drive saving workflow and touch on all the essential elements you can interact with here.

You’ll learn how to add materials in various ways—pasting code from your clipboard, using an IDE plugin, importing GitHub Gists, or even discovering snippets in a local folder.

Or, you can create from scratch when you need a quick note or brand-new snippet and organize your growing library with tags, annotations, and reclassification.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/gifs/saving_and_organizing_snippet_creation_demo.gif)

### Searching & Filtering

One of Pieces Drive’s major advantages is its robust search capabilities.

By typing natural language queries or toggling filters for titles, annotations, or full snippet content, you can zero in on exactly what you need—even if you have hundreds of stored snippets.

In this section, we’ll cover how to use natural language to find snippets by function or topic, use filters to narrow down results by language, tags or custom phrases, and save specific search filters for repeated use.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/gifs/searching_filtering_pieces_drive_parent_page.gif)

### Enrichment & Metadata

Pieces Drive automatically enriches every snippet with valuable context, making it more than just a code vault.

This includes auto-generated titles, suggested queries, related websites, and tags that help you quickly see what a snippet does and how it might be used.

You’ll learn how to access *Captured Context* for individual saved materials, how to manage sensitive information, view and edit automatically generated annotations and tags, and more.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/enrichment_metadata_pieces_drive_parent_page.png)

### Transforming Code

Ever need a quick performance boost, a language switch, or a stripped-down boilerplate version of a saved code snippet?

Pieces Drive’s transformation options let you duplicate snippets in a few clicks to generate more readable or performance enhanced versions, snippets in different languages, and more.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/ransforming_code_pieces_drive_parent.png)

### Sharing

Collaboration often requires easily accessible code references.

Pieces Drive allows you to create secure, shareable links for your snippets—complete with the same metadata and context found in your desktop app.

Learn how to generate shareable links with best practices in mind for handling sensitive data, and both internal and external use cases for sharing code.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/sharing_pieces_drive_parent_page.png)

### Integrating Pieces Drive & Pieces Copilot

When you want AI-assisted code explanations, troubleshooting, or generation, Pieces Copilot can reference the snippets you have saved in Pieces Drive.

By adding a snippet as context in a Copilot chat, the AI can read its entire content and produce more relevant, targeted answers.

We’ll show you how to attach snippets directly from Pieces Drive into a Pieces Copilot Chat, how to navigate back and forth between different views and help you understand how snippet metadata informs AI responses.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/gifs/integrating_drive_copilot_parent_page.gif)

---

Get Started with Pieces
-----------------------

Click one of the links below to be redirected to your platform-specific (OS) download and installation Quickstart page:

* [macOS](https://beta.docs.pieces.app/products/meet-pieces/macos-quickstart)
* [Windows](https://beta.docs.pieces.app/products/meet-pieces/windows-quickstart)
* [Linux](https://beta.docs.pieces.app/products/meet-pieces/linux-quickstart)

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Copilot in Multiple Environments](/products/desktop-application/pieces-copilot/pieces-copilot-in-multiple-environments)

[Saving & Organizing Materials](/products/desktop-application/pieces-drive/saving-and-organizing-materials)

---

# Pieces for Developers

# Pieces for Developers

---

Keyboard Shortcuts
==================

Keyboard shortcuts enable you to access parts of Pieces for Developers without having to use the **Power Menu** or the settings page.

---

Overview
--------

You can browse the list of keyboard shortcuts below as a reference guide, or you can open the **Keyboard Shortcuts** modal by navigating to **Settings,** and scrolling to **Support** or use `⌘+;` (macOS) or `ctrl+;` (Windows/Linux).

### Use a Piece

These shortcuts let you quickly interact with a saved material in your workspace, making it easy to download, duplicate, or copy it with context.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Download a Piece* | `shift+ctrl+d` | `shift+⌘+d` |
| --- | --- | --- |
| *Duplicate a Piece* | `ctrl+d` | `⌘+d` |
| *Copy with Context* | `ctrl+alt+c` | `⌘+option+c` |

---

### Add a Piece

Use these shortcuts to seamlessly add new materials into Pieces—whether you're importing files, creating new snippets, or adding collections.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Add Code file to Pieces* | `ctrl+v` | `⌘+v` |
| --- | --- | --- |
| *Add Collections to Pieces* | `ctrl+shift+c` | `⌘+shift+c` |
| *Add Code Snippet to Pieces from IDE* | `ctrl+c` *(in IDE),* `ctrl+v` | `⌘+c,⌘+v` |
| *Create New Material from Scratch* | `ctrl+n` | `⌘+n` |

---

### Manage a Saved Material

These keyboard shortcuts help you organize your content by renaming, editing, reclassifying, or even deleting a piece as needed.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Rename* | `ctrl+r` | `⌘+r` |
| --- | --- | --- |
| *Open quick menu* | `ctrl+o` | `⌘+o` |
| *Reclassify* | `ctrl+y` | `⌘+y` |
| *Delete* | `del` | `del` |
| *Edit piece description* | `shift+ctrl+n/shift+ctrl+p` | `shift+⌘+n/shift+⌘+p` |
| *Add related links* | `ctrl+k (if shown)` | `⌘+k (if shown)` |
| *Add tags* | `ctrl+t (if shown)` | `⌘+t (if shown)` |
| *Toggle information view* | `ctrl+i (if shown)` | `⌘+i (if shown)` |
| *Highlight sensitive information* | `ctrl+! (if shown)` | `⌘+! (if shown)` |
| *Open action menu* | `ctrl+enter` | `⌘+enter` |

---

### Editing a Piece

Quickly focus on the editor, save your changes, or exit editing mode with these shortcuts, so you stay in control of your work.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Edit Mode* | `ctrl+e` | `⌘+e` |
| --- | --- | --- |
| *Escape Editing* | `esc` | `esc` |
| *Save Edits* | `ctrl+s` | `⌘+s` |

---

### Share with People / Support

Access options for generating shareable links or reaching out for support directly within the app using these commands.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Generate Shareable Link* | `ctrl+l` | `⌘+l` |
| --- | --- | --- |
| *Submit Feedback/Issues* | `shift+?` | `shift+?` |

---

### Navigating Pieces

These shortcuts make it simple to jump between different views and features, keeping your workflow smooth and efficient.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Focus search* | `ctrl+f or /` | `⌘+f or /` |
| --- | --- | --- |
| *Workflow activity view* | `shift+ctrl+a` | `shift+⌘+a` |
| *Jump to first/last piece* | `ctrl+→/ctrl+←` | `⌘+→/⌘+←` |
| *Toggle between image and code view* | `t` | `t` |
| *View next or previous piece* | `→ or ←` | `→ or ←` |

---

### Zoom & Updates

Adjust the UI scale and check for updates quickly with these handy shortcuts, ensuring a comfortable and current user experience.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Zoom in* | `ctrl++` | `⌘++` |
| --- | --- | --- |
| *Zoom out* | `ctrl+-` | `⌘+-` |
| *Check for desktop app updates* | `shift+u` | `shift+⌘+u` |
| *Release notes* | `shift+w` | `shift+⌘+w` |
| *View keyboard shortcuts* | `ctrl+;` | `⌘+;` |

---

### Configuring Pieces

Use these shortcuts to open settings and toggle themes, allowing you to personalize your Pieces environment with ease.

---

| **Command** | **Windows/Linux** | **macOS** |
| --- | --- | --- |
| *Open Settings* | `ctrl+,` | `⌘+,` |
| --- | --- | --- |
| *Change Theme* | `ctrl+t` | `⌘+t` |

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Power Menu](/products/desktop-application/actions-keyboard-shortcuts/power-menu)

[Troubleshooting](/products/desktop-application/troubleshooting)

---

# Pieces for Developers

# Pieces for Developers

Power Menu Actions
==================

Pieces for Developers is designed to keep you in the flow. Below is a comprehensive list of actions available within the [Power Menu](https://beta.docs.pieces.app/products/desktop-application/navigation#power-menu) and their associated shortcuts to help you quickly access common tasks.

---

Dynamic View-Based Actions
--------------------------

The **Power Menu** in Pieces for Developers is a dynamic command palette.

When you press the Power Menu hotkey or open it from the app interface, you’ll see different actions *depending on which view or section of the app you’re currently in*.

For example:

* **Pieces Drive View:** You’ll see commands related to creating, editing, or managing snippets (e.g., “Create New Material,” “Optimize Snippet,” etc.).
* **Pieces Copilot View:** You’ll see commands focused on AI-driven interactions (e.g., “Ask Copilot,” “Analyze this Snippet,” etc.).
* **Application & Cloud / Global Context:** Some commands (e.g., “Check for Updates,” “Manage Accounts & Cloud Integrations,” “Go to Settings”) appear in multiple views or from a global context.

---

If you search for a command in the Power Menu and you’re *not* in the view where that command is valid, **it will not appear** in your search results.

---

### Pieces Copilot

You can find lots of saved material and generative AI-focused actions when accessing the Power Menu from the Pieces Copilot view.

---

| **Command** | **Description** |
| --- | --- |
| *Manage General Copilot Settings* | Takes you to the Pieces Copilot settings page. |
| --- | --- |
| *Manage Copilot LLM Runtime Configuration* | Opens a modal for changing cloud and local LLMs. |
| *Enter Focused Copilot* | Collapses the sidebar and enters Focus Mode. |
| *Launch Copilot in Browser* | Launches an instance of the Pieces Desktop App UI in your browser. |
| *New Copilot Conversation with LTM Context* | Starts a new Pieces Copilot Chat with LTM enabled. |
| *New General Copilot Conversation* | Starts a new Pieces Copilot Chat without additional prompting pipelines. |
| *New Contextual Copilot Conversation* | Starts a new Pieces Copilot Chat with context. |
| *New Copilot Conversation* | Starts a new Pieces Copilot Chat that defaults to the set LTM behavior. |
| *New Generative Copilot Conversation* | Starts a new Pieces Copilot Chat with a code-generating prompt pipeline preset. |
| *Delete All Copilot Chats* | Deletes all Pieces Copilot chats. |

---

### Pieces Drive

These actions cover everything from creating and editing your code materials to duplicating and optimizing them, ensuring your content is always well-managed.

---

| **Command** | **Description** |
| --- | --- |
| *Create New Material* | Initiate the creation of a new material (snippet or resource). |
| --- | --- |
| *Create New Material from Scratch* | Build a fresh material without importing existing files. |
| *Create New Material from File(s)* | Generate a material by importing local files. |
| *Create New Material from Description* | Produce a material based on user-provided descriptive text. |
| *View in Gallery* | Open the selected material in a gallery-style view. |
| *Edit Selected Material* | Modify the currently highlighted material. |
| *Open Quick Menu* | Launch a quick-access menu for the selected material. |
| *Templatize Selected Material* | Convert the chosen material into a reusable template. |
| *Optimize Selected Material for Readability* | Improve clarity and structure of the material. |
| *Optimize Selected Material for Speed* | Enhance the performance-focused aspects of the material. |
| *Convert Selected Material to New Language* | Translate or adapt the material into another programming language. |
| *Copy Selected Material* | Duplicate the material content to the clipboard. |
| *Generate Shareable Link* | Create a link that can be shared externally. |
| *Manage Annotations for Selected Material* | Add or edit annotations for context and clarity. |
| *Manage Related Websites for Selected Material* | Associate relevant URLs or references. |
| *Manage Tags for Selected Material* | Assign or remove tags to categorize the material. |
| *Manage Sensitives for Selected Material* | Mark or handle sensitive data within the material. |
| *Manage Anchors for Selected Material* | Attach anchor points for reference or navigation. |
| *Manage Related People for Selected Material* | Link collaborators or owners to the material. |
| *Discover Related Materials* | Find other materials that share context or tags. |
| *Duplicate Selected Material* | Create a direct copy of the current material. |
| *Start Copilot Chat about Selected Material* | Launch an AI-powered conversation focused on this material. |
| *Rename Selected Material* | Change the title or identifier of the material. |
| *Delete Selected Material* | Remove the chosen material from your collection. |
| *View Selected Material Context* | Display contextual information or references. |
| *Copy Context for Selected Material* | Copy contextual details (metadata, tags, etc.) to the clipboard. |

---

### Application & Cloud

Manage your account, cloud integrations, backups, and updates with these commands to keep the app running smoothly and securely.

---

| **Command** | **Description** |
| --- | --- |
| *Backup & Restore Data* | Manage or recover saved backups of your Pieces data. |
| --- | --- |
| *Toggle Light Mode* | Switch the user interface between light and dark themes. |
| *Manage Accounts & Cloud Integrations* | Connect or configure your Pieces Cloud and linked accounts. |
| *Manage Early Access Program* | Enroll in or manage beta features of Pieces for Developers. |
| *Check for Desktop App Updates* | Manually verify if a new version of the Pieces desktop app is available. |
| *Check for Pieces OS Updates* | Inspect whether Pieces OS has an update ready. |
| *Manage In-App Notifications* | Configure or silence various in-app alerts and messages. |
| *Manage Pieces Drive Action Toolbar* | Customize toolbar actions for Pieces Drive integrations. |
| *Turn Long-Term Memory Engine Off* | Disable the memory engine that stores historical snippet context. |
| *Pause Long-Term Memory Engine* | Temporarily stop the memory engine from updating. |
| *View Auto-Saved Materials* | Access automatically saved drafts or snippets. |
| *View All Plugins* | See a complete list of available plugins for Pieces. |
| *Clear Long-Term Memory Engine Data* | Erase stored context or historical data from the memory engine. |

---

### Navigation

These commands help you traverse the Pieces interface, letting you access different panels, search features, and integrations with ease.

---

| **Command** | **Description** |
| --- | --- |
| *Go to Workflow Activity* | Open the workflow overview to see recent tasks or snippet changes. |
| --- | --- |
| *Go to Updates & Upcoming* | Check upcoming features, announcements, or patch notes. |
| *Go to Global Search* | Access the global search interface for snippets and materials. |
| *Go to Settings* | Open the main settings panel for Pieces for Developers. |
| *Go to Snippet Discovery* | Explore recommended or newly discovered snippets. |
| *Go Back* | Return to the previous screen or menu. |
| *Go to Pieces Copilot* | Launch or navigate to the AI-assisted Copilot interface. |
| *Go to Captured Context* | View context automatically captured during snippet creation or usage. |
| *Go Home* | Navigate to the main dashboard or home screen. |
| *Go to VS Code Plugin* | Redirect to the Visual Studio Code integration. |
| *Go to Visual Studio Plugin* | Redirect to the Visual Studio integration. |
| *Go to JetBrains Plugin* | Open the JetBrains family of IDE plugins. |
| *Go to Chromium Extension* | Jump to the Google Chrome browser extension. |
| *Go to Microsoft Edge Extension* | Access the Edge browser extension for Pieces. |
| *Go to Brave Extension* | Navigate to the Brave browser extension. |
| *Go to Opera Extension* | Navigate to the Opera browser extension. |
| *Go to Firefox Extension* | Navigate to the Firefox browser extension. |
| *Go to Obsidian Plugin* | Explore the Obsidian plugin for Pieces integration. |
| *Go to JupyterLab Plugin* | Access the JupyterLab plugin for code snippets. |
| *Go to Microsoft Teams Add-On* | Jump to the Teams add-on for sharing snippets. |
| *Go to Pieces Open Source* | Browse the open-source repos related to Pieces. |
| *Go to Pieces Discord* | Join the Pieces Discord community for support or discussion. |
| *Go to Documentation* | Open the official Pieces documentation. |
| *Go to Support* | Access the Pieces support resources. |
| *Go to Feedback* | Navigate to feedback channels for product improvements. |
| *Report Issue or Bug* | Submit a bug report for the Pieces team to address. |
| *Share Feature Idea or Request* | Propose a new feature or enhancement. |

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Actions & Keyboard Shortcuts](/products/desktop-application/actions-keyboard-shortcuts)

[Keyboard Shortcuts](/products/desktop-application/actions-keyboard-shortcuts/keyboard-shortcuts)

---

# Pieces for Developers

# Pieces for Developers

---

Cross-Platform Issues
=====================

Learn the troubleshooting steps to take if the **Pieces Desktop App** isn't working as expected, no matter your operating system.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/cross_platform/troubleshooting_multiOS.png)

---

Versions & Updates
------------------

Many issues can stem from having an out-of-date Pieces Desktop App.

### Updating Pieces Desktop

The Pieces Desktop App will update automatically.

For standalone & alternative installations, updates are checked daily or when you open the application. You'll be prompted to install or delay the update if one is available.

See your platform-specific update instructions on updating the Pieces for Developers Desktop App:

* [macOS](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/macos#updating-the-pieces-desktop-app)
* [Windows](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/windows#updating-pieces-desktop-app)
* [Linux](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/linux#updating-pieces-desktop)

Connection Issues with Pieces Desktop
-------------------------------------

You may occasionally encounter connection issues between PiecesOS and Pieces Desktop App, resulting in difficulty finding saved materials, issues generating shareable links, and hanging responses from the Pieces Copilot.

The quickest way to resolve this basic connection issue is to restart PiecesOS and the Pieces Desktop App, then check for updates.

### Restarting Pieces Suite & Checking Updates

To restart and check for updates for PiecesOS and Pieces Desktop:

1

### Make Sure PiecesOS is Running

Ensure PiecesOS is running (look for the Pieces Icon in your system tray or menu bar)

2

### Exit PiecesOS

Click on the PiecesOS icon and press the `power off` button or the `exit` button in the top right.

3

### Close Pieces for Developers

Make sure the Pieces Desktop App is closed by clicking the `x` button on the top right or by closing it through task manager.

4

### Open Pieces Desktop

After opening Pieces Desktop App, PiecesOS will open automatically

* If there are updates, you will be prompted to update both PiecesOS and Pieces for Developers.

Common Installation Issues
--------------------------

Common issues can occur when setting up the Pieces Desktop App for the first time.

Platform-specific solutions are detailed on their respective OS pages:

* [macOS](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/macos#common-installation-issues)
* [Windows](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/windows#common-installation-issues)
* [Linux](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/linux#common-installation-issues)

Checking Hardware
-----------------

It may be necessary to verify your system’s specifications if you experience ongoing issues.

See the OS-specific pages for instructions on how to check CPU, RAM, and GPU details:

* [macOS](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/macos#checking-os-version)
* [Windows](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/windows#checking-hardware-specifications)
* [Linux](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/linux#checking-system-information)

Updated on March 5, 2025, 9:13 PM UTC

---

[Troubleshooting](/products/desktop-application/troubleshooting)

[macOS](/products/desktop-application/troubleshooting/macos)

---

# Pieces for Developers

# Pieces for Developers

---

**Issues | Linux**
==================

Find out what troubleshooting steps to take if the Pieces Desktop App isn't working properly on your Linux device.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/troubleshooting_linux.png)

---

Versions & Updates
------------------

Many issues can stem from running outdated versions of Pieces Desktop App on Linux.

Updating Pieces Desktop
-----------------------

On Linux, the Pieces Desktop App is distributed via snaps (for Ubuntu-based systems).

To updated the Pieces Desktop App on Linux:

1

### Check the Current Version

Running `snap info pieces-for-developers` to check the current version

2

### Check for Updates

Running `sudo snap refresh` to apply any available updates

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/snap_refresh_PFD.gif)

Common Installation Issues
--------------------------

Official support is for **Ubuntu 22+ and Ubuntu-based distributions.** Other distributions might work but *aren’t guaranteed.*

Checking Distribution Compatibility
-----------------------------------

Ensure you’re running a supported **Ubuntu-based distribution.**

If not, consider switching to a supported environment, as installation on non-Ubuntu distributions isn’t guaranteed.

### Updating Snapd

Snap-based installations require an up-to-date snap `daemon`:

* Run `sudo snap refresh` to ensure `snapd` and its packages are current

### Adjusting Graphics & Display Settings

If installation or UI issues persist, consider the following:

* **Switch Between x11 and Wayland:** Some applications may work better on one display protocol than the other. Try switching to x11 for compatibility or Wayland for newer features. You can usually select this at the login screen.
* **Update GPU Drivers:** Ensure your GPU drivers are up to date. For NVIDIA, check for proprietary driver updates. AMD and Intel users should verify that open-source drivers are current.
* **Optimize Graphics Configurations:** Use tools like `nvidia-settings`, `radeon-profile`, or similar utilities to adjust your GPU settings for better performance and stability.

These adjustments can resolve many graphical and display-related issues that you may experience while you use Pieces for Developers.

Checking System Information
---------------------------

Verify your system's hardware configuration and ensure it meets the recommended specifications by running specific commands in your terminal.

### Checking CPU Information

To determine your CPU type and find other important information, type `lscpu` in your terminal and press `Enter`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/lscpu_UBUNTU.png)

### Checking GPU Information

To determine your GPU type and find other important information, `lspci | grep -i vga` in your terminal and press `Enter`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/lscpi_UBUNTU.png)

Confirm that your CPU, GPU, and memory resources are sufficient for running PiecesOS and local AI models (if applicable).

### Checking Ubuntu Version

If the Pieces Installer is not working as intended, you could have an outdated version of Ubuntu. The minimum Ubuntu version that Pieces will run on is **Ubuntu 18**.

To check what version of Ubuntu you’re running:

1

### Open Settings

Open the **Settings** on Ubuntu by clicking the *options bar* in the top right

2

### Find the System Section

Locate the **System** section at the bottom of the left-hand side menu and click it

3

### Open the About Section

Open the **About** section and locate the **Operating System** label

This section will will display your Ubuntu version information.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/settings_about_system.gif)

### Consulting Online Resources

If you encounter persistent installation issues, consult online forums or community guides related to snap and Ubuntu-specific troubleshooting steps.

Restart & Retry
---------------

If you've updated components, checked hardware, and adjusted configurations without success, restart your machine and try again.

If the problem persists, please open a [**GitHub issue**](https://github.com/pieces-app/support/issues) for further assistance, or book a call with our engineers.

Updated on March 5, 2025, 9:13 PM UTC

---

[Windows](/products/desktop-application/troubleshooting/windows)

[Core Dependencies](/products/core-dependencies)

---

# Pieces for Developers

# Pieces for Developers

---

Issues | macOS
==============

Learn about what troubleshooting steps to take if the Pieces Desktop App isn’t working as expected on your macOS device.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/troubleshooting_macos.png)

---

Alternative Installation Methods
--------------------------------

If you’re experiencing difficulties with installing the Pieces Desktop App, you can install the software manually by downloading the standalone `.dmg` installation files or by using terminal commands.

---

If you’re not sure which `.dmg` you need based on your device’s CPU, [click here.](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/macos#checking-cpu-type)

---

[![Pieces Desktop App — ARM .DMG](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740693233214%2F29654e9b-14b6-44e5-a9e1-cdadb65ddb47.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Pieces Desktop App — ARM .DMG

*macOS 12.0 (Monterey) or higher*](https://builds.pieces.app/stages/production/os_server/dmg/download?download=true&product=DOCUMENTATION_WEBSITE)[![Pieces Desktop App — Intel .DMG](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740693234272%2F7a5de5db-9b57-4cd9-9300-14544075e954.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Pieces Desktop App — Intel .DMG

*macOS 12.0 (Monterey) or higher*](https://builds.pieces.app/stages/production/pieces_for_x/dmg/download?download=true&product=DOCUMENTATION_WEBSITE)

![Installing via Homebrew](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740695766570%2Fdc1efa5e-6e16-47f6-a417-94e1356e2d88.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Installing via Homebrew

You can also install PiecesOS manually using Homebrew from your device’s terminal.

To do so:

1. Ensure Homebrew is installed on your system.
2. Run `brew install --cask pieces-os` in your terminal to install the Pieces Homebrew package.

---

Versions & Updates
------------------

Many issues can stem from out-of-date plugins, extensions, PiecesOS, or the desktop app itself.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_checking_piecesos_for_updates.gif)

### Updating the Pieces Desktop App

Update the Pieces Desktop App on macOS by clicking the `User Icon` next to the **search bar** at the top of the Pieces Desktop Window. Then, click `Check for Desktop App Updates` or `Check for PiecesOS Updates`.

To check the Pieces Desktop App for updates on macOS:

1

### Open the Pieces Desktop App

Use the **Search** option or locate the Pieces Desktop App within your *Applications* folder

2

### Locate the Update Option

Click the `User Icon` to the right of the **Search Bar** at the top of the main app view

3

### Check for Updates

Click the `Check for Desktop App Updates` option

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_check_pfd_for_updates_profile_dropdown.gif)

You can also click `Check for PiecesOS Updates` as an alternative to doing so in from the PiecesOS system window in your taskbar.

Common Installation Issues
--------------------------

Common installation issues on Apple devices include having an outdated OS version or choosing the wrong installation package.

### Checking OS Version

Pieces applications need at least **macOS 12.0 (Monterey).** If you're having installation problems, first check that your OS version is up-to-date.

To determine your Apple device’s version of macOS:

1

### Locate the Apple Icon

Click the `Apple Icon` in the top-left corner of your screen

2

### Learn More About your Mac

Select `About This Mac`

3

### Find your OS Version

Under your device name (i.e. MacBook Air), look for the last line on the list, titled **macOS**

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_checking_about_mac.gif)

### Checking CPU Type

Intel and Apple Silicon (ARM) devices run on entirely separate CPU architectures, so downloading the wrong package for your Apple device can cause Pieces Desktop to be rendered useless.

To determine what CPU architecture your Apple device utilizes:

1

### Open the Apple Options

Click the `Apple Icon` in the top-left corner of your screen.

2

### Locate Mac Information

Select `About This Mac`, and look for the **Overview section.** The first line will contain your CPU type:

* **Apple Silicon / ARM:** You will see an M-Series processor (i.e., Apple M3)
* **Intel:** You will see an Intel processor (i.e., 2.6 GHz Intel Core i7)

Once you’ve determined your CPU architecture, [download the correct installation package accordingly.](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/macos#alternative-installation-methods)

Restart & Retry
---------------

If the installation fails because your macOS version is outdated or you installed the wrong package for your device's architecture, restart your machine and try the installation again from the beginning.

If the problem persists, please open a [GitHub issue](https://github.com/pieces-app/support/issues) for further assistance, or book a call with our engineers.

Updated on March 5, 2025, 9:13 PM UTC

---

[Cross-Platform](/products/desktop-application/troubleshooting/cross-platform)

[Windows](/products/desktop-application/troubleshooting/windows)

---

# Pieces for Developers

# Pieces for Developers

---

**Issues | Windows**
====================

Learn about what troubleshooting steps to take if the Pieces Desktop App isn’t working as expected on your Windows issues.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/troubleshooting_windows.png)

---

Alternative Installation Methods
--------------------------------

If you’re experiencing difficulties with installing Pieces Desktop App, you can install the software manually by downloading the Windows installer.

---

[![Download — Windows](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740690831330%2Fc1714b05-fc9a-4396-828b-16cba1efd4f6.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Download — Windows

*.EXE*](https://builds.pieces.app/stages/production/os_server/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE)[![Download — Windows](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740690833475%2F31e9fe57-e429-4b33-bb38-a2478762d3e9.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Download — Windows

*.MSIX (AppInstaller)*](https://builds.pieces.app/stages/production/appinstaller/pieces_for_x.appinstaller?download=true&product=DOCUMENTATION_WEBSITE)

![Installing Via WinGet](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740694843457%2F7c1bcb6c-53c9-46e7-bea5-26508547f893.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Installing Via WinGet

You can also install Pieces for Developers manually using **WinGet** from your device’s terminal.

To do so:

1. Launch Windows Terminal, Command Prompt, or PowerShell as administrator.
2. In the terminal, type `winget install “Pieces for Developers”` and press `enter`.

You may be prompted to enter `Y` or `N` to agree or disagree the terms of use when installing the Pieces Desktop App—type and enter `Y` to proceed with the installation.

---

Versions & Updates
------------------

Many issues can stem from out-of-date plugins, extensions, or the Desktop App itself.

### Updating the Pieces Desktop App

Updating the Pieces Desktop App on Windows (and macOS) can be done directly within the application:

1

### Open the Pieces Desktop App

Press the `Windows Icon` and search for Pieces Desktop, open it

2

### Locate the User Icon

Click the `User Icon` to the right of the **Search Bar** at the top of the main app view

3

### Check for Updates

Select `Check for Desktop App Updates`

4

### Update Pieces for Developers

If prompted, click `Download Update` to install available updates.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/windows_check_pfd_for_updates.gif)

You can also select `Check for PiecesOS Updates` from the same menu as an alternative to doing so from the PiecesOS system window in your taskbar.

Common Installation Issues
--------------------------

Windows users may encounter installation issues for various reasons, such as out-of-date OS components or incomplete dependencies.

### Checking for Windows Updates

Before installing, ensure your Windows system is fully updated:

1

### Open your Settings

Click the `Start` button, then select `Settings`.

2

### Find your Updates

Click `Windows Update` in the sidebar options.

3

### Install any Updates

Install any pending updates and restart your computer.

### Updating the Microsoft Store & App Installer

1

### Open the Microsoft Store

Press the `Windows` button and search for the **Microsoft Store**, open it.

2

### Find the Library updates

Click on `Library` to check for available updates.

3

### Update all recommendations

Update the Microsoft Store and the App Installer if prompted.

4

### Reinstall Pieces Suite

Now, you can retry installing Pieces Suite.

Checking Hardware Specifications
--------------------------------

You might need to check your system's specifications if you keep having issues, especially when trying to use local LLMs.

To check your device specifications on Windows:

1

### Open the Windows search

Press the `Windows` key on your keyboard or the `Windows Icon` in the task bar

2

### Open Run

Type **“run”** and press `enter`

3

### Find Dxdiag

Type `dxdiag` and press `enter` or click the blue `OK` button

The **System** tab will display your processor, number of CPU cores, and memory (RAM), while the **Display** tab will list your GPU, it’s maker (NVIDIA, AMD, Intel, etc.) and the available video memory (VRAM).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/windows_checking_hardware_specs.gif)

### Checking Windows Version

If the Pieces Installer isn't working properly, you might be using an outdated version of Windows. Pieces requires at least **Windows 10 v.1809 or higher**.

To find out your Windows version, press the `Windows` and `R` keys together, type **winver** in the pop-up window, and press `Enter`.

A new window will open called *About Windows*, which will display your current windows version.

---

If this doesn't work, you’re likely using a Windows version lower than Windows 10.

---

### Restart the Pieces Desktop App

After trying any of the fixes above, it’s recommended to restart you desktop and to restart Pieces Desktop App. This ensures all caches are clean and the computer is refreshed.

If the problem persists, please open a [**GitHub issue**](https://github.com/pieces-app/support/issues) for further assistance, or book a call with our engineers.

Updated on March 5, 2025, 9:13 PM UTC

---

[macOS](/products/desktop-application/troubleshooting/macos)

[Linux](/products/desktop-application/troubleshooting/linux)

---

# Pieces for Developers

# Pieces for Developers

---

Troubleshooting
===============

If the Pieces Desktop App isn't working as expected, start here. This page explains our troubleshooting documentation and guides you to the right solution for your issue.

---

Using the Guides
----------------

Click one of the links below to get started troubleshooting on your device—or [browse the cross-platform troubleshooting documentation](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/cross-platform) for more general fixes.

---

| [Cross-Platform](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/cross-platform) | [macOS](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/macos) |
| --- | --- |
| [Windows](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/windows) | [Linux](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/linux) |
| --- | --- |

---

### Cross-Platform Issues

Use the Cross-Platform page if you’re not sure where to begin or if your issue isn’t clearly related to your operating system.

On the [Cross-Platform troubleshooting guide](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/cross-platform), you’ll find:

* [Tips on restarting PiecesOS and Pieces for Developers Desktop App](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/cross-platform#restarting-pieces-suite--checking-updates)
* [Links to common installation issues on your OS](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/cross-platform#common-installation-issues)
* [Links to related documentation on checking hardware specifications on your OS](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/cross-platform#checking-hardware)

### macOS Issues

The [macOS troubleshooting guide](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/macos) provides information and guides on:

* [Alternative Installation Methods](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/macos#alternative-installation-methods)
* [How to verify your macOS version](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/macos#checking-os-version)
* [Updating the Pieces Desktop App](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/macos#updating-the-pieces-desktop-app)

### Windows Issues

The [Windows troubleshooting guide](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/windows) provides information and guides on:

* [Alternative installation methods for non-Suite installs](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/windows#alternative-installation-methods)
* [Checking for Windows installation updates](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/windows#versions--updates)
* [Verifying the App Installer is up-to-date](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/windows#updating-the-microsoft-store--app-installer)
* [Viewing hardware specifications using dxdiag](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/windows#checking-hardware-specifications)

### Linux Issues

The [Linux troubleshooting guide](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/linux) provides information and guides on:

* [Confirming compatibility with your Linux distribution](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/linux#checking-distribution-compatibility)
* [Using snap commands to update the Pieces Desktop App](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/linux#updating-pieces-desktop)
* [Adjusting graphics settings if you encounter UI issues](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/linux#adjusting-grapics--display-settings)

Additional Assistance
---------------------

If you’ve followed the applicable troubleshooting steps and still experience problems, consider visiting our community forums for additional guidance, opening a GitHub issue, or booking a call with our engineers.

[You can also find additional support resources here.](https://beta.docs.pieces.app/products/support)

Updated on March 5, 2025, 9:13 PM UTC

---

[Keyboard Shortcuts](/products/desktop-application/actions-keyboard-shortcuts/keyboard-shortcuts)

[Cross-Platform](/products/desktop-application/troubleshooting/cross-platform)

---

# Pieces for Developers

# Pieces for Developers

---

Introduction to Workstream Activity
===================================

**Workstream Activity** is your main hub for viewing all summaries, workflow context, and related information gathered by the Long-Term Memory (LTM-2) Engine.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pfd_docs_figmas/workstream_activity%20.png)

---

Overview
--------

The Workstream Activity view in the Pieces Desktop App integrates with the new-and-improved Long-Term Memory Engine (LTM-2) to capture and summarize your recent tasks, discussions, code reviews, and more.

By automatically generating concise roll-ups of your workflow, Workstream Activity aims to *eliminate* the repetitive context-setting required by most AI tools.

---

LTM-2—also referred to as *Long-Term Memory Engine*—is available as part of PiecesOS, which is required for the Pieces Desktop App.

Make sure you have the latest versions installed to take advantage of this feature.

---

Main View
---------

Once you access Workstream Activity, you’ll see two main UI elements:

1. **Activity Sidebar (Left Panel)**: A chronological list of your LTM roll-ups. Each roll-up is timestamped (e.g., “9:04 AM – 9:14 AM”) with a descriptive title (such as “Documentation & LTM-2 Prep”).
2. **Roll-Up Details (Right Panel)**: Selecting a roll-up displays its sections and bullet points, including embedded links, references, or code snippet IDs.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/workstream_activity/new_workstream_activity_media/ltm_rollup_demo_screenshot.png)

### Long-Term Memory (LTM-2) Engine

Long-Term Memory is an advanced memory agent that captures your workflow context at repeated intervals and preserves it for up to *nine months*.

Instead of starting fresh with every AI query, you can use LTM-2’s persistent memory to pick up any past conversation, code snippet, or link you’ve encountered.

Visit our [Core Dependencies documentation](https://beta.docs.pieces.app/products/core-dependencies) read more about LTM.

### LTM Roll-Ups

Each *roll-up* is a one-page summary that includes information and specific sections, such as:

* **Core Tasks & Projects**: A concise, but rich overview of projects, tasks or specific initiatives you’ve worked on—including problems and solutions (and how you came to that solution).
* **Key Decisions & Discussions**: Important conversations or choices you made, mentioning with whom you had discussions or meetings or who shared critical details that had implications on your workflow.
* **Documents & Code Reviewed**: References to any files, articles, or snippets you accessed, often deep-linked with clickable URLs (where applicable).
* **Follow-Up Actions**: Unfinished items, suggestions for next steps, and reminders.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/workstream_activity/new_workstream_activity_media/gifs/open_all_4_different_rollups.gif)

### Interacting with LTM Roll-Ups

Each roll-up offers multiple interaction points:

* `Start Copilot Chat`: Immediately open a Pieces Copilot Chat session scoped to that roll-up’s context, eliminating the need to re-explain your background or goals.
* `Copy` / `Download`: Export the roll-up as plain text or Markdown, letting you archive or share your summary outside of Pieces.
* `Deep Links`: Open references directly in your browser. If the roll-up mentions a specific blog or document, you can jump straight to it from within Pieces.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/workstream_activity/new_workstream_activity_media/gifs/start_chat_from_copilot.gif)

---

If you remember that a teammate shared a solution link last month, you can locate that exact snippet, conversation, or link by searching the relevant keyword in Workstream Activity.

---

### Privacy & Source Control

Your data is yours to manage.

At any time, even after a summary has been generated, you can disable sources from which LTM captures workflow data. Since LTM is available for use outside of the Pieces Desktop App, there are two locations from which you can make these changes.

In the Workstream Activity view, there is an LTM Access Control modal designated by a grid-like icon—clicking this opens the modal, where you can toggle or un-toggle data capture from specific sources.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/workstream_activity/new_workstream_activity_media/ltm_pfd_access_control.png)

In the PiecesOS task bar window, you can [disable any sources you don’t wish to capture](https://beta.docs.pieces.app/products/core-dependencies/pieces-os/quick-menu#quick-menu-actions) (e.g., personal browsing activity or data from messaging applications) through the LTM Access Control panel.

Events gathered from disabled sources will be *removed* from your roll-ups so they don’t appear in Workstream Activity or Pieces Copilot Chats.

Use Cases
---------

Powered by LTM-2, the Workstream Activity feature both centralizes all of your workflow context *and* removes one of the biggest productivity blockers and issues with AI-assisted development today—*short-term memory.*

* **No More Repetitive Context**: Avoid re-hashing the same information every time you prompt an AI assistant.
* **Project Continuity**: Instantly pick up where you left off if you return to a project after a break.
* **Comprehensive Search**: Quickly find any discussion, document, or link from the last nine months.
* **Flexible Exports**: Share roll-ups with colleagues or store them in external systems for auditing or collaboration.

Updated on March 5, 2025, 9:13 PM UTC

---

[Sharing](/products/desktop-application/pieces-drive/sharing)

[Navigation](/products/desktop-application/navigation)

---

# Pieces for Developers

# Pieces for Developers

Pieces for Developers Desktop App
=================================

---

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pfd_docs_figmas/all_logos.png)

---

The **Pieces for Developers Desktop Application** contains a suite of AI-powered tools designed to improve productivity by utilizing your workflow context and enabling you to make intelligent decisions on a day-to-day basis with generative AI.

Powered by [PiecesOS](https://beta.docs.pieces.app/products/core-dependencies/pieces-os)—the heart and soul of Pieces for Developers—the Pieces Desktop app is the ultimate assistant for developers and knowledge workers for code, context, and creativity.

Let’s dive in!

---

![Getting Started](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1741208849972%2F82a1cf92-6b17-437f-99d3-5f353efe65fe.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Getting Started

Follow these instructions to download and install the Pieces for Developers Desktop Application for [macOS](https://beta.docs.pieces.app/products/meet-pieces/macos-quickstart), [Windows](https://beta.docs.pieces.app/products/meet-pieces/windows-quickstart), or [Linux](https://beta.docs.pieces.app/products/meet-pieces/linux-quickstart).

![Support](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1732224146114%2F4484e983-32a4-4526-9fa6-ecb4f418d45d.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Support

Explore troubleshooting options, navigate to our [support page](https://beta.docs.pieces.app/products/support), or [directly book a call](https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr) with our engineers.

---

Using the Pieces Desktop App
----------------------------

The Pieces Desktop app is designed to act as a *hub* for the three main features of the Pieces Suite, some of which can be found within Pieces extensions and plugins and PiecesOS—the **LTM-2 Engine, Pieces Copilot, and Pieces Drive.**

With the Pieces Desktop App, you have access to dedicated views for the context captured by Long-Term Memory and the new Workstream Activity feature, Pieces Copilot, and Pieces Drive.

If you know what you’re after, jump to our [documentation on the different navigation views.](https://beta.docs.pieces.app/products/desktop-application/navigation)

Core Features
-------------

There are 3 core components of Pieces that are intelligently integrated to minimize context switching and improve productivity in your workflow on a daily basis.

### LTM & Workstream Activity

Keep track of your workflow so you can access stored context from yesterday, last week, or even *last month*—whenever you need it.

Imagine what you could do if you could always recall past solutions, find specific links that were lost to your browser history, or remember what so-and-so said in that one Slack channel about that new staging release?

[The Long-Term Memory (LTM-2) Engine](https://beta.docs.pieces.app/products/core-dependencies/pieces-os#ltm-2) makes sure *nothing* slips through the cracks.

The new, incredibly powerful [Workstream Activity](https://beta.docs.pieces.app/products/desktop-application/workstream-activity) feature provides a slick UI for interacting with saved data from up to **9 months ago** in an easily digestible *LTM Roll-Up* format that lets you start conversations with that context, or copy and download it.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/desktop_app_MAIN/gifs/scrolling_workstream_activities_demo_homepage.gif)

---

Read our [documentation on the new Long-Term Memory (LTM-2) Engine](https://beta.docs.pieces.app/products/core-dependencies/pieces-os#ltm-2) for more information on what it is and how it works.

---

### Pieces Copilot

Engage with generative AI using cloud-hosted or local-only LLMs to solve challenges, generate new code, debug tricky issues, or get a second pair of eyes on some complex logic—all with real-time, context aware assistance.

The [Pieces Copilot](https://beta.docs.pieces.app/products/desktop-application/pieces-copilot) offers optional integration with Long-Term Memory, so you can ask it about previous GitHub commits, request help refactoring your code per the specifications of a discussion with a coworker from the other day, and so much more.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/desktop_app_MAIN/desktop_app_pieces_copilot.png)

### Pieces Drive

Transform the way you manage your code snippets, documentation, and creative ideas with [Pieces Drive.](https://beta.docs.pieces.app/products/desktop-application/pieces-drive)

Save and organize your materials in one place, then watch as AI-enriched metadata brings context to every snippet—whatever the objective, Pieces Drive makes it simple to find exactly what you need.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/desktop_app_MAIN/gifs/demo_pieces_drive_details.gif)

Troubleshooting
---------------

Designed for three different operating systems, the Pieces for Developers Desktop Application has [in-depth troubleshooting documentation](https://beta.docs.pieces.app/products/desktop-application/troubleshooting) for cross-platform issues and OS-specific issues.

Support
-------

If you are running into an issue during the installation process or while using the Pieces Desktop app, [check out our support page](https://beta.docs.pieces.app/products/support) for resources and helpful links, as well as an option to reach out directly to our team members.

---

Get Started with Pieces
-----------------------

Ready to install the Pieces Desktop Application? Let’s get you on your way.

Click one of the links below to be redirected to your platform-specific (OS) download and installation *Quickstart* page:

* [macOS](https://beta.docs.pieces.app/products/meet-pieces/macos-quickstart)
* [Windows](https://beta.docs.pieces.app/products/meet-pieces/windows-quickstart)
* [Linux](https://beta.docs.pieces.app/products/meet-pieces/linux-quickstart)

Updated on March 5, 2025, 9:13 PM UTC

---

[Linux](/products/meet-pieces/troubleshooting/linux)

[Download & Install](/products/desktop-application/download-and-install)

---

# Azure Data Studio

# Azure Data Studio

Azure Data Studio
=================

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729000564515/ce956e4d-2d1b-46f6-b3b6-f22afc05933e.png?auto=compress,format&format=webp&q=75)

V2 Documentation for the Pieces for Developers Azure Data Studio Plugin is under construction 🚧 ... In the meantime, you can find current documentation for the Azure Data Studio Plugin [here.](https://docs.pieces.app/extensions-plugins/azure-data-studio)

Updated on March 5, 2025, 9:13 PM UTC

---

[Troubleshooting](/products/extensions-plugins/visual-studio/troubleshooting)

[JupyterLab Extension](/products/extensions-plugins/jupyterlab)

---

# Pieces CLI

# Pieces CLI

Pieces CLI
==========

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729000728803/00095de4-ba31-4127-b541-fdb331f35968.png?auto=compress,format&format=webp&q=75)

V2 Documentation for the Pieces for Developers CLI is under construction 🚧 ... In the meantime, you can find current documentation for the Pieces CLI [here.](https://docs.pieces.app/extensions-plugins/cli/)

Updated on March 5, 2025, 9:13 PM UTC

---

[Web Extension](/products/extensions-plugins/web-extension)

[Obsidian Plugin](/products/obsidian)

---

# Pieces for JetBrains Plugin: Keyboard Shortcuts

# Pieces for JetBrains Plugin: Keyboard Shortcuts

---

Pieces for JetBrains Plugin Commands
====================================

Below is a table containing every command that is available to use in the [Pieces for JetBrains Plugin.](https://plugins.jetbrains.com/plugin/17328-pieces)

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/commands/keymap_window.png)

---

Shortcut Table
--------------

There are a number of actions related to the [Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot) and [Pieces Drive management ecosystem](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive) that are accessible with shortcuts.

---

| **Command** | **macOS** | **Windows/Linux** |
| --- | --- | --- |
| [Save a Snippet](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/using-snippets/saving-snippets#via-right-click-menu--hotkeys) | `⌘+⌥+p` | `ctrl+alt+p` |
| --- | --- | --- |
| [Quick Search](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/using-snippets/search-reuse#viewing-and-reusing-saved-snippets) | `⌘+shift+p` | `ctrl+shift+p` |
| [Rename](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/using-snippets/edit-update#editing-snippet-metadata) | `shift+F6` | `shift+F6` |
| [Reclassify](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/using-snippets/edit-update#editing-snippet-metadata) | `F6` | `F6` |
| [Edit Description](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/using-snippets/edit-update#editing-snippet-metadata) | `⌘+d` | `ctrl+d` |
| [Delete](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/using-snippets/edit-update#editing-snippet-metadata) | `delete` | `backspace` |
| [Share via Pieces Link](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/using-snippets/sharing#via-keyboard-shortcut) | `⌘+L` | `ctrl+L` |
| [Insert at Caret](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/using-snippets/edit-update#editing-snippet-metadata) | `⌘+I` | `ctrl+I` |

---

Command Table
-------------

You can easily access these commands through the **Command Palette** using the shortcuts—`⌘+shift+p` (macOS) and `ctrl+shift+p` (Windows/Linux).

Click on the Actions quick search option and type the desired command.

---

| **Pieces Copilot** | Launches the Pieces Copilot in the side panel, providing contextual insights and assistance for the currently open code. |
| --- | --- |
| **Pieces Drive** | Opens the Pieces Drive window, showing information about the Pieces for JetBrains Plugin, the Pieces Community, and Support resources. |
| --- | --- |
| **Ask Copilot** | Allows you to ask the Pieces Copilot about the active file open in the JetBrains Environment if no code is selected. If a code section is selected, it allows you to ask about the selection. |
| **Import User Materials to Pieces** | Import external user materials (i.e. snippets) into Pieces Drive to integrate them into your workflow seamlessly. |
| **Disconnect from Pieces Cloud** | Disconnect from your Pieces Cloud account while keeping local functionality intact. |
| **Connect to Pieces Cloud** | Connect to the Pieces Cloud and sync VS Code with Pieces Cloud. |
| **Sign into Pieces** | Sign into your Pieces Cloud account and sync local databases. |
| **Save File to Pieces** | Save the active code file in the VS Code editor to Pieces. |
| **Save Current Selection to Pieces** | Save a selected code snippet to Pieces. |
| **Sign Out** | Log out of your Pieces account entirely, disabling both local and cloud-connected features. |
| **Pieces Copilot** | Opens the Pieces Copilot by the side of the VS Code editor. |
| **Search Pieces Drive** | Opens the Pieces Drive window allowing you to search. |

Updated on March 5, 2025, 9:13 PM UTC

---

[Sharing](/products/extensions-plugins/jetbrains/pieces-drive/sharing)

[Configuration](/products/extensions-plugins/jetbrains/configuration)

---

# Configure Pieces Plugin in JetBrains IDEs

# Configure Pieces Plugin in JetBrains IDEs

---

Configuration
=============

Read the guide below to configure the [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) to work efficiently in your workflow and adapt to your preferences.

---

Supported LLMs
--------------

We constantly update and configure our plugins and extensions, like the Pieces for JetBrains Plugin, to work with the latest LLMs.

The Pieces for JetBrains Plugin currently supports 13 different cloud models and [41 different local models](https://beta.docs.pieces.app/products/core-dependencies/ollama/supported-models):

---

| **Model Name** | **Context Window** | **Description** |
| --- | --- | --- |
| **GPT-4o Mini** | 128k tokens (Large) | Compact version of GPT-4o with efficiency. |
| --- | --- | --- |
| **GPT-4o** | 128k tokens (Large) | High-output GPT-4 variant for extended tasks. |
| **GPT-4 Turbo** | 128k tokens | Cost-efficient GPT-4 with large capacity. |
| **GPT-4** | 8k tokens | Advanced GPT-4 for high-quality responses. |
| **GPT-3.5** | 4k tokens | General-purpose versatile language model. |
| **Claude 3.5 Sonnet** | 40k tokens | Upgraded for improved reasoning. |
| **Claude 3 Sonnet** | 40k tokens | Designed for eloquent writing. |
| **Claude 3 Opus** | 40k tokens | High-capacity for detailed analysis. |
| **Claude 3 Haiku** | 40k tokens | Creative for precision tasks. |
| **Gemini Pro Chat** | 4k tokens | General-purpose language model. |
| **Gemini 2 Flash** | 4k tokens | Experimental, optimized for response time. |
| **Gemini 1.5 Pro** | 128k tokens (Large) | Advanced version with extended context. |
| **Gemini 1.5 Flash** | 256k tokens (Large) | Lightweight with extended context. |

---

[Read documentation on how to switch the LLM](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot/llm-settings#how-to-configure-your-llm-runtime) utilized by the Pieces for JetBrains Plugin from within your IDE.

Opening Pieces Settings
-----------------------

To open the **Pieces Settings** in the Pieces for JetBrains Plugin, follow these steps:

1

### Open the Settings Menu

Inside your JetBrains IDE, open the `Settings` menu using `⌘+,` (macOS) or `ctrl+,` (Windows/Linux)

2

### Search for Pieces

Search for `Pieces` in the search bar, and click on the `Pieces` item under `Tools`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/configuration/opening_settings.gif)

3

### Adjust Settings

This gives you access to many configurable settings for the Pieces for JetBrains Plugin

Overriding Commands in JetBrains
--------------------------------

If you want to change the shortcuts for any Pieces functionality within your JetBrains IDE, like [saving a snippet](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/saving-snippets#via-right-click-menu--hotkeys) or [generating a shareable link](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/sharing#how-to-share-a-saved-snippet), you can:

1

### Open Settings

Navigate to **Settings** `⌘+,` (macOS) or `ctrl+,` (Windows/Linux)

2

### Search for Keymap

Enter **Keymap** into the search bar

3

### Go to Plugins

Click on the Plugins section

4

### Locate Pieces Folder

Find the **Pieces** folder towards the bottom of the list (in alphabetical order)

5

### Open Pieces Function

**Double-click** or **press enter** on a Pieces function

6

### Assign Keyboard Shortcut

Select `Add Keyboard Shortcut` and enter your preferred key mapping

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/configuration/change_keybinds.gif)

Checking Your JetBrains IDE Version
-----------------------------------

You can easily check the version of your JetBrains IDE by opening up the **Settings** page using `⌘+,` (macOS) or `ctrl+,` (Windows/Linux) and searching for **Updates** under **System Settings.**

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731946003216/1e87da6c-ba14-4256-866e-d0be2002aae3.png?auto=compress,format&format=webp&q=75)

Settings Overview
=================

There are several other configurable settings related to the functionality of the Pieces for JetBrains Plugin which directly affect usability of some of the plugin’s features. There are also several preferences that you can enable or disable.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731515222420/61b0a394-bf6f-40ff-b668-cc8b1c80044a.png?auto=compress,format&format=webp&q=75)

### Disconnect from Personal Cloud

You can connect and disconnect from your personal cloud using `Connect to Pieces Cloud` or `Disconnect from Pieces Cloud` command in your command palette.

### Search Everywhere Default Action

Controls the behavior of an opened snippet when accessed from your IDE’s `Search Everywhere` command.

This can be adjusted to:

* Open snippets in markdown view
* Insert snippets at the current cursor position
* Open snippets and copy it to clipboard
* Copy snippets directly to clipboard without opening

### Cloud Capabilities

Pieces uses blend of cloud and local AI models, together with other captured context, to enrich your snippets and generate material insights.

You can adjust this AI enrichment setting to primarily utilize `Blended` or `Local` models.

### Code Vision (AI Quick Actions)

You can enable or disable [AI Quick Actions](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot#ai-quick-actions) (like `Pieces: Comment` and `Pieces: Explain`) with a checkbox.

You can also change whether you want your selected LLM to respond to the AI Quick Action by generating an output in the same conversation that’s already open in your side panel, or start a new one.

### Snippet Enrichment Levels

Select how much metadata should be automatically generated while saving snippets:

* High (6+)
* Medium (3-6)
* Low (1-3)
* Zero (0)

The information that is included via the **enrichment process** is [related tags, links, code authors, a smart description, and a language tag.](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/saving-snippets#what-happens-when-you-save-a-snippet)

### Git Integration

The Pieces for JetBrains Plugin automatically saves and generates metadata and associates it with your snippet, including any relevant information from Git.

You can check or uncheck the following automatically-enabled options:

* Add **commit authors** using git history when saving a snippet
* Add **commit links** using git history when saving a snippet
* Add **tags** using git history when saving a snippet
* Add **commit messages** from git history to descriptions when saving a snippet

### Link Sharing Behavior

You can adjust whether or not a [generated shareable link](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/sharing) is saved to your clipboard once it is generated.

### Assistive Mechanisms

There are several other assistive mechanisms that are enabled by default with the Pieces for JetBrains Plugin.

* Enable Autosave
* Enable Snippet Autocomplete (suggests saved snippets to complete code)

You can also enable or disable the automatic:

* **Saving of code selections** used to find Related Materials if none are found
* **Expanding of snippets** based on the active file extension (in your IDE’s toolbar)
* **Scrolling behavior** that occurs when a series of single-language snippets is automatically expanded
* **Launching of PiecesOS** upon project load
* **Sending of usage statistics and analytics** to help improve Pieces

Updated on March 5, 2025, 9:13 PM UTC

---

[Commands](/products/extensions-plugins/jetbrains/commands)

[Troubleshooting](/products/extensions-plugins/jetbrains/troubleshooting)

---

# Get Started with Pieces for JetBrains Plugin

# Get Started with Pieces for JetBrains Plugin

---

Get Started
===========

Follow the steps below to install and use the [Pieces for JetBrains Plugin.](https://plugins.jetbrains.com/plugin/17328-pieces)

---

Prerequisites
-------------

Before you begin, make sure you have:

* **PiecesOS:** The core engine that powers all Pieces extensions. [Learn more about PiecesOS.](https://beta.docs.pieces.app/products/core-dependencies/pieces-os)
* **Any JetBrains IDE:** The [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) works with any of the official JetBrains IDEs, so make sure you’ve got one installed.

You must have [PiecesOS](https://docs.pieces.app/installation-getting-started/pieces-os) to use the Pieces for JetBrains Plugin. We also recommend downloading the Pieces for Developers Desktop App.

---

Installing the Pieces for JetBrains Plugin
------------------------------------------

You can install the Pieces for JetBrains plugin through the [JetBrains Marketplace](https://plugins.jetbrains.com/plugin/17328-pieces--save-search-share--reuse-code-snippets) or by searching for Pieces in the plugins search of your IDE.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731511626110/c73ee89d-099b-4dd4-b438-263777362657.png?auto=compress,format&format=webp&q=75)

Once you've installed the plugin, you can begin using Pieces without restarting your IDE.

### Setting up PiecesOS

[PiecesOS](https://beta.docs.pieces.app/products/core-dependencies/pieces-os) is required for the [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) to work.

If you haven’t installed it yet, click the buttons to download PiecesOS via the recommended method, or follow the alternative steps below.

Windows

macOS (Apple Silicon)

macOS (Intel)

Linux

**Recommended Installation Method**

[Click here to download the Pieces Suite Installer for Windows.](https://builds.pieces.app/stages/production/pieces_suite_windows/appinstaller/download?download=true&product=DOCUMENTATION_WEBSITE)

**Alternative Installation Methods**

Or, you can install PiecesOS using these alternative methods—just click the link on the package that’s right for your system.

1. **WinGet**

Paste the following command into your terminal to install the Pieces Suite via WinGet: `winget install "Pieces OS"`

2. **Standalone .EXEs**

* [PiecesOS .EXE (St](https://builds.pieces.app/stages/production/pieces_suite_windows/appinstaller/download?download=true&product=DOCUMENTATION_WEBSITE)[andalone Windows)](https://builds.pieces.app/stages/production/os_server/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE)
* [Pieces for Developers Desktop App EXE (Standalone Windows)](https://builds.pieces.app/stages/production/pieces_for_x/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE)

3. **App Installer**

* [PiecesOS Appinstaller (Standalone Windows)](https://builds.pieces.app/stages/production/appinstaller/os_server.appinstaller?download=true&product=DOCUMENTATION_WEBSITE)
* [Pieces for Developers Deskt](https://builds.pieces.app/stages/production/pieces_suite_windows/appinstaller/download?download=true&product=DOCUMENTATION_WEBSITE)[op](https://builds.pieces.app/stages/production/pieces_for_x/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE) [App Appinstaller (Standalone Windows)](https://builds.pieces.app/stages/production/pieces_suite_windows/appinstaller/download?download=true&product=DOCUMENTATION_WEBSITE)

---

For enhanced security and better system integration, we recommend installing the MSIX package over the InnoSetup (.exe) installer. The MSIX package operates in a containerized environment, providing additional security benefits.

---

Updating
--------

The [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) will automatically update when a new version is available.

When the plugin updates, you’ll see a small success message pop-up in the bottom right-hand corner of your JetBrains IDE.

**Update notifications** cover updates for both the Pieces for JetBrains Plugin and PiecesOS.

You can also manually update the plugin by going toyour Plugins window using locating the Pieces for JetBrains Plugin, and clicking the `Update` button.

Pieces Cloud
------------

Connecting to the Pieces Cloud is optional. However, it **provides additional features** like **data backups, shareable links, and more.** You can enjoy the main functionalities of Pieces without an account.

Disconnecting from the Pieces Cloud logs you out of your Pieces account.

To disconnect from the Pieces Cloud:

1

### Open the Command Palette

Open the command palette in VS Code with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux)

2

### Disconnect from the Cloud

Enter `Disconnect from Pieces Cloud` and choose the option

If you’re not signed into Pieces Cloud - this option will not be available. You will see `Connect to Pieces Cloud`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/get_started/disconnect_pieces_cloud.gif)

Uninstalling
------------

To uninstall the Pieces for JetBrains Plugin, go to the `Settings` icon in the top left, `Plugins > Installed`, find the Pieces plugin, and click the uninstall button in the dropdown menu.

To access the uninstall option, click the dropdown menu and select the chevron to display the uninstall button.

In order for Pieces to be completely uninstalled from the JetBrains IDE, you'll need to restart your IDE.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/get_started/uninstall_button.png)

Updated on March 5, 2025, 9:13 PM UTC

---

[JetBrains Plugin](/products/extensions-plugins/jetbrains)

[Pieces Copilot](/products/extensions-plugins/jetbrains/pieces-copilot)

---

# Pieces Copilot Chat: AI Conversations in JetBrains IDEs

# Pieces Copilot Chat: AI Conversations in JetBrains IDEs

---

Generative AI Conversations
===========================

Enhance your development workflow with Copilot Chats inside the [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces)—an interactive AI assistant integrated directly into your JetBrains IDE.

---

Accessing the Pieces Copilot Chat in JetBrains IDEs
---------------------------------------------------

There are several ways to open up the Pieces Copilot chat window in any of your JetBrains IDEs.

### via Right-Click Context Menu

1

### Highlight Any Code Segment

Select some code in your active file

2

### Select a Management Option

Select `Ask Copilot About Selection` or `Ask Copilot About File` from the tool menu to open the chat with the selected context

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/ask_about_selection.gif)

### via the Sidebar

1

### Select Copilot Tab in Sidebar

Select the `Copilot Chat` tab within the JetBrains sidebar to open the chat interface

2

### Select the Starred Icon

Select the **Starred Icon** to add context to the Copilot chat

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/add_context_and_ask.gif)

### via Keyboard Shortcuts

1

### Open Search Everywhere

Press `ctrl+shift+a` (Windows/Linux) or `⌘+shift+a` (macOS) to open the `Search Everywhere` window

2

### Query Pieces Copilot

Type **"Pieces Copilot"** and select it from the search results to open the chat

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/searching_for_snippet.gif)

### via AI Quick Actions

Use the AI Quick Actions feature in the Pieces for JetBrains Plugin to quickly get an explanation for a confusing or forgotten function's logic.

Try using the `Pieces: Explain` tool above your code to start a conversation about a particular function.

This triggers the Copilot Chat window which outputs an explanation and summary of the code function.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/pieces_explain_quick_action.gif)

In addition, there is also `Pieces: Comment`, which you can read more about [here](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot/documenting-code#via-pieces-comment).

Contextualized Chats
--------------------

There are 2 different levels of contextual awareness that you can utilize when initiating a Copilot chat (or adding code to an existing chat) with the Pieces Copilot.

### Ask Copilot About Selection

Using the `Ask Copilot About Selection` command lets you interact with Copilot regarding specific code snippets, functions, or classes.

To use this feature:

1

### Choose a Portion of Code

Select a portion of code you want to ask about

2

### Open the Command Palette

Open the command palette with `⌘+shift+p` on macOS or `ctrl+shift+p` on Windows/Linux. Type and execute the `Ask Copilot About Selection` command

3

### Enter Your Prompt

Type your prompt in the text input field and press `return` (macOS) or `enter` (Windows/Linux)

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/ask_about_selection_command_pallete.png)

This approach is ideal for localized queries where you need **quick insights** or **guidance** **on specific code functionality**.

### Ask Copilot About Active File

The `Pieces Ask About Active File` feature focuses on the current file, offering tailored insights and assistance with debugging.

There are two ways to access this command:

1. Right-click inside your file and select `Ask Copilot about File`, then type your query into the dropdown text input field
2. Open the command palette using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux) and enter `Ask About File`

Once you've entered your question, the Pieces Copilot will analyze the file's context to deliver precise responses.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/ask_about_active_file.gif)

This feature helps you understand file dependencies, methods, and structure. It also detects potential issues, suggests improvements, and more.

The `Pieces: Ask About Active File` feature can also be applied during onboarding purposes to get helpful explanations for unfamiliar code.

Adding Context to Copilot Chats
-------------------------------

There are a number of individual items you can add as context to a chat, namely `Files`**,** `Folders`**,** `Snippets`**,** `Websites`**,** and `Messages`**.**

This greatly boosts the number generative AI responses your receive that will actually benefit you, as it can provide **hyper-specific** responses because it’s contextually aware of your code.

To do this, you can select the **Starred Message Icon** in the bottom-left corner of your Copilot Chat window, openable from the JetBrains IDE sidebar.

Click the **Starred Message Icon** then add whatever context items you need.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/add_context_copilot.png)

You can also right-click a file from your project or active file tree and add that file as context to the conversation.

This can be done without even opening the Pieces Copilot window. Simply right-click on a file in your open project and select `Add to Copilot Chat Context`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/add_to_copilot_context_file.png)

### Adding Code Snippets

You can paste snippets of code as a code block inside of any Copilot Chat by clicking the `{ }` icon inside the chat window, then pasting in your code.

This is useful for bringing in code that isn’t present immediately in the active file as context, or for comparisons and suggestions.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/adding_code_to_chat.png)

### Extracting Code from Screenshots

You can also extract code from screenshots directly from the Copilot chat menu by selecting `Extract Code from Screenshot`, selecting the desired screenshot from your **Finder** (macOS) or **File Explorer** (Windows/Linux) menu, and confirming.

Pieces Copilot will then scan the screenshot and generate the code captured from the image into the chat, from which you can copy, insert at your cursor, save it as a snippet, and more.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/extract_from_screenshots.gif)

AI Quick Actions
----------------

Above functions in your code, you can find clickable `Pieces: Comment` and `Pieces: Explain` buttons.

Click `Pieces: Explain` to open up the Pieces Copilot in the side window. The Pieces Copilot will automatically explain the purpose and function of that code within the chat.

Similarly, you can click `Pieces: Comment` above a function to have your preferred LLM generate documentation for that piece of code—you can then insert that code directly at the cursor by clicking `Insert at Cursor` or save it as a snippet using the built-in `Save to Pieces` button.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/pieces_explain_quick_action.gif)

Improving Code Consistency & Standardization
--------------------------------------------

The Pieces Copilot Chat is designed to assist you with various coding tasks to boost productivity and enhance your workflow. This is done primarily by eliminating **context-switching** (needing to leave your IDE to access generative AI).

### Naming Inconsistencies

If functions across your workspace use inconsistent naming patterns (e.g., `authenticateUser` in `authHandler.go` vs. `retrieveUserProfile` in `userHandler.go`), Pieces Copilot can suggest adopting a standardized naming convention for better readability and maintainability, like this:

```
Copy// authHandler.go
func authenticateUser(ctx context.Context, credentials Credentials) (User, error) {
    if credentials.Username == "" || credentials.Password == "" {
        return User{}, errors.New("missing credentials")
    }
}

```

### Inconsistent Error Handling

If error-handling strategies differ across files (e.g., structured errors in `authService.go` vs. inconsistent handling in `userService.go`), Pieces Copilot can help unify the approach:

```
Copy// authService.go
func LoginUser(credentials Credentials) (string, error) {
    token, err := authenticate(credentials)
    if err != nil {
        return "", fmt.Errorf("login failed: %w", err)
    }
    return token, nil
}

```

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Copilot](/products/extensions-plugins/jetbrains/pieces-copilot)

[Documenting Code](/products/extensions-plugins/jetbrains/pieces-copilot/documenting-code)

---

# Easily debug errors with Pieces: Copilot Fix in the Pieces for JetBrain Plugin.

# Easily debug errors with Pieces: Copilot Fix in the Pieces for JetBrain Plugin.

---

Fixing Errors with Pieces Copilot
=================================

You can easily debug and fix errors with the built-in Pieces: Copilot Fix feature in the [Pieces for JetBrains Plugin.](https://plugins.jetbrains.com/plugin/17328-pieces)

---

Using the Debugging Tool
------------------------

To start debugging, locate the error or problematic code segment in your project.

Errors are usually indicated by **red underscoring** surrounding the error or problematic lines of code.

Then, click the `Yellow Lightbulb` that appears to the left of the buggy code, and click `Pieces: Copilot Fix`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/debugging_errors/lightbulb_fix.png)

Pieces Copilot will utilize whichever LLM you have currently active and analyze the issue, then open a Copilot Chat with suggestions, regenerate the code, and provide the option to insert it at the cursor mark—all with fresh code comments.

Why Debug with Pieces Copilot?
------------------------------

Debugging with Pieces Copilot makes fixing errors easier and gives you AI-driven insights without interrupting your workflow in JetBrains.

This saves time by eliminating the need to search for solutions online or sift through extensive documentation, keeping your workflow efficient and minimizing distractions.

Additionally, each suggested fix comes with an explanation to help you understand and improve your coding practices while debugging.

The Pieces Copilot proactively identifies code issues—simply highlight your code, click the `Yellow Lightbulb`, and let it analyze the problem(s).

Updated on March 5, 2025, 9:13 PM UTC

---

[Documenting Code](/products/extensions-plugins/jetbrains/pieces-copilot/documenting-code)

[Refactoring](/products/extensions-plugins/jetbrains/pieces-copilot/refactoring)

---

# Pieces Copilot: Automate Code Documentation in JetBrains

# Pieces Copilot: Automate Code Documentation in JetBrains

---

Code Comments
=============

Adding comments to your code is integral to software development in [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces), especially when working on shared codebases and repositories with fellow developers.

---

Commenting Code Selections with Pieces Copilot
----------------------------------------------

Pieces Copilot can analyze and **comment on any selected portion of your code,** explaining its logic line by line. This ensures your code is readable and easy for others to understand.

### via Right-Click Menu

To add comments to your code from the toolbar, select the desired lines, right-click, hover over `Pieces`, and choose `Comment Selection with Copilot`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/documenting_code/hovering_comment_selection.png)

Pieces Copilot generates clear, contextual comments for the selected code in the Copilot chat window. Click `Insert at Cursor` to add the comments at your cursor's location. You can also click `Accept Changes` to insert the comments directly between your lines of code where you selected the code.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/documenting_code/comment_right_click.gif)

### via Pieces: Comment

A faster way to add documentation to a function you might have missed is to click the `Pieces: Comment` tool. This tool appears above actionable functions in your code that are visible on your screen.

This new [AI Quick Actions](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot/chat#via-ai-quick-actions) feature, like CodeLens actions that appear above functions near your cursor, can quickly generate comments to explain the purpose and logic of your code.

To get started, look for the **AI Quick Actions** buttons above individual functions in your code.

Once you find the **AI Quick Actions**, left-click on `Pieces: Comment`, then click `Accept Changes` to add the new comments directly into your code.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/documenting_code/comment_quick_action.gif)

Why Use Code Comments?
----------------------

Code comments are crucial for **keeping a clean, well-documented codebase**. They **give context for reviewers** to focus on functionality and **make complex reasoning clear**, making the code easier to follow and maintain.

Good documentation boosts code readability and speeds up onboarding for those new to the codebase. This benefits both current and **future development and lays a strong foundation for upgrades and iterations**.

Comments help you remember the purpose and function of the code, making it easier to understand after a break.

This feature is powerful. Need to document a few hundred lines of code? Just use `Comment Selection with Copilot`.

Updated on March 5, 2025, 9:13 PM UTC

---

[Chat](/products/extensions-plugins/jetbrains/pieces-copilot/chat)

[Debugging Errors](/products/extensions-plugins/jetbrains/pieces-copilot/debugging-errors)

---

# Switch LLMs in Pieces Copilot for JetBrains IDEs

# Switch LLMs in Pieces Copilot for JetBrains IDEs

---

Supported LLMs
==============

We constantly update and configure our plugins and extensions, like the [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces), to [work with the latest LLMs.](https://beta.docs.pieces.app/products/core-dependencies/ollama/supported-models)

Currently, the Pieces for JetBrains Plugin supports 2 different models—or you can use your own API key:

---

| GPT-3.5-Turbo | GPT-4 | GPT-4-Turbo |
| --- | --- | --- |
| GPT-4o | GPT-4o-mini | Gemini Pro Chat |
| --- | --- | --- |
| Gemini 1.5 Flash | Gemini 1.5 Pro | Claude 3 Haiku |
| Claude 3 Opus | Claude 3 Sonnet | Claude 3.5 Sonnet |
| Code Chat Bison | Chat Bison | Mistral 7B |
| Phi-2 | Phi-3 Mini 128k | Phi-3 Mini 4k |
| Llama 2 7B | Llama 3 8B | Gemma 1.1 7B |
| Gemma 1.1 2B | Code Gemma 1.1 7B | Granite 3B & 8B |

---

How to Switch Models
--------------------

To get started, open the Pieces Copilot chat in the side-window using any of the available methods, such as opening a Copilot Chat with an option in the tool menu, using a quick action, selecting the Pieces icon from the sidebar, and other means.

To access the LLM menu within the Copilot Chat:

1

### Access Copilot Chat

Open the Copilot Chat view by clicking the **sidebar icon**

2

### Find Active Model

Look for the **active model** in the lower-left of the Copilot Chat view

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/llm_settings/changing_model.gif)

3

### Change Active Model

Click the active model icon and select your preferred LLM from the menu

The Pieces Copilot will utilize that model for all AI-related features—no restart or refresh needed.

Depending on your preferences and intended workflow, you can choose between cloud-hosted and local models.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/llm_settings/download_changing_local_model.gif)

Using local models allows for the flexibility to work in a completely offline environment without sacrificing Pieces Copilot.

Updated on March 5, 2025, 9:13 PM UTC

---

[Refactoring](/products/extensions-plugins/jetbrains/pieces-copilot/refactoring)

[Pieces Drive](/products/extensions-plugins/jetbrains/pieces-drive)

---

# Pieces for Developers

# Pieces for Developers

---

Refactoring Code
================

Refactoring is essential for enhancing your code's structure and maintainability without altering its behavior. The [Pieces for JetBrains Plugin](http://google.com) makes this easier with its `Modify Selection with Copilot` feature.

---

Modifying your Code with Pieces Copilot
---------------------------------------

Modify your code to change error handling, rename functions, and add functionality in two ways.

### via Right-Click Menu

Right-click on the highlighted code you want to modify, hover over `Pieces`, and click `Modify Selection with Copilot`.

After clicking `Modify Selection with Copilot`, Pieces Copilot will open the Copilot chat window in the JetBrains sidebar, showing the proposed changes.

Review the modifications and choose whether to accept them. If you do, the updates will automatically integrate into your codebase at the point where the code was selected, right at your cursor.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/refactoring/modify_code.gif)

Updated on March 5, 2025, 9:13 PM UTC

---

[Debugging Errors](/products/extensions-plugins/jetbrains/pieces-copilot/debugging-errors)

[LLM Settings](/products/extensions-plugins/jetbrains/pieces-copilot/llm-settings)

---

# Pieces Copilot: AI-Powered Assistance in JetBrains IDEs

# Pieces Copilot: AI-Powered Assistance in JetBrains IDEs

---

Pieces Copilot
==============

With Pieces Copilot inside the [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces)**,** you can bring the power of AI into any of your JetBrains IDEs—like PyCharm, IntelliJ IDEA, RubyMine, and more.

With the Pieces Copilot, you can generate intelligent code comments, access AI Quick Actions, and ask variable-context coding questions without leaving your JetBrains IDE.

---

Generative AI Conversations
---------------------------

If you’re unsure how to implement a specific piece of functionality, stuck on a bug, or simply want a useful answer to something within your codebase, you can use the Pieces Copilot to receive context-aware responses to help you move forward.

The Pieces for JetBrains plugin provides several levels of conversation functionality, each of which is fully integrated with Pieces—you can enable the **Long Term Memory Engine (LTM-2)** for full, streamlined context across your entire workflow, or open a limited context conversation in the IDEs side view.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/chat_window_open.png)

Adding Conversation Context
---------------------------

The Pieces Copilot lets you add specific folders or files to the conversation’s context window—like files from the codebase you’re working in—so that you always have explicit and accurate answers to pressing questions at your fingertips.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/add_to_copilot_context_file.png)

Start by right-clicking some code and select one of the following options from the tool menu:

* `Ask Copilot About Selection`: Includes the active selected code with the Copilot chat.
* `Ask Copilot About Active File`: Includes the entire active file with the Copilot chat for a broader range of context.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/hovering_ask_about_selection.png)

Pieces Copilot Tools
--------------------

Discover powerful AI-powered tools and features within the Pieces for JetBrains Plugin.

### Documenting Code

Effortlessly create meaningful code comments using the Pieces for JetBrains Plugin. By analyzing your code's structure and purpose, [Pieces Copilot generates clear and helpful comments](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot/documenting-code#commenting-code-selections-with-pieces-copilot) to improve readability and make maintenance easier.

To add documentation and comments to code, select the code snippet—no matter how long—then right-click, hover on `Pieces`, and click on `Comment Selection with Copilot`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/hovering_comment_selection.png)

This opens the Pieces Copilot in the JetBrains sidebar, which begins adding documentation to the highlighted snippet, from which you can select the `Insert at Cursor` option to add the comments to your code.

You can also click `Pieces: Comment`, which is an [AI Quick Action](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot/chat#ai-quick-actions) that lives above accessible functions within your code.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/adding-code-comments-quick-action.gif)

Use this feature to maintain consistency in documentation and simplify handoffs for collaborative projects.

### Enhanced Debugging Tools

Detect and address code issues quickly with Pieces for JetBrains Plugin [Code Debugging feature](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot/debugging-errors). It pinpoints problems, suggests solutions, and provides detailed context, making bug fixes faster and more intuitive.

The code debugging feature is particularly useful for tackling complex debugging tasks and ensuring code quality across projects.

Using this feature is simple—locate the error in the code, marked by a red underline. Hover over the section to view the quick debug information provided by JetBrains. Then, click on `More Actions` and select `Pieces: Copilot Fix`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/pieces_fix_quick_action.gif)

### Generate & Update Code

With the Pieces for JetBrains Plugin, enhance your workflow using powerful AI Quick Actions:

* `Pieces: Explain`: [Use this AI Quick Action to get an explanation and summary of the function](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot/chat#via-ai-quick-actions), making it easier to understand and document.
* `Pieces: Comment`: [This AI Quick Action adds intelligent code comments](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot/documenting-code#via-pieces-comment) to the selected function based in the context of the code itself to ensure accuracy.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/comment%20inline.png)

Selecting Your Pieces Copilot Runtime
-------------------------------------

Choose between [different LLMs directly within JetBrains](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot/llm-settings) by accessing the sidebar and selecting your preferred model by clicking the currently-utilized LLM under `Active Model` (Claude 3.5 Sonnet).

Options range from lightweight models for simple queries to advanced models for in-depth analysis, as well as **local** and **cloud-based LLMs.**

This flexibility allows you to tailor Pieces Copilot to your specific development needs, whether it’s speed or accuracy.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/changing_runtime.png)

Read more about [what LLMs are available for use](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/configuration#supported-llms) with the Pieces for JetBrains Plugin.

Pieces Copilot As a Daily Driver
--------------------------------

The Pieces Copilot is a powerful, adaptable tool that grows with you as you use it—*so use it!*

---

Collaborative Coding Made Easy

Troubleshoot and Resolve Bugs Swiftly

Quick Prototyping

Skill Enhancement

Efficient Code Refactoring

---

[Download the Pieces for JetBrains Plugin today!](http://plugins.jetbrains.com/plugin/17328-pieces)

Updated on March 5, 2025, 9:13 PM UTC

---

[Get Started](/products/extensions-plugins/jetbrains/get-started)

[Chat](/products/extensions-plugins/jetbrains/pieces-copilot/chat)

---

# Edit and Update Code Snippets in JetBrains with Pieces

# Edit and Update Code Snippets in JetBrains with Pieces

---

Editing
=======

Editing snippets and saving your changes is simple with the [Pieces for JetBrains Plugin.](https://plugins.jetbrains.com/plugin/17328-pieces)

---

How to Edit Snippets
--------------------

There are several types of metadata you can edit when editing saved materials—as well as the saved piece of code itself.

To edit a snippet:

1

### Open the Pieces Drive

Open the **Pieces Drive** via the JetBrains sidebar

2

### Start Editing the Snippet

Locate a snippet you want to edit and select `Edit` from the quick menu or right click the snippet and select `Edit` from the menu

3

### Edit your Snippet

Make your changes, then save using `⌘+s` (macOS) or `ctrl+s` (Windows/Linux)

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/edit_and_update/editing_snippet.gif)

After saving, the editor will automatically return to the main snippet view, with your changes applied instantly.

Actions from the Pieces Drive View
----------------------------------

When you left-click on a saved snippet in the **Pieces Drive**, a tool menu with Pieces features will appear. Some options relate to the [Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot), while others handle [material management](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive) actions.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/edit_and_update/edit_selected_material.png)

### Pieces Copilot Actions

To access the material management view, choose a snippet from Pieces Drive. From here, you can select various Copilot-focused actions, as listed in the table below.

---

| `Add to Copilot Context` | Adds the snippet to the context of your existing Copilot Chat conversation. |
| --- | --- |
| `Ask Copilot` | Triggers the input modal and lets you type a prompt directly into the field without changing your active file view. |
| --- | --- |
| `Insert at Cursor` | Inserts the code snippet at the point of your cursor inside your active file. |
| `Shareable Links` | Shows shareable links that have been generated for that snippet, if applicable. |

---

### Material Management Actions

Below the Pieces Copilot actions, you can quickly change a snippet's name, description, classification, and other enriched metadata. Check the table below for details.

---

| `Annotations` | Add, adjust or delete annotations for the snippet. |
| --- | --- |
| `Related Links` | Add or remove links to the snippet’s metadata. |
| --- | --- |
| `Tags` | Add or remove tags to the snippet’s metadata. |
| `Reclassify` | Set your own custom snippet classification. |
| `Edit Selected Material` | Edit the content of the snippet. |
| `Rename` | Change the name (title) of the snippet as it appears in your repository of saved materials. |
| `Delete` | Delete the snippet. |

---

Additional Tools while Editing
------------------------------

*Layers upon layers of functionality*—that's the aim of all Pieces for Developers plugins and extensions.

When you edit a snippet (find it in the **Pieces Drive** menu and click `Edit`), you have access to all Pieces features, even though you're not in your main file view.

Instead, the `Edit` view *becomes* your main file, so you can [generate code comments, debug, add it to context, and more.](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot)

Updated on March 5, 2025, 9:13 PM UTC

---

[Search & Reuse](/products/extensions-plugins/jetbrains/pieces-drive/search-reuse)

[Sharing](/products/extensions-plugins/jetbrains/pieces-drive/sharing)

---

# Save Code Snippets in JetBrains with Pieces Plugin

# Save Code Snippets in JetBrains with Pieces Plugin

---

Saving
======

The [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) lets developers to save code snippets directly within their JetBrains IDEs—this ensures that our snippets are securely stored and easily accessible for future use.

---

Saving Snippets
---------------

There are several ways to save code with the Pieces for JetBrains plugin—through the right-click menu, hotkeys, or dragging and dropping code into the Pieces sidebar.

There’s also the fine-tuned saving feature called `Save to Pieces As` which lets you edit and adjust the automatically-generated metadata to your liking.

### via Right-Click Menu

You can save snippets by accessing the tool menu.

To save a snippet using this method:

1

### Choose your Snippet

Highlight the code you want to save

2

### Open Right-Click Menu

Right-click on the highlighted code and hover on the `Pieces` option

3

### Select Action

Select either `Save Current Selection to Pieces` or `Save File to Pieces`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/saving_snippets/save_to_pieces.gif)

This will trigger a success message in the bottom-right corner of your screen to let you know that the save was successful.

### via Keyboard Shortcut

Keyboard shortcuts are another easy way to save useful developer materials.

To save a snippet via keyboard shortcuts:

1

### Choose your Snippet

Highlight the code you want to save

2

### Save your Snippet

Use the command `⌥+⌘+p` (macOS) or `ctrl+alt+p` (Windows/Linux) to save the code as a snippet

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/saving_snippets/saved_to_pieces.png)

Saving a snippet via keyboard shortcut will trigger the same success modal in the bottom right-hand corner of your screen to let you know the save was successful.

### via Copilot Chat

When you start a conversation about a piece of code in your active file—or have any code block present in your Copilot Chat—you can save it to Pieces using the `Save to Pieces` button in the Copilot Chat view.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734039141656/abf74d05-29e7-4769-995c-2157939ff930.png?auto=compress,format&format=webp&q=75)

What’s Stored When You Save a Snippet
-------------------------------------

When you save a snippet to your Pieces Cloud, it’s more than just the code that gets stored.

The Pieces Copilot captures:

* `Type`: Categorizes the snippet (e.g., API call, function, class) with it’s code language.
* `Associated Tags`: Keywords associated with the snippet for easier searching.
* `Custom Description`: Specifies precisely which *lines* (in numerical form) the snippet is from, as well as the file from which it originated—very useful for mind-mapping.
* `Smart Description`: AI-generated descriptions that summarize the snippet’s purpose and function.
* `Suggested Searches`: Related searches that help you discover similar snippets.
* `Related Links`: References to documentation, code repositories, or other relevant resources.
* `Related People`: Associated collaborators or contributors.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/saving_snippets/snippet_enrichment.png)

Where Saved Snippets Live
-------------------------

Saved snippets are stored locally on your device, ensuring accessibility even when offline. This also means that any Pieces for Developers extension or plugin—or even the Pieces Desktop App—has constant, up-to-date access to your saved materials with Pieces Drive.

There are two ways to view your saved snippets—by viewing them in your [JetBrains IDE’s sidebar menu](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/search-reuse#via-pieces-sidebar), or with the [Search Everywhere](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/search-reuse#finding-saved-snippets) feature.

[Read more about how to find your saved snippets here.](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/search-reuse#finding-saved-snippets)

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Drive](/products/extensions-plugins/jetbrains/pieces-drive)

[Search & Reuse](/products/extensions-plugins/jetbrains/pieces-drive/search-reuse)

---

# Search and Reuse Code Snippets in JetBrains with Pieces

# Search and Reuse Code Snippets in JetBrains with Pieces

---

Searching
=========

You can find your saved code snippets easily with the [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) by utilizing a few different search methods.

---

Finding Saved Snippets
----------------------

To locate your snippets, open a file in VS Code and use one of two methods—searching with the **Pieces Drive** menu, or with **Search Everywhere**.

### via Pieces Drive

If you want to access your saved snippets directly within the JetBrains IDE, you can:

1

### Locate Pieces Drive

Open the `Pieces Drive` from the JetBrains sidebar

2

### Filter, Search, and Explore

Once the `Pieces Drive` is open, you have access to a wide range of options that allow you sort through your snippets

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/searching_snippets_drive.gif)

### via Search Everywhere

Whether you’re on macOS, Windows or Linux, all you need to do is double-press the `Shift` key twice to open up the Search Everywhere menu.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731514495750/53039e6c-1199-4879-8b92-40cc02a20a71.png?auto=compress,format&format=webp&q=75)

Once the menu is open, switch to the `Pieces` tab, then enter a search query to search your entire Pieces repository for any snippet you’ve saved.

After you’ve located a snippet, you can press `Enter` to open it in a new window and view the snippet’s code and saved context.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/searching_for_snippet.gif)

You can also press `shift+shift` again and search while remaining in the Search Everywhere menu’s `All` tab, but the `Pieces` tab is the de-facto home for seeing only saved snippet search results.

The default behavior for the **Search Everywhere** feature can be changed to whatever keymapping you prefer—l[earn more about this here.](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/commands)

Adding Filters to your Search
-----------------------------

You can filter saved snippets in the **Pieces Drive** by snippet tags, coding languages, and snippet titles.

To filter through your snippets:

1

### Open Pieces Drive

Open `Pieces Drive` via the JetBrains Sidebar

2

### Select the Search Bar

Select the search bar at the top of the **Pieces Drive**

3

### Choose the Filter Option

After clicking on the search bar, you’ll have the option to quick filter by `Titles`, `Annotations`, or `Content`

4

### Enter your Query

Using the filter, enter a search query in the search bar

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/filtering_snippets.gif)

When you’ve finished entering your filters, the Pieces Explorer will only display the snippets that match your filters. You can clear this by clicking the siphon icon with an `x` over it.

For any tags you don’t want to set, you can leave them blank by just pressing `return` (macOS) or `enter` (Windows/Linux).

Viewing and Reusing Saved Snippets
----------------------------------

[Saved snippets](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/saving-snippets) can be viewed alongside their saved metadata by opening up them up directly from the **Pieces Drive**—either by pressing `enter` on a highlighted snippet, or by double-clicking it.

This opens up the **snippet in markdown preview mode** in a separate window.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731947059537/0d388dec-e373-4bf4-9ec8-4a8b9dcc9246.png?auto=compress,format&format=webp&q=75)

From the opened markdown preview, you can then select `Copy to Clipboard` in the top-left corner of the snippet’s embedded code box or use the `⌘+c` (macOS) or `ctrl+c` (Windows/Linux) shortcut after selecting the section.

### via Right-Click Menu

The Pieces for JetBrains Plugin offers several actions when you right-click a snippet in the **Pieces Drive** menu.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/pieces_drive_right_click.png)

There are several material management and Pieces Copilot-related actions available in this menu. [Read more about them here](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/edit-update#actions-from-the-editing-view) or see the expanded table below.

### via Pieces Sidebar

You can view snippets by opening up the Pieces sidebar in your JetBrains IDE by clicking the **Pieces Drive** icon on the left-hand side of your screen.

Once in the sidebar, you can insert a snippet and place it exactly where you want it in your code by clicking `Insert at Cursor`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/copy_to_clipboard_drive.png)

You can also right-click a snippet and select `Copy` to copy it to the clipboard, allowing you to paste it anywhere you need.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/copy_to_clipboard_drive.png)

### Previewing Saved Snippets

While using the Pieces Drive sidebar, you can click on one of the snippets in the snippets list to view it’s code before selecting the snippet.

---

| `Add to Copilot Context` | `Ask Copilot` | `Copy` |
| --- | --- | --- |
| `Insert at Cursor` | `Shareable Links` | `Annotations` |
| --- | --- | --- |
| `Links` | `Tags` | `Reclassify` |
| `Edit` | `Rename` | `Delete` |

---

Real Time Snippet Streaming[​](https://docs.pieces.app/extensions-plugins/jetbrains#real-time-snippet-streaming)
----------------------------------------------------------------------------------------------------------------

Each product in the Pieces Suite uses [PiecesOS](https://beta.docs.pieces.app/products/core-dependencies/pieces-os) to get information about your snippets' context.

When you update a snippet in the [Pieces for Developers Desktop App](https://beta.docs.pieces.app/products/desktop-application)—such as a name or description, tags or any of the other metadata—those changes are also reflected in your **Pieces Drive** without refreshing.

If your snippets are not updating right away, see the [troubleshooting guide](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/troubleshooting) to details on how to refresh your snippet list.

Updated on March 5, 2025, 9:13 PM UTC

---

[Saving Snippets](/products/extensions-plugins/jetbrains/pieces-drive/saving-snippets)

[Edit & Update](/products/extensions-plugins/jetbrains/pieces-drive/edit-update)

---

# Share Code Snippets in JetBrains with Pieces Plugin

# Share Code Snippets in JetBrains with Pieces Plugin

---

Sharing Snippets
================

The `Share via Pieces Link` feature in the [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) is designed to streamline the process of sharing code snippets with colleagues, collaborates, or the broader development community.

This feature lets users generate shareable links for their saved code snippets directly from within their JetBrains IDE without needing to switch to the [Pieces for Developers Desktop App.](https://beta.docs.pieces.app/products/desktop-application)

---

What Information Gets Shared
----------------------------

When a snippet is saved to the Pieces Cloud, the code is [enriched with valuable information](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/saving-snippets#what-happens-when-you-save-a-snippet) such as related people, links, annotations, tags, and an automatically-generated description.

This information is visible to the right of the code block when the shared snippet is open in your browser:

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731623145740/ec60e89f-ac2f-4396-b6a8-ad94f57d9745.png?auto=compress,format&format=webp&q=75)

Want to see what a shared snippet looks like for yourself?

[Click here to check out a C# snippet](https://jimbobbennett.pieces.cloud/?p=419d42b485) that Pieces engineers used to launch a Confetti Cannon at a conference.

How to Share a Saved Snippet
----------------------------

You can share saved snippets in two ways: use keyboard shortcuts or right-click on a selection in your environment\*\*.\*\*

This link can easily be shared via email, Discord, Slack, or other platforms. The recipient can view the snippet **without needing to have a Pieces account.**

### via Right-Click Menu

Shareable Pieces links for your code snippets can also be generated by right-clicking a portion of selected code, hovering over the `Pieces` item in the pop-up menu, then selecting `Share via Pieces Link`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/sharing/share_via_pieces_link.png)

### via Keyboard Shortcut

You can share code snippets using the `⌘+L` (macOS) or `ctrl+L` (Windows/Linux). This is simply a shortcut to accessing the `Share via Pieces Link` tool in the right-click menu.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731514636367/cbe143a0-d518-4073-9d24-5047a88daf45.png?auto=compress,format&format=webp&q=75)

Generating Links for Existing Saved Snippets
--------------------------------------------

If you saved a material but didn't create a shareable link at the time, don't worry. You can still generate, copy, regenerate, or delete the existing link from the **Pieces Drive.**

1

### Open the Pieces Drive

Open the Pieces Drive via the Pieces Drive icon in the JetBrains sidebar

2

### Share the Snippet

After locating the snippet you’d like to share, right-click it and select `Generate Shareable Link` from the available actions

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/sharing/generate_shareable_link_drive.png)

3

### Wait for the Link and Copy

After generating the link, a new modal will appear. Wait for the snippet to be shared with an automatically generated link, or manually copy the link from the modal.

If you have generated a link for that snippet previously, the `More Actions` menu options will automatically adjust to include 3 new actions:

* `Open in Browser`: Opens the existing shareable link in your desired browser.
* `Refresh Link`: Regenerates the link—this is important if a snippet has been edited or updated, as a new link will be required to contain the new changes.
* `Revoke Link`: Revokes the shareable link so that anyone with the existing link to that snippet will be barred from future access.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/sharing/share_link_options.png)

Enriched Sharing Experience
---------------------------

When you `Share` a snippet, it’s not just the code that’s included. The snippet comes with additional metadata to provide context—[you can read more about that here.](#what-information-gets-shared)

* `Snippet Type`: Identify the language or framework, such as Python or React.
* `Tags`: Useful keywords for quick categorization.
* `Description`: A short summary of what the snippet does.
* `Related Links`: Helpful resources or documentation tied to the snippet.
* `Author Information`: A record of who created the snippet.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731514684555/707b0769-5b68-448c-811b-a44d2414a10d.png?auto=compress,format&format=webp?auto=compress,format&format=webp&q=75)

Sensitive Information Watchdog
------------------------------

The `Share via Pieces Link` feature does more than just allow you to effectively share snippets across your entire team and other communities, though.

You'll see a section titled **Sensitive Information:**

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731514684555/707b0769-5b68-448c-811b-a44d2414a10d.png?auto=compress,format&format=webp&q=75)

Our in-house ML model scans snippets for potentially sensitive information, like API keys or passwords, and alerts you so that you can make an informed decision before sharing the snippet.

The scan happens locally using on-device machine learning models **before the snippet is uploaded to the cloud** for sharing—that way, you can make an informed decision about sharing your code.

Updated on March 5, 2025, 9:13 PM UTC

---

[Edit & Update](/products/extensions-plugins/jetbrains/pieces-drive/edit-update)

[Commands](/products/extensions-plugins/jetbrains/commands)

---

# Manage Code Snippets with Pieces in JetBrains IDEs

# Manage Code Snippets with Pieces in JetBrains IDEs

---

Pieces Drive
============

Snippets are useful pieces of code you can save, share, reuse, modify, integrate into future projects to improve productivity and reduce time spent looking through old resources.

With the [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces), you can save all kinds of code snippets, and easily [find them](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/search-reuse#finding-saved-snippets) and [edit them](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/edit-update#how-to-edit-snippets) whenever, wherever, and however you need.

Let’s take a look at some examples:

---

| `SQL Query Templates` | An SQL query to retrieve data from a database with filter conditions. | Save time with databases by reusing common queries like inserts, updates, or data retrieval. |
| --- | --- | --- |
| `Boilerplate Code` | An HTML boilerplate template for creating new webpages. | Standardize project structure of different projects by starting with a clean and organized template. |
| --- | --- | --- |
| `Error-Handling Code Blocks` | A try-catch block template in JavaScript for handling API call errors. | Streamline error management by quickly inserting predefined error-handling patterns for more reliable code. |
| `Regex Patterns` | A regex pattern to validate email addresses. | Quickly implement validation in forms to make sure users correctly enter formatted data. |
| `Shell Scripts` | A shell script to automate server maintenance tasks like clearing logs and updating packages. | Automate system administration tasks on Unix / Linus servers so you spend less time on manual upkeep. |

---

Streamlining Development with Snippet Management
------------------------------------------------

The [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) connects you with your development environment, so you can focus on what matters—building great software—while empowering you with tools for efficient code reuse.

* **Improved Productivity:** Focus on solving new problems rather than resolving old ones.
* **Contextual Awareness:** Snippets enriched with metadata, descriptions, and links to relevant searches help you remember the origin, purpose, and ideal usage scenarios for each piece of code.
* **Code Standardization:** Sharing best practices and reusable components helps developers ensure uniform coding practices and conventions are available across different teams and projects.

By using the [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces), you can capture and manage these snippets to streamline daily tasks and enhance your workflow in several ways:

### Save & Organize

Users can save snippets by highlighting the desired code, right-clicking, and selecting the `Save to Pieces` option.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/MAIN_using_snippets/save_to_pieces.gif)

You can also do this without needing to open up the right-click menu—just use the `⌥+⌘+p` (macOS) or `ctrl+shift+p` (Windows/Linux) shortcut while your code is highlighted.

This guarantees that important pieces of code, such as code fragments, functions, configuration files, and command-line instructions, are always at hand—just when you need them.

Additionally, [each snippet is enriched with context](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/saving-snippets#what-happens-when-you-save-a-snippet), enabling you to insert well-documented, relevant snippets where they make sense within your projects.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/MAIN_using_snippets/snippet_enrichment.png)

Pieces can also intelligently identify and save snippets based on re-use patterns in your JetBrains workflow.

Whenever Pieces saves a snippet, you'll see a confirmation in the bottom right corner of your screen that says `Snippet Successfully Saved to Pieces`.

Your snippet is now saved in Pieces Drive with auto-generated metadata!

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/MAIN_using_snippets/opening_snippet.gif)

### Search & Reuse

You can [search your entire collection of saved Pieces code snippets](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/search-reuse) inside of your preferred JetBrains IDE, so the code you need is always on hand.

To do this, open the **Search Everywhere** window and switch to the `Pieces` tab by using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux).

Simply enter a search query, and any relating snippets will appear in the dropdown list—then you can hit **enter** and view your snippet (with all of it’s saved context) rendered in markdown directly inside your editor.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/MAIN_using_snippets/opening_pieces_command_pallete.gif)

### Edit & Update

You can easily [edit and update code snippets](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/edit-update#how-to-edit-snippets) directly from your IDE without opening a separate window or navigating to the Pieces for Developers Desktop App.

To do so, open the **Pieces** from the tool window on the left-hand side of your JetBrains IDE, which will reveal a list of saved snippets. You can then right-click a snippet, which opens that snippet up in a new window.

Simply make your changes and save the snippet using `⌘+s` (macOS) or `ctrl+s` (Windows/Linux).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/MAIN_using_snippets/editing_snippet.gif)

### Sharing

The **Sharing Snippets** feature allows you to [share code snippets with your team](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/sharing) or across projects directly from your JetBrains IDE.

To share a snippet, you can right-click on some highlighted code and hover over the **Pieces** option, then select `Share via Pieces Link`.

You can also share a snippet by right-clicking a snippet that’s listed in the left-hand toolbar window in any of your JetBrains IDEs and clicking `Share via Pieces Link`**.**

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/MAIN_using_snippets/share_via_pieces_link.gif)

Use Cases
---------

With Pieces for JetBrains Plugin, your snippets become a robust library of reusable code that you can organize, search, edit, and share across projects.

Here are some examples of how you can use them:

### Reusable Scheduling Functions

Imagine you’re frequently working on projects that involve scheduling tasks at regular intervals.

Instead of rewriting the same logic for each new project, you can [save an evergreen snippet to your Pieces repository.](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/saving-snippets#saving-snippets)

This allows you to reuse a well-crafted scheduling function across multiple applications that’s useful in a variety of scenarios:

```
Copypackage main

import (
	"fmt"
	"time"
)

// A reusable function to schedule tasks at a specified interval
func scheduleTask(interval time.Duration, task func()) {
	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			task()
		}
	}
}

```

### File System Monitoring

If you frequently work on projects that involve monitoring file system changes, you can [save a helpful snippet to your Pieces Drive](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/saving-snippets#saving-snippets) that does exactly that, using generic and reusable naming conventions:

```
Copypackage main

import (
	"fmt"
	"log"
	"github.com/fsnotify/fsnotify"
)

// A reusable function to monitor file system changes
func watchFileChanges(path string) {
	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		log.Fatal(err)
	}
	defer watcher.Close()

	err = watcher.Add(path)
	if err != nil {
		log.Fatal(err)
	}

	for {
		select {
		case event := <-watcher.Events:
			if event.Op&fsnotify.Write == fsnotify.Write {
				fmt.Println("Modified file:", event.Name)
			}
		case err := <-watcher.Errors:
			fmt.Println("Error:", err)
		}
	}
}

```

Additional Snippet Scenarios
----------------------------

Read up on some additional scenarios and use cases for Pieces Snippets and see how the [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) could benefit you and your workflow.

---

Project Initialization

Common Functions and Utilities

Configuration Management

Documentation and Learning

Command-Line Instructions

Bug Fixes and Patches

---

[Download the Pieces for JetBrains Plugin today!](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/get-started)

Updated on March 5, 2025, 9:13 PM UTC

---

[LLM Settings](/products/extensions-plugins/jetbrains/pieces-copilot/llm-settings)

[Saving Snippets](/products/extensions-plugins/jetbrains/pieces-drive/saving-snippets)

---

# Troubleshoot Pieces Plugin in JetBrains IDEs

# Troubleshoot Pieces Plugin in JetBrains IDEs

---

Troubleshooting
===============

Here are links to support resources, documentation, and our Discord channel for troubleshooting related to the [Pieces for JetBrains Plugin.](https://plugins.jetbrains.com/plugin/17328-pieces)

You can also find some specific troubleshooting steps for JCEF-related issues below.[​](https://docs.pieces.app/extensions-plugins/jetbrains#troubleshooting)

---

Pieces Copilot: Enabling JCEF Runtime and Downgrade[​](https://docs.pieces.app/extensions-plugins/jetbrains#pieces-copilot-enabling-jcef-runtime-and-downgrade)
---------------------------------------------------------------------------------------------------------------------------------------------------------------

The Pieces Copilot relies on the **JCEF (Java Chromium Embedded Framework)** runtime to function properly within JetBrains IDEs.

However, not all JetBrains IDEs, including certain versions of **Android Studio**, come pre-configured with a JCEF-compatible runtime, which can cause compatibility issues.

### Switching to a JCEF-Enabled Runtime

You’ll need to switch your Java runtime to **JCEF-enabled runtime** inside your global IDE settings.

This operation will require restarting your IDE, so make sure to save your work before doing so.

Follow these steps to switch your runtime:

1

### Open Action Search

Open the Action Search Dialog using `⌘+shift+a` (macOS) or `ctrl+shift+a` (Windows/Linux)

2

### Search for Boot Runtime

Search for `Choose Boot Java Runtime for the IDE…`

3

### Choose Latest JCEF Runtime

Select the **latest version** from the available JCEF-enabled runtimes

4

### Restart IDE

### Android Studio Hedgehog Compatibility Issues

If you’re using **Android Studio Hedgehog (2023.1.1)**, switching to a JCEF runtime may still result in GPU process errors, which can cause performance instability.

This is a [known issue with this release,](https://github.com/gitbito/bitoai/issues/174) affecting Pieces Copilot and other plugins relying on JCEF (such as the [Flutter inspector](https://github.com/flutter/flutter-intellij/issues/7119)).

### Recommended Workaround for Hedgehog Users

If you encounter GPU-related errors after switching to a JCEF runtime, consider **downgrading to Android Studio Giraffe (2022.3.1 Patch 4)**. This version offers better compatibility until a permanent fix is released for Hedgehog.

To downgrade Android Studio, follow these steps:

1. **Uninstall Hedgehog (2023.1.1)** from your device
2. **Download Giraffe (2022.3.1 Patch 4)** from the Android Studio archives, which you can find here
3. **Reinstall Android Studio** using the Giraffe version and switch the runtime to JCEF-enabled using the instructions above

Unable to Find the Pieces JetBrains Plugin in the JetBrains Marketplace[​](https://docs.pieces.app/extensions-plugins/jetbrains#i-cant-find-the-pieces-jetbrains-plugin-in-the-jetbrains-marketplace)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

If you can't find the Pieces for Developers JetBrains Plugin in the JetBrains Marketplace, you can navigate directly to it using [this link](https://plugins.jetbrains.com/plugin/17328-pieces--save-search-share--reuse-code-snippets).

Updating[​](https://docs.pieces.app/extensions-plugins/jetbrains#updating)
--------------------------------------------------------------------------

The Pieces for JetBrains Plugin will automatically update when a new version is available.

You can also manually update the plugin by going to your Plugins window using `⌘+shift+x` (macOS) or `ctrl+shift+x` (Windows/Linux).

Next, locate the Pieces for JetBrains Plugin (titled ‘Pieces’) and click the **update button.**

### Check PiecesOS Status

Check to make sure PiecesOS is running. PiecesOS must be running for the Pieces for JetBrains Plugin to work.

### Restart JetBrains After Updates

If you’ve recently installed or updated PiecesOS or the Pieces for JetBrains Plugin, restart the IDE.

Reloading the Pieces Copilot Chat Window
----------------------------------------

You may find that you need to restart or refresh the Pieces Copilot chat, especially if you’re using a cloud LLM and disconnect from WiFi.

These scenarios can occasionally cause the LLM to ‘hang’—which is to appear as if generating a response, but eventually timing out or entering into an infinite response loop, or experience other issues.

To do so, click the small `Reload Copilot` symbol above the Pieces Copilot chat, once open.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/troubleshooting/reload_copilot.png)

Updated on March 5, 2025, 9:13 PM UTC

---

[Configuration](/products/extensions-plugins/jetbrains/configuration)

[Sublime Text Plugin](/products/extensions-plugins/sublime)

---

# Edit and Update Code Snippets in JetBrains with Pieces

# Edit and Update Code Snippets in JetBrains with Pieces

---

Editing
=======

Editing snippets and saving your changes is simple with the [Pieces for JetBrains Plugin.](https://plugins.jetbrains.com/plugin/17328-pieces)

---

How to Edit Snippets
--------------------

There are several types of metadata you can edit when editing saved materials—as well as the saved piece of code itself.

To edit a snippet:

1

### Open the Pieces Drive

Open the **Pieces Drive** via the JetBrains sidebar

2

### Start Editing the Snippet

Locate a snippet you want to edit and select `Edit` from the quick menu or right click the snippet and select `Edit` from the menu

3

### Edit your Snippet

Make your changes, then save using `⌘+s` (macOS) or `ctrl+s` (Windows/Linux)

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/edit_and_update/editing_snippet.gif)

After saving, the editor will automatically return to the main snippet view, with your changes applied instantly.

Actions from the Pieces Drive View
----------------------------------

When you left-click on a saved snippet in the **Pieces Drive**, a tool menu with Pieces features will appear. Some options relate to the [Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot), while others handle [material management](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive) actions.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/edit_and_update/edit_selected_material.png)

### Pieces Copilot Actions

To access the material management view, choose a snippet from Pieces Drive. From here, you can select various Copilot-focused actions, as listed in the table below.

---

| `Add to Copilot Context` | Adds the snippet to the context of your existing Copilot Chat conversation. |
| --- | --- |
| `Ask Copilot` | Triggers the input modal and lets you type a prompt directly into the field without changing your active file view. |
| --- | --- |
| `Insert at Cursor` | Inserts the code snippet at the point of your cursor inside your active file. |
| `Shareable Links` | Shows shareable links that have been generated for that snippet, if applicable. |

---

### Material Management Actions

Below the Pieces Copilot actions, you can quickly change a snippet's name, description, classification, and other enriched metadata. Check the table below for details.

---

| `Annotations` | Add, adjust or delete annotations for the snippet. |
| --- | --- |
| `Related Links` | Add or remove links to the snippet’s metadata. |
| --- | --- |
| `Tags` | Add or remove tags to the snippet’s metadata. |
| `Reclassify` | Set your own custom snippet classification. |
| `Edit Selected Material` | Edit the content of the snippet. |
| `Rename` | Change the name (title) of the snippet as it appears in your repository of saved materials. |
| `Delete` | Delete the snippet. |

---

Additional Tools while Editing
------------------------------

*Layers upon layers of functionality*—that's the aim of all Pieces for Developers plugins and extensions.

When you edit a snippet (find it in the **Pieces Drive** menu and click `Edit`), you have access to all Pieces features, even though you're not in your main file view.

Instead, the `Edit` view *becomes* your main file, so you can [generate code comments, debug, add it to context, and more.](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot)

Updated on March 5, 2025, 9:13 PM UTC

---

[Search & Reuse](/products/extensions-plugins/jetbrains/pieces-drive/search-reuse)

[Sharing](/products/extensions-plugins/jetbrains/pieces-drive/sharing)

---

# Save Code Snippets in JetBrains with Pieces Plugin

# Save Code Snippets in JetBrains with Pieces Plugin

---

Saving
======

The [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) lets developers to save code snippets directly within their JetBrains IDEs—this ensures that our snippets are securely stored and easily accessible for future use.

---

Saving Snippets
---------------

There are several ways to save code with the Pieces for JetBrains plugin—through the right-click menu, hotkeys, or dragging and dropping code into the Pieces sidebar.

There’s also the fine-tuned saving feature called `Save to Pieces As` which lets you edit and adjust the automatically-generated metadata to your liking.

### via Right-Click Menu

You can save snippets by accessing the tool menu.

To save a snippet using this method:

1

### Choose your Snippet

Highlight the code you want to save

2

### Open Right-Click Menu

Right-click on the highlighted code and hover on the `Pieces` option

3

### Select Action

Select either `Save Current Selection to Pieces` or `Save File to Pieces`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/saving_snippets/save_to_pieces.gif)

This will trigger a success message in the bottom-right corner of your screen to let you know that the save was successful.

### via Keyboard Shortcut

Keyboard shortcuts are another easy way to save useful developer materials.

To save a snippet via keyboard shortcuts:

1

### Choose your Snippet

Highlight the code you want to save

2

### Save your Snippet

Use the command `⌥+⌘+p` (macOS) or `ctrl+alt+p` (Windows/Linux) to save the code as a snippet

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/saving_snippets/saved_to_pieces.png)

Saving a snippet via keyboard shortcut will trigger the same success modal in the bottom right-hand corner of your screen to let you know the save was successful.

### via Copilot Chat

When you start a conversation about a piece of code in your active file—or have any code block present in your Copilot Chat—you can save it to Pieces using the `Save to Pieces` button in the Copilot Chat view.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734039141656/abf74d05-29e7-4769-995c-2157939ff930.png?auto=compress,format&format=webp&q=75)

What’s Stored When You Save a Snippet
-------------------------------------

When you save a snippet to your Pieces Cloud, it’s more than just the code that gets stored.

The Pieces Copilot captures:

* `Type`: Categorizes the snippet (e.g., API call, function, class) with it’s code language.
* `Associated Tags`: Keywords associated with the snippet for easier searching.
* `Custom Description`: Specifies precisely which *lines* (in numerical form) the snippet is from, as well as the file from which it originated—very useful for mind-mapping.
* `Smart Description`: AI-generated descriptions that summarize the snippet’s purpose and function.
* `Suggested Searches`: Related searches that help you discover similar snippets.
* `Related Links`: References to documentation, code repositories, or other relevant resources.
* `Related People`: Associated collaborators or contributors.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/saving_snippets/snippet_enrichment.png)

Where Saved Snippets Live
-------------------------

Saved snippets are stored locally on your device, ensuring accessibility even when offline. This also means that any Pieces for Developers extension or plugin—or even the Pieces Desktop App—has constant, up-to-date access to your saved materials with Pieces Drive.

There are two ways to view your saved snippets—by viewing them in your [JetBrains IDE’s sidebar menu](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/search-reuse#via-pieces-sidebar), or with the [Search Everywhere](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/search-reuse#finding-saved-snippets) feature.

[Read more about how to find your saved snippets here.](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/search-reuse#finding-saved-snippets)

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Drive](/products/extensions-plugins/jetbrains/pieces-drive)

[Search & Reuse](/products/extensions-plugins/jetbrains/pieces-drive/search-reuse)

---

# Search and Reuse Code Snippets in JetBrains with Pieces

# Search and Reuse Code Snippets in JetBrains with Pieces

---

Searching
=========

You can find your saved code snippets easily with the [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) by utilizing a few different search methods.

---

Finding Saved Snippets
----------------------

To locate your snippets, open a file in VS Code and use one of two methods—searching with the **Pieces Drive** menu, or with **Search Everywhere**.

### via Pieces Drive

If you want to access your saved snippets directly within the JetBrains IDE, you can:

1

### Locate Pieces Drive

Open the `Pieces Drive` from the JetBrains sidebar

2

### Filter, Search, and Explore

Once the `Pieces Drive` is open, you have access to a wide range of options that allow you sort through your snippets

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/searching_snippets_drive.gif)

### via Search Everywhere

Whether you’re on macOS, Windows or Linux, all you need to do is double-press the `Shift` key twice to open up the Search Everywhere menu.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731514495750/53039e6c-1199-4879-8b92-40cc02a20a71.png?auto=compress,format&format=webp&q=75)

Once the menu is open, switch to the `Pieces` tab, then enter a search query to search your entire Pieces repository for any snippet you’ve saved.

After you’ve located a snippet, you can press `Enter` to open it in a new window and view the snippet’s code and saved context.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/searching_for_snippet.gif)

You can also press `shift+shift` again and search while remaining in the Search Everywhere menu’s `All` tab, but the `Pieces` tab is the de-facto home for seeing only saved snippet search results.

The default behavior for the **Search Everywhere** feature can be changed to whatever keymapping you prefer—l[earn more about this here.](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/commands)

Adding Filters to your Search
-----------------------------

You can filter saved snippets in the **Pieces Drive** by snippet tags, coding languages, and snippet titles.

To filter through your snippets:

1

### Open Pieces Drive

Open `Pieces Drive` via the JetBrains Sidebar

2

### Select the Search Bar

Select the search bar at the top of the **Pieces Drive**

3

### Choose the Filter Option

After clicking on the search bar, you’ll have the option to quick filter by `Titles`, `Annotations`, or `Content`

4

### Enter your Query

Using the filter, enter a search query in the search bar

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/filtering_snippets.gif)

When you’ve finished entering your filters, the Pieces Explorer will only display the snippets that match your filters. You can clear this by clicking the siphon icon with an `x` over it.

For any tags you don’t want to set, you can leave them blank by just pressing `return` (macOS) or `enter` (Windows/Linux).

Viewing and Reusing Saved Snippets
----------------------------------

[Saved snippets](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/saving-snippets) can be viewed alongside their saved metadata by opening up them up directly from the **Pieces Drive**—either by pressing `enter` on a highlighted snippet, or by double-clicking it.

This opens up the **snippet in markdown preview mode** in a separate window.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731947059537/0d388dec-e373-4bf4-9ec8-4a8b9dcc9246.png?auto=compress,format&format=webp&q=75)

From the opened markdown preview, you can then select `Copy to Clipboard` in the top-left corner of the snippet’s embedded code box or use the `⌘+c` (macOS) or `ctrl+c` (Windows/Linux) shortcut after selecting the section.

### via Right-Click Menu

The Pieces for JetBrains Plugin offers several actions when you right-click a snippet in the **Pieces Drive** menu.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/pieces_drive_right_click.png)

There are several material management and Pieces Copilot-related actions available in this menu. [Read more about them here](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/edit-update#actions-from-the-editing-view) or see the expanded table below.

### via Pieces Sidebar

You can view snippets by opening up the Pieces sidebar in your JetBrains IDE by clicking the **Pieces Drive** icon on the left-hand side of your screen.

Once in the sidebar, you can insert a snippet and place it exactly where you want it in your code by clicking `Insert at Cursor`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/copy_to_clipboard_drive.png)

You can also right-click a snippet and select `Copy` to copy it to the clipboard, allowing you to paste it anywhere you need.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/copy_to_clipboard_drive.png)

### Previewing Saved Snippets

While using the Pieces Drive sidebar, you can click on one of the snippets in the snippets list to view it’s code before selecting the snippet.

---

| `Add to Copilot Context` | `Ask Copilot` | `Copy` |
| --- | --- | --- |
| `Insert at Cursor` | `Shareable Links` | `Annotations` |
| --- | --- | --- |
| `Links` | `Tags` | `Reclassify` |
| `Edit` | `Rename` | `Delete` |

---

Real Time Snippet Streaming[​](https://docs.pieces.app/extensions-plugins/jetbrains#real-time-snippet-streaming)
----------------------------------------------------------------------------------------------------------------

Each product in the Pieces Suite uses [PiecesOS](https://beta.docs.pieces.app/products/core-dependencies/pieces-os) to get information about your snippets' context.

When you update a snippet in the [Pieces for Developers Desktop App](https://beta.docs.pieces.app/products/desktop-application)—such as a name or description, tags or any of the other metadata—those changes are also reflected in your **Pieces Drive** without refreshing.

If your snippets are not updating right away, see the [troubleshooting guide](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/troubleshooting) to details on how to refresh your snippet list.

Updated on March 5, 2025, 9:13 PM UTC

---

[Saving Snippets](/products/extensions-plugins/jetbrains/pieces-drive/saving-snippets)

[Edit & Update](/products/extensions-plugins/jetbrains/pieces-drive/edit-update)

---

# Share Code Snippets in JetBrains with Pieces Plugin

# Share Code Snippets in JetBrains with Pieces Plugin

---

Sharing Snippets
================

The `Share via Pieces Link` feature in the [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) is designed to streamline the process of sharing code snippets with colleagues, collaborates, or the broader development community.

This feature lets users generate shareable links for their saved code snippets directly from within their JetBrains IDE without needing to switch to the [Pieces for Developers Desktop App.](https://beta.docs.pieces.app/products/desktop-application)

---

What Information Gets Shared
----------------------------

When a snippet is saved to the Pieces Cloud, the code is [enriched with valuable information](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/saving-snippets#what-happens-when-you-save-a-snippet) such as related people, links, annotations, tags, and an automatically-generated description.

This information is visible to the right of the code block when the shared snippet is open in your browser:

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731623145740/ec60e89f-ac2f-4396-b6a8-ad94f57d9745.png?auto=compress,format&format=webp&q=75)

Want to see what a shared snippet looks like for yourself?

[Click here to check out a C# snippet](https://jimbobbennett.pieces.cloud/?p=419d42b485) that Pieces engineers used to launch a Confetti Cannon at a conference.

How to Share a Saved Snippet
----------------------------

You can share saved snippets in two ways: use keyboard shortcuts or right-click on a selection in your environment\*\*.\*\*

This link can easily be shared via email, Discord, Slack, or other platforms. The recipient can view the snippet **without needing to have a Pieces account.**

### via Right-Click Menu

Shareable Pieces links for your code snippets can also be generated by right-clicking a portion of selected code, hovering over the `Pieces` item in the pop-up menu, then selecting `Share via Pieces Link`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/sharing/share_via_pieces_link.png)

### via Keyboard Shortcut

You can share code snippets using the `⌘+L` (macOS) or `ctrl+L` (Windows/Linux). This is simply a shortcut to accessing the `Share via Pieces Link` tool in the right-click menu.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731514636367/cbe143a0-d518-4073-9d24-5047a88daf45.png?auto=compress,format&format=webp&q=75)

Generating Links for Existing Saved Snippets
--------------------------------------------

If you saved a material but didn't create a shareable link at the time, don't worry. You can still generate, copy, regenerate, or delete the existing link from the **Pieces Drive.**

1

### Open the Pieces Drive

Open the Pieces Drive via the Pieces Drive icon in the JetBrains sidebar

2

### Share the Snippet

After locating the snippet you’d like to share, right-click it and select `Generate Shareable Link` from the available actions

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/sharing/generate_shareable_link_drive.png)

3

### Wait for the Link and Copy

After generating the link, a new modal will appear. Wait for the snippet to be shared with an automatically generated link, or manually copy the link from the modal.

If you have generated a link for that snippet previously, the `More Actions` menu options will automatically adjust to include 3 new actions:

* `Open in Browser`: Opens the existing shareable link in your desired browser.
* `Refresh Link`: Regenerates the link—this is important if a snippet has been edited or updated, as a new link will be required to contain the new changes.
* `Revoke Link`: Revokes the shareable link so that anyone with the existing link to that snippet will be barred from future access.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/sharing/share_link_options.png)

Enriched Sharing Experience
---------------------------

When you `Share` a snippet, it’s not just the code that’s included. The snippet comes with additional metadata to provide context—[you can read more about that here.](#what-information-gets-shared)

* `Snippet Type`: Identify the language or framework, such as Python or React.
* `Tags`: Useful keywords for quick categorization.
* `Description`: A short summary of what the snippet does.
* `Related Links`: Helpful resources or documentation tied to the snippet.
* `Author Information`: A record of who created the snippet.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731514684555/707b0769-5b68-448c-811b-a44d2414a10d.png?auto=compress,format&format=webp?auto=compress,format&format=webp&q=75)

Sensitive Information Watchdog
------------------------------

The `Share via Pieces Link` feature does more than just allow you to effectively share snippets across your entire team and other communities, though.

You'll see a section titled **Sensitive Information:**

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731514684555/707b0769-5b68-448c-811b-a44d2414a10d.png?auto=compress,format&format=webp&q=75)

Our in-house ML model scans snippets for potentially sensitive information, like API keys or passwords, and alerts you so that you can make an informed decision before sharing the snippet.

The scan happens locally using on-device machine learning models **before the snippet is uploaded to the cloud** for sharing—that way, you can make an informed decision about sharing your code.

Updated on March 5, 2025, 9:13 PM UTC

---

[Edit & Update](/products/extensions-plugins/jetbrains/pieces-drive/edit-update)

[Commands](/products/extensions-plugins/jetbrains/commands)

---

# Pieces for JetBrains Plugin: Enhance Your Development Workflow

# Pieces for JetBrains Plugin: Enhance Your Development Workflow

Pieces for JetBrains Plugin
===========================

---

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732290822484/1ff85201-d524-4996-8e8d-9070db6ea380.png?auto=compress,format&format=webp&q=75)

---

The [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) enhances your development experience by seamlessly integrating the best features from the Pieces suite directly into JetBrains IDEs, making your favorite tools readily accessible within your workspace.

It provides developers with powerful tools for **managing code snippets, debugging, and refactoring** within their familiar development environment.

* [Pieces Copilot:](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot) Users can start generative AI conversations and add files and folders as context to get the solutions they need—including out-of-IDE context with the optional Long-Term Memory Engine (LTM-2).
* [Pieces Drive:](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive) Effortlessly save, locate, and share frequently used code snippets, making it easier to organize your work, quickly access important pieces of code, and collaborate effectively with others.
* [AI Quick Actions:](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot/chat#ai-quick-actions) Fully integrated and Pieces-powered AI Quick Actions tools are built right into your code to access Pieces Copilot explanation and documentation features even more easily.

![Getting Started](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1731096255269%2F3c7ccc7f-599c-4f37-b15d-cc23d2e0be60.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Getting Started

Follow [these instructions](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/get-started) to download and install the [Pieces for JetBrains plugin.](https://plugins.jetbrains.com/plugin/17328-pieces)

![Support](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1731096296705%2F4c1f6917-8818-4340-b604-836bb5b5b214.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Support

Explore [troubleshooting options](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/troubleshooting), navigate to our [support page](https://beta.docs.pieces.app/products/support), or [directly book a call](https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr) with our engineers.

All media (e.g., GIFs, screenshots) in this documentation were captured in **PyCharm CE.**

The Pieces for JetBrains Plugin verifies against the JetBrains IntelliJ Ultimate IDE, but works across the entire JetBrains suite of IDEs.

The minimum version required for the Pieces for JetBrains Plugin to work in your JetBrains IDE is **2023.1.**

If you’re not quite sure what version your JetBrains IDE is, [you can click here to find out how to check it.](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/configuration#checking-your-jetbrains-ide-version)

This plugin is currently available for use in any JetBrains IDE, such as:

---

* [IntelliJ IDEA](https://www.jetbrains.com/idea/)
* [WebStorm](https://www.jetbrains.com/webstorm/)
* [PhpStorm](https://www.jetbrains.com/phpstorm/)
* [PyCharm](https://www.jetbrains.com/pycharm/)
* [CLion](https://www.jetbrains.com/clion/)
* [GoLand](https://www.jetbrains.com/go/)
* [Rider](https://www.jetbrains.com/rider/)
* [RubyMine](https://www.jetbrains.com/ruby/)
* [DataGrip](https://www.jetbrains.com/datagrip/)
* [AppCode](https://www.jetbrains.com/objc/)
* [Android Studio](https://developer.android.com/studio)

---

The Pieces for JetBrains plugin provides developers with **two pillars of functionality**:

### AI Assistance with Pieces Copilot

Pieces Copilot offers [AI-assisted features](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot) like starting contextualized [generative AI conversations](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot/chat), [adding code comments](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot/documenting-code), and [troubleshooting code](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/troubleshooting).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/jetbrains_plugin/right_click_hover_over_save_to_pieces.png)

### Material Management with Pieces Drive

Pieces Drive enables you to [save, edit, search, and share useful code snippets](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive) to boost your workflow productivity and streamline collaboration with others.

These features let developers store their favorite code in a personal, easy-to-access library. They can quickly review past work, find related authors and links with the extra details saved with each piece, and more.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/jetbrains_plugin/pieces_drive_right_click.png)

Using Pieces Copilot
--------------------

You can perform **several powerful** **actions** with the Pieces Copilot inside of your JetBrains IDE, like starting a conversation directly inside the editor with your LLM of choice about a specific code snippet, fragment, folder, or terminal output.

This is the backbone of the Pieces Copilot experience—the **Ask Copilot** feature.

Pieces for Developers has recently rolled out its new **AI Quick Actions** feature—similar to VS Code’s Codelens—which allows for select quick actions powered by Pieces Copilot, namely `Pieces: Explain` and `Pieces: Comment`.

The Quick Action tools—`Pieces: Explain` and `Pieces: Comment`—can be found above the function nearest to your cursor.

Using either of these AI Quick Actions triggers the Pieces Copilot conversation window, where you can find the output from the LLM of your choice.

These AI Quick Action tools live above certain pieces of code, like functions, so that you always have easy access to them.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/jetbrains_plugin/lightbulb_fix.png)

Managing Code Snippets
----------------------

When you save code to your personal repository, Pieces **automatically enriches the snippet** with AI-generated tags, titles, related authors and links, and a description.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/jetbrains_plugin/right_click_menu.png)

Save code snippets by right-clicking a selection of code and choosing the `Save Current Selection to Pieces` option from the pop-up window. Alternatively, right-click and hover over the `Pieces` item to access several other snippet-related functions.

* + `Save Current Selection / File to Pieces`: Right-click a selected block of code or your entire active file and [save it to your Pieces Drive with AI-enriched metadata](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/saving-snippets#whats-stored-when-you-save-a-snippet), ensuring easy access to frequently used snippets.
  + `Save File to Pieces`: Save an entire file to Pieces Drive for future reference.
  + `Ask Copilot About Selection`: Ask Pieces Copilot to generate suggestions or explain the selection with a query.
  + `Ask Copilot About File`: Get AI-powered insights or suggestions based on the file's content.
  + `Modify Selection with Copilot`: Adjust and refine selected code using AI suggestions.
  + `Explain Selection with Copilot`: Receive an explanation for the selected code from the AI assistant.
  + `Comment Selection with Copilot`: Auto-generate comments for the selected code snippet using AI.
  + `Share via Pieces Link`: Generate a shareable link for your snippet, allowing collaboration even with those who don’t have a Pieces account.
  + `Search Pieces Drive`: Search for previously saved snippets in Pieces.
  + `Pieces Quick Search`: Quickly find and retrieve relevant snippets saved in Pieces.

### **Referencing & Reusing**

The [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) provides robust search tools to help you quickly find and access your saved snippets.

You can easily find saved snippets in your JetBrains IDE by double-tapping the shift key and then selecting the `Pieces` window.

Simply enter a query, and any snippet you’ve saved that matches the query will be returned in the drop-down list.

Once you’ve located the snippet you want, pressing enter or clicking the snippet title will open it inside your JetBrains IDE.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/jetbrains_plugin/searching_for_snippet.gif)

---

Download the Plugin
-------------------

Follow the [installation instructions](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/get-started) to get started with the Pieces for JetBrains Plugin.

Updated on March 5, 2025, 9:13 PM UTC

---

[Troubleshooting](/products/core-dependencies/ollama/troubleshooting)

[Get Started](/products/extensions-plugins/jetbrains/get-started)

---

# JupyterLab Extension

# JupyterLab Extension

JupyterLab Extension
====================

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729000547466/593f4e3f-ff9c-452e-b212-69be1e676f76.png?auto=compress,format&format=webp&q=75)

V2 Documentation for the Pieces for Developers JupyterLabs Extension is under construction 🚧 ... In the meantime, you can find current documentation for the JupyterLabs Extension [here.](https://docs.pieces.app/extensions-plugins/jupyterlab)

Updated on March 5, 2025, 9:13 PM UTC

---

[Azure Data Studio](/products/extensions-plugins/azure-data-studio)

[Neovim Plugin](/products/extensions-plugins/neovim-plugin)

---

# Neovim Plugin

# Neovim Plugin

Neovim Plugin
=============

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729000694787/79790597-fea0-42e0-9092-cf2676aee243.png?auto=compress,format&format=webp&q=75)

V2 Documentation for the Pieces for Developers Neovim Plugin is under construction 🚧 ... In the meantime, you can find current documentation for the Neovim Plugin [here.](https://docs.pieces.app/extensions-plugins/neovim/)

Updated on March 5, 2025, 9:13 PM UTC

---

[JupyterLab Extension](/products/extensions-plugins/jupyterlab)

[Web Extension](/products/extensions-plugins/web-extension)

---

# Commands in Pieces for Sublime Text

# Commands in Pieces for Sublime Text

---

Pieces for Sublime Text Plugin Commands
=======================================

Below is a table containing every command available to use in the [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/commands/commands_opened_command_palette_10182024.png)

---

Command Table
-------------

You can easily access these commands through the **Command Palette** using the shortcuts—`⌘+shift+p` (macOS) and `ctrl+shift+p` (Windows/Linux).

Simply type `Pieces:` followed by the desired command to filter and locate it in the list.

---

| **Pieces: About** | View plugin details and PiecesOS version. |
| --- | --- |
| **Pieces: Copilot** | Create conversations, view past ones, or ask questions. |
| --- | --- |
| **Pieces: Login** | Opens the PiecesOS login page in your browser. |
| **Pieces: Search** | Perform neural, full-text, or fuzzy search. |
| **Pieces: Get Support** | Access support options: file issues, join Discord, or visit the support site. |
| **Pieces: Launch Onboarding** | Opens the onboarding file post-installation. |
| **Pieces: Reload Plugin** | Reloads the plugin for troubleshooting. |
| **Pieces: Connect Personal Cloud** | Connect to your Pieces cloud account. |
| **Pieces: Disconnect Personal Cloud** | Disconnect from your Pieces cloud account. |
| **Pieces: Export Pieces Material** | Export a saved snippet via dropdown selection. |
| **Pieces: Import Sublime Snippet** | Import Sublime snippets into Pieces materials. |
| **Pieces: Open Pieces** | Launches PiecesOS (required for the plugin). |
| **Pieces: Open Pieces Settings** | Configure settings, LLM models, and snippet autocomplete. |
| **Pieces: Open Saved Material** | Browse and manage saved snippets with metadata and editing tools. |
| **Pieces: Ask About The Current File** | Ask questions about the file you're working on. |
| **Pieces: Ask About The Current Project** | Inquire about your project files for better insights. |

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Sharing](/products/extensions-plugins/sublime/using-snippets/sharing)

[Configuration](/products/extensions-plugins/sublime/configuration)

---

# Configuring Pieces Extension in Sublime Text

# Configuring Pieces Extension in Sublime Text

---

Configuration
=============

Read the guide below to configure the [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces) to work efficiently in your workflow and adapt to your preferences.

---

Supported LLMs
--------------

We constantly update and configure our plugins and extensions, like the Pieces for Sublime Text Plugin, to [work with the latest LLMs.](https://github.com/pieces-app/support/discussions/121)

Currently, the Pieces for Sublime Text Plugin supports 16 different models:

---

| (Gemini) Chat Model | (PaLM2) Chat Model | CodeLlama GPU Chat Model |
| --- | --- | --- |
| Codey (PaLM2) Chat Model | GPT-3.5-turbo Chat Model | GPT-3.5-turbo-16k Chat Model |
| --- | --- | --- |
| GPT-4 Chat Model | GPT-4 Preview Chat Model | GPT-4o Chat Model |
| Llama2 CPU Chat Model | Llama2 GPU Chat Model | Mixtral GPU Chat Model |
| NeuralHermes-2.5-Mistral-7B CPU / GPU Chat Model | Phi-2 GPU Chat Model | Phi-2 CPU Chat Model |

---

[Click here](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot/llm-settings#how-to-configure-your-llm-runtime) for documentation on how to switch the LLM utilized by the Pieces for Sublime Text Plugin from within your IDE.

Opening Pieces Settings
-----------------------

To open Pieces settings inside of the Pieces for Sublime Text Plugin, you can use `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux) to open the command palette.

Then, enter `Pieces: Open Pieces Settings`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/configuration/opening_pieces_Setting.gif)

Login / Logout
--------------

Use the `Pieces: Login` or `Pieces: Logout` command in your command palette to log in and out of your Pieces account.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733970751972/4255a16f-7b9e-44fb-b912-810fbfc80d51.png?auto=compress,format&format=webp&q=75)

---

Connect / Disconnect your Personal Pieces Cloud
-----------------------------------------------

You can connect and disconnect from your personal cloud using `Pieces: Connect Personal Cloud` or `Pieces: Disconnect Personal Cloud` command in your command palette.

> screenshot of Connect to Pieces Cloud command

Configurable Settings
---------------------

The Pieces for Sublime Text Plugin offers customizable settings to tailor your experience. These options let you configure the connection, language model, startup behavior, and code autocompletion. Here's an overview of the key settings:

---

| `host` | Specifies the address where the plugin should connect to a local service or server. |
| --- | --- |
| `model` | Determines which large language model to use for all Pieces Pilot functionality. |
| --- | --- |
| `auto_start_pieces_os` | Lets you decide whether or not to open PiecesOS automatically on startup. |
| `snippet.autocomplete` | Decide whether or not to enable auto-completion of code via suggest snippets from your repository. |

---

To change settings, you need to copy and paste the contents of the default settings file into the empty window on the right side, which you can find below:

```
Copy{
	"host": "",
	"model":"GPT-4o Chat Model",
			//  "GPT-4o Chat Model", 
			//  "GPT-4 Chat Model", 
			//  "CodeLlama GPU Chat Model",
			//  "GPT-3.5-turbo Chat Model",
			//  "Phi-2 CPU Chat Model", 
			//  "GPT-4 Preview Chat Model", 
			//  "Codey (PaLM2) Chat Model", 
			//  "Llama2 GPU Chat Model", 
			//  "(Gemini) Chat Model", 
			//  "GPT-3.5-turbo-16k Chat Model", 
			//  "Phi-2 GPU Chat Model", 
			//  "Mixtral GPU Chat Model", 
			//  "NeuralHermes-2.5-Mistral-7B CPU Chat Model", 
			//  "NeuralHermes-2.5-Mistral-7B GPU Chat Model", 
			//  "(PaLM2) Chat Model", 
			//  "Llama2 CPU Chat Model"
	"auto_start_pieces_os":false, // Open Pieces OS automatically on startup
	"snippet.autocomplete":true, // auto complete via Pieces saved snippets or not
	"syntax" : {} // Langauge extension : syntax path
}

```

---

### Pieces Auto-Launch on Startup

You can choose whether or not PiecesOS starts immediately on the launch of the Sublime text editor by setting the parameters to `true` or `false.`

### Snippet Auto-Complete

Similarly, adjust the parameters to `true` or `false` to enable auto-completion of code via snippets to speed up your coding progress.

If you have Pieces snippets saved that are relevant to the code you're writing, you'll get automatic completion for that specific language.

### Reloading the Plugin

To reload the plugin, enter the command palette with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows / Linux) and type `Pieces: Reload Plugin`.

For additional support resources, [check out our troubleshooting guide.](https://beta.docs.pieces.app/products/extensions-plugins/sublime/troubleshooting)

Saving Your Settings
--------------------

Once you've copied the contents of the .JSON object and edited them to your preferences, simply save the file, reload the plugin, and restart Sublime for your changes to take effect.

You can save the .JSON file with `⌘+s` (macOS) or `ctrl+s` (Windows / Linux). You do not need to use **Save As,** as the file is already existing and this is simply updating the settings file, which comes with the Pieces for Sublime Text package.

Updated on March 5, 2025, 9:13 PM UTC

---

[Commands](/products/extensions-plugins/sublime/commands)

[Troubleshooting](/products/extensions-plugins/sublime/troubleshooting)

---

# Getting Started with Pieces for Sublime

# Getting Started with Pieces for Sublime

---

Get Started
===========

Follow the steps below to install and use the [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces).

---

Prerequisites
-------------

Before you begin, make sure you have:

* **PiecesOS:** The core engine that powers all Pieces extensions. [Learn more about PiecesOS.](https://docs.pieces.app/installation-getting-started/pieces-os)
* **Sublime Text:** Make sure you’ve installed Sublime Text on your development machine.

You must have [**PiecesOS**](https://docs.pieces.app/installation-getting-started/what-am-i-installing) to use the Pieces for Sublime Plugin. We also recommend downloading the Pieces for Developers Desktop App.

---

Installing the Pieces for Sublime Text Plugin
---------------------------------------------

1. **Download Package Control:** Visit the [Package Control installation page](https://packagecontrol.io/installation) and follow the instructions to install Package Control in Sublime Text

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733962285453/d3ca8a87-0089-47ba-98eb-6de28622b43e.png?auto=compress,format&format=webp&q=75)

2. **Open Command Palette:** Use the shortcut `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux) to open the command palette
3. **Install Pieces Plugin:** Using the command palette, search for `Package Control: Install Package`, then search for `Pieces` and select it
4. **Restart Sublime:** After installing the Pieces Plugin, restart the Sublime editor to ensure all the dependencies are loaded properly

### Setting up PiecesOS

[PiecesOS](https://docs.pieces.app/installation-getting-started/pieces-os) is required for the [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces) to work.

If you haven’t installed it yet, click the buttons to download PiecesOS via the recommended method, or follow the alternative steps below.

Windows

macOS (Apple Silicon)

macOS (Intel)

Linux

**Recommended Installation Method**

[Click here to download the Pieces Suite Installer for Windows.](https://builds.pieces.app/stages/production/pieces_suite_windows/appinstaller/download?download=true&product=DOCUMENTATION_WEBSITE)

**Alternative Installation Methods**

Or, you can install PiecesOS using these alternative methods—just click the link on the package that’s right for your system.

1. **WinGet**

Paste the following command into your terminal to install the Pieces Suite via WinGet: `winget install "Pieces OS"`

2. **Standalone .EXEs**

   * [PiecesOS .EXE (Standalone Windows)](https://builds.pieces.app/stages/production/os_server/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE)
   * [Pieces for Developers Desktop App EXE (Standalone Windows)](https://builds.pieces.app/stages/production/pieces_for_x/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE)
3. **App Installer**

   * [PiecesOS Appinstaller (Standalone Windows)](https://builds.pieces.app/stages/production/appinstaller/os_server.appinstaller?download=true&product=DOCUMENTATION_WEBSITE)
   * [Pieces for Developers Desktop App Appinstaller (Standalone Windows)](https://builds.pieces.app/stages/production/appinstaller/pieces_for_x.appinstaller?download=true&product=DOCUMENTATION_WEBSITE)

---

For enhanced security and better system integration, we recommend installing the MSIX package over the InnoSetup (.exe) installer. The MSIX package operates in a containerized environment, providing additional security benefits.

---

Updating
--------

The Pieces for Sublime Text Plugin will automatically update when a new version is available via `Package Control`.

When the plugin updates, you’ll see a small success message pop-up in the center of your Sublime Text Editor.

**Update notifications** cover updates for both the Pieces for Sublime Text and PiecesOS.

You can also manually update the plugin by opening your Command window in Sublime Text by using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux), locating the `Package Control: Upgrade Package`, and clicking the option. This will auto-update the Pieces for Sublime Text Plugin.

Disconnect from Pieces Cloud
----------------------------

Connecting to the Pieces Cloud is optional. However, it **provides additional features** like **data backups, shareable links, and more.** You can enjoy the main functionalities of Pieces without an account.

Disconnecting from the Pieces Cloud logs you out of your Pieces account.

To disconnect from the Pieces Cloud:

1. Open the command palette in VS Code
2. Select `Pieces: Disconnect from Pieces Cloud`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/getting_started/disconnect_from_pieces_cloud_sublime.gif)

Uninstalling
------------

To uninstall the Pieces for Sublime Text Plugin, open your Command window in Sublime Text by using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux), locating the `Package Control: Remove Package`, looking for the option `Pieces` and clicking the option.

In order for Pieces to be completely uninstalled from the Sublime Text, you'll need to restart the IDE.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/getting_started/uninstalling_pieces_sublime_plugin.gif)

Updated on March 5, 2025, 9:13 PM UTC

---

[Sublime Text Plugin](/products/extensions-plugins/sublime)

[Pieces Copilot](/products/extensions-plugins/sublime/pieces-copilot)

---

# Chat with Pieces Copilot in Sublime Text

# Chat with Pieces Copilot in Sublime Text

---

Generative AI Conversations
===========================

The [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces) provides versatile tools for leveraging generative AI to gain insights, debug, and optimize code seamlessly within your editor.

---

Accessing Copilot Chat in Sublime Text
--------------------------------------

There are two primary ways to access Generative AI Conversations with the Pieces Copilot.

### via Right-Click Menu

1. **Select Code and Right-Click in the Editor:** Highlight any code segment and right-click to open the Tool Menu.
2. **Select a Relevant Action:** Choose `Start Conversation About The Current Selection` to open a new conversation.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733964875773/f499b483-91ba-451d-aa4f-86444f901a6d.png?auto=compress,format&format=webp&q=75)

### via Command Palette

Open the command palette with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux), and enter commands such as:

* `Pieces: Ask Copilot About Active File`: Provides insights for the current file open in your Sublime Text editor.

* `Pieces: Ask About The Current Project`: Offers context-aware assistance across your entire project.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733965846464/9d871fcd-c401-4235-bdb2-e971e0809335.png?auto=compress,format&format=webp&q=75)

Read more about [what commands are available in the Pieces for Sublime Text Plugin](https://beta.docs.pieces.app/products/extensions-plugins/sublime/commands).

Contextualized Chats
--------------------

There are 3 levels of contextual awareness you can use when starting a conversation or adding code to an existing Copilot Chat with the Pieces Copilot.

### Pieces: Start Conversation About The Current Selection

One of the simplest ways to ask the Pieces Copilot a question about a specific class, method, function, or script is to use the right-click menu `Start Conversation About The Current Selection` option.

This feature makes it incredibly convenient for users to get quick insights or answers to specific questions about their code.

Once selected, you can enter your prompt in the text input field at the bottom of the Sublime editor's view and press enter.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/chat/start_conversation_abou_the_current_selection_sublime.gif)

### Pieces: Ask About The Current File

The `Pieces: Ask About The Current File` feature focuses on providing insights and assistance with the specific file you're working on.

To use this feature, open up the command palette using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux) and enter `Pieces: Ask About The Current File`, then enter your question into the input field.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733965582024/558aef1b-5c14-4613-a7b2-76686c5fa823.png?auto=compress,format&format=webp&q=75)

After running the initial command, you can then query the LLM, which will use the file as context to generate accurate and useful responses.

This is ideal for developers who need a comprehensive understanding of a file, such as its dependencies, functions, and classes.

### Pieces: Ask About The Current Project

Similar to the file-level command, the `Pieces: Ask About The Current Project` command lets developers understand every corner of an entire project.

Open the command palette with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux) and enter `Pieces: Ask About The Current Project`, then type in your question.

This feature can also highlight errors and suggest improvements on a wider scale, but its main benefit and use case is to help developers navigate their codebase by utilizing the Pieces context-awareness engine to provide relevant and accurate information with even the most specific of prompts.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733965827869/24c0facf-d574-4b57-99e6-c5a48f2eb8ab.png?auto=compress,format&format=webp&q=75)

Adding Context to Copilot Chats
-------------------------------

There are a number of individual items you can add as context to a chat, namely **Files, Folders,** and **Snippets**.

This flexibility is especially useful when reference materials are not directly accessible from Sublime Text or when you want to **compartmentalize context and minimize overlap** by keeping files or folders from other projects separate from your active file's workflow.

To do this, you can select the **Message Icon** on the left side of any of your chats in the Copilot Chat window, openable from the command palette or the right-click menu.

Click the **Message Icon** then add whatever context items you need.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/chat/adding_context_to_copilot_chats.gif)

Improving Code Consistency & Standardization
--------------------------------------------

The Pieces Copilot helps improve code quality by identifying inconsistencies and providing actionable suggestions for standardization.

### Naming Inconsistencies

If functions across your workspace use inconsistent naming patterns (e.g., `authenticateUser` in `authHandler.go` vs. `retrieveUserProfile` in `userHandler.go`), Pieces Copilot can suggest adopting a standardized naming convention for better readability and maintainability, like this:

```
Copy// authHandler.go
func authenticateUser(ctx context.Context, credentials Credentials) (User, error) {
    if credentials.Username == "" || credentials.Password == "" {
        return User{}, errors.New("missing credentials")
    }
}

```

### Inconsistent Error Handling

If error-handling strategies differ across files (e.g., structured errors in `authService.go` vs. inconsistent handling in `userService.go`), Pieces Copilot can help unify the approach:

```
Copy// authService.go
func LoginUser(credentials Credentials) (string, error) {
    token, err := authenticate(credentials)
    if err != nil {
        return "", fmt.Errorf("login failed: %w", err)
    }
    return token, nil
}

```

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Copilot](/products/extensions-plugins/sublime/pieces-copilot)

[Documenting Code](/products/extensions-plugins/sublime/pieces-copilot/documenting-code)

---

# Debugging Errors with Pieces Copilot

# Debugging Errors with Pieces Copilot

---

Debugging Errors
================

The Pieces Copilot in the [Pieces for Sublime Text](https://packagecontrol.io/packages/Pieces) plugin provides AI-powered debugging, making it easier to identify and resolve code issues directly in Sublime Text. This feature accelerates troubleshooting while offering valuable learning opportunities through the AI's suggested fixes.

---

Using the Debugging Tool
------------------------

Quickly identify and resolve issues in your code with the `Fix A Bug` option from Pieces Copilot.

To use the debugging tool:

1. Select a portion of problematic code
2. Right-click to open the context menu
3. Hover over `Pieces`
4. Then, hover over `Ask Copilot`
5. Lastly, select `Fix A Bug` from the menu

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/debugging_errors/pieces_AI_copilot_debugging_errors_1072024.png)

The debugging function within the [Pieces Copilot uses the code's context](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot/chat#pieces-ask-about-the-current-file) and semantics to find and rectify issues.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/debugging_errors/copilot_fix_a_bug.gif)

If you encounter a particular error when compiling your code, you can also paste the error code in the **text input field** at the bottom of Sublime for added specificity.

Pieces Copilot will utilize whichever LLM you have currently active and analyze the issue, then open a Copilot Chat with suggestions, regenerate the code, and provide the option to insert it at the cursor mark—all with fresh code comments.

Why Debug with Pieces Copilot?
------------------------------

Debugging with Pieces Copilot **streamlines error resolution** by providing AI-driven insights in a seamless experience that integrates naturally into your Sublime Text workflow.

It saves time by **eliminating the need to scour the web or sift through lengthy documentation**, ensuring your workflow remains focused and distraction-free.

Moreover, every suggested fix comes with a clear explanation, helping you not only **resolve issues** but also **enhance your coding skills** along the way.

Updated on March 5, 2025, 9:13 PM UTC

---

[Documenting Code](/products/extensions-plugins/sublime/pieces-copilot/documenting-code)

[Refactoring](/products/extensions-plugins/sublime/pieces-copilot/refactoring)

---

# Documenting Code with Pieces Copilot

# Documenting Code with Pieces Copilot

---

Code Comments
=============

With the Pieces Copilot in the [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces), you can effortlessly generate comments that capture the functionality and intent of your code—an essential yet often overlooked aspect of high-quality documentation.

---

Commenting Code Selections with Pieces Copilot
----------------------------------------------

Pieces Copilot can review and **comment on any selected portion of your code**, providing line-by-line explanations to ensure it is not only readable but also easy for others to understand.

### via Right-Click Menu

To get started:

1. Select a portion of the code
2. Right-click
3. Hover over `Ask Copilot`
4. Select `Add Code Comments` from the tertiary menu

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733966202157/60ff1151-b993-4044-83f0-a183be2c1068.png?auto=compress,format&format=webp&q=75)

Pieces Copilot will then generate clear, contextual comments for the selected code and give you the option to `Accept` or `Reject` the suggested comments.

This is particularly useful for maintaining code readability and ensuring your codebase is well-documented.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/documenting_code/adding_code_comments.gif)

Why Use Code Comments?
----------------------

Code comments are essential for **maintaining a clean and well-documented codebase.**

They **offer context**, enabling reviewers to focus on functionality while **making complex logic transparent**, ensuring the code is easier to follow and maintain.

Good documentation enhances code readability and speeds up onboarding for those new to the codebase. This dual benefit supports both **current and future development**, creating a solid **foundation for upgrades and iterations.**

That’s what makes this feature so impactful. Need a few hundred lines of code documented? No problem—just use `Add Code Comments`.

Updated on March 5, 2025, 9:13 PM UTC

---

[Chat](/products/extensions-plugins/sublime/pieces-copilot/chat)

[Debugging Errors](/products/extensions-plugins/sublime/pieces-copilot/debugging-errors)

---

# Configuring LLM Settings in Pieces Copilot

# Configuring LLM Settings in Pieces Copilot

---

Switching LLMs
==============

The [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces) currently supports 16 different LLM models (which includes both cloud-based and local models).

---

Available LLMs
--------------

We constantly update and configure our plugins and extensions, like the Sublime Text Plugin, to [work with the latest LLMs](https://github.com/pieces-app/support/discussions/121).

See the list of available models below.

### Cloud LLMs

The cloud-based models integrate effortlessly with the Pieces Copilot, offering high-performance and real-time responses to your queries.

---

| GPT-4o | GPT-4 | GPT-4 Preview |
| --- | --- | --- |
| GPT-3.5-turbo | GPT-3.5-turbo-16k | Codey / (PaLM2) |
| --- | --- | --- |
| Mixtral GPU | Phi-2 GPU | (Gemini) |

---

### On-Device LLMs

We also support on-device LLMs for developers prioritizing privacy, security, or offline functionality.

---

| CodeLlama GPU | Llama2 GPU | Llama2 |
| --- | --- | --- |
| Phi-2 CPU | NeuralHermes-2.5-Mistral-7B CPU | NeuralHermes-2.5-Mistral-7B GPU |
| --- | --- | --- |

---

How To Configure Your LLM Runtime
---------------------------------

Switching the LLM model in the Pieces for Sublime Text Plugin is straightforward, allowing you to choose the model that best fits your needs.

To get started, use the hotkey `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows / Linux) and enter `Pieces: Open Pieces Settings`.

This will open **Pieces.sublime-settings**, where you can change the model used for AI functionality and adjust Pieces settings within the Pieces for Sublime Text Plugin.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/llm_settings/pieces_AI_copilot_LLM_settings_9252024.png)

### Modifying the Settings JSON Object

Copy and paste the contents of the entire .JSON object from the left window to the right window

Once you’re in the right window, you can edit `"model":"GPT-3.5-turbo Chat Model",` to reflect any of the supported LLMs, which are commented out in the list below.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733967526241/e4bc32b5-3cd1-4018-a843-25967f89fef6.png?auto=compress,format&format=webp&q=75)

Check out our configuration page for [details on other adjustable settings.](https://beta.docs.pieces.app/products/extensions-plugins/sublime/configuration)

Updated on March 5, 2025, 9:13 PM UTC

---

[Refactoring](/products/extensions-plugins/sublime/pieces-copilot/refactoring)

[Pieces Drive](/products/extensions-plugins/sublime/using-snippets)

---

# Refactoring Code Using Pieces Copilot

# Refactoring Code Using Pieces Copilot

---

Refactoring Code
================

Refactoring is crucial for enhancing your code's structure and maintainability without altering its behavior. The [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces) streamlines this process with Pieces Copilot’s **Modify** feature.

---

Modifying Your Code with Pieces Copilot
---------------------------------------

The **Modify** function in Pieces Copilot allows you to enhance your selected code by making adjustments such as improving error handling, renaming functions, or adding new functionality.

In Sublime Text, you can modify your code via the following steps:

### Via Right-Click Menu

1. Select the portion of code you want to modify.
2. Right-click to open the context menu.
3. Hover over **Ask Copilot** and select the **Modify** option.

For example, let’s say you want to add a missing positional argument to the `add_user` function. Simply follow these steps, and Pieces Copilot will efficiently apply the necessary changes.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/refactoring/modify_a_code_selection.gif)

Try using the `Modify` function to implement error handling, update deprecated methods, add logging to several functions, or refactor variable names for consistency.

Updated on March 5, 2025, 9:13 PM UTC

---

[Debugging Errors](/products/extensions-plugins/sublime/pieces-copilot/debugging-errors)

[LLM Settings](/products/extensions-plugins/sublime/pieces-copilot/llm-settings)

---

# Pieces Copilot in Sublime Text

# Pieces Copilot in Sublime Text

---

Pieces Copilot
==============

The [Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot) in the [Pieces for Sublime Text](https://packagecontrol.io/packages/Pieces) brings the power of AI directly into your coding workflow.

Designed to be more than just a code assistant, the Copilot enhances productivity by helping you debug code, ask coding questions, generate and update code, and insert relevant comments—all without leaving Sublime.

---

Generative AI Conversations
---------------------------

Unsure how to implement a specific piece of functionality or stuck on a bug?

You can [ask the Pieces Copilot coding-related questions](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot/chat) right within Sublime, and it will provide context-aware responses to help you move forward.

You can also ask the Pieces Copilot a question that’s [grounded in the context of a specific file, or even an entire project](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot/chat#pieces-ask-about-the-current-file)—or you can add files as context to a LLM conversation on an as-needed basis.

One way to take advantage of the context awareness within the Pieces Copilot conversations is to add a particular file or series of files as context. You can then pass both the exception and any applicable stack traces received.

This gives the Pieces Copilot the most information possible to help you resolve the issue(s).

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733963468023/508efe59-fa48-4b81-b2e5-b252ae9f0703.png?auto=compress,format&format=webp&q=75)

Adding Conversation Context
---------------------------

Contextual awareness enables the Pieces Copilot to provide solutions that are directly relevant to the challenges you're facing and your code.

To use this feature, include details such as error messages or [file context](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot/chat#contextualized-chats) to receive more accurate and targeted responses from the LLM conversation.

You can also enhance the effectiveness of your queries by [adding multiple files or related items](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot/chat#adding-context-to-copilot-chats) as context, giving the Pieces Copilot a complete view to help you troubleshoot effectively.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/pieces_ai_copilot_PARENT_PAGE/adding_conversation_context_sublime.gif)

Pieces Copilot Tools
--------------------

Explore powerful AI-driven tools and features with the Pieces for Sublime Text Plugin.

### Documenting Code

Keeping well-documented code is an often overlooked aspect of programming, but it’s *very* important—that’s why the Pieces Copilot in Sublime Text lets you [use AI to generate intelligent and context-aware code comments.](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot/documenting-code)

To add documentation and comments to code:

1. Select the code you’d like to comment
2. Right click on the selection
3. Hover over `Pieces`
4. Then, hover over `Ask Copilot`
5. Lastly, Click on `Add Code Comments`

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733964735762/d4b0809a-44c3-4f18-9904-afe342a74fe5.png?auto=compress,format&format=webp&q=75)

This opens a pop-up near the selected code with an option to Accept or Reject the changes that contain the newly generated comments.

After accepting the changes, the selected code snippet should now display your new comments.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/documenting_code/adding_code_comments.gif)

### Enhanced Debugging Tools

The [Code Debugging feature in the Pieces for Sublime Text Plugin](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot/debugging-errors) assists developers in identifying and resolving errors within their code and is accessible with just a few clicks.

This feature pinpoints issues and suggests potential fixes, streamlining the debugging process. This feature is highly useful for improving code quality and reducing the time spent on troubleshooting.

To quickly debug your selection with Pieces:

1. Select the piece of code you’re having issues with
2. Right-click
3. Hover over Pieces
4. Then, hover over `Ask Copilot`
5. You can then select the `Fix a Bug` option
6. This will prompt you to input the error message you’ve received

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733964758788/2d31a04a-0924-48fe-8f39-9a7424cb6b3a.png?auto=compress,format&format=webp&q=75)

This opens a pop-up near the selected code with an option to Accept or Reject the changes that contain the fixes for the broken segment of code.

### Generate & Update Code

The Pieces Copilot can [generate code snippets based on your specifications](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot/refactoring).

With the Pieces for Sublime Text Plugin, you can enhance your workflow with two powerful Pieces Copilot commands:

* `Modify`: Edit or transform the selected code snippet to improve readability, optimize performance, or adapt it for specific needs.
* `Explain`: Get a clear explanation of what the selected code does, making it easier to understand and document.

It also assists in updating existing code by providing improved or refactored versions where needed, helping you optimize processes, add updates, and automate otherwise repetitive tasks, all based on the context of your existing code.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733964782764/4a61c914-a264-4e6d-b506-e9102f4ca94b.png?auto=compress,format&format=webp&q=75)

Selecting Your Pieces Copilot Runtime
-------------------------------------

You can change which LLM is utilized by Pieces Copilot in the Pieces for Sublime Text Plugin by editing a single .JSON file.

Easily switch between [different LLMs in Sublime Text](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot/llm-settings) by:

1. Opening the Command Palette with `⌘+shift+p` (macOS) and `ctrl+shift+p` (Windows/Linux)
2. Entering `Pieces:` into the newly opened prompt
3. Selecting `Pieces: Open Pieces Settings`
4. Copying the JSON settings from the left editor over to the right editor
5. Updating the model option in the JSON settings displayed in the right editor by choosing one the listed LLM models

Options include lightweight models for simple queries, advanced models for in-depth analysis, and both **local** and **cloud-based LLMs**.

This flexibility lets you customize the Pieces Copilot experience to suit your specific development needs, whether prioritizing speed or accuracy.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733964812742/8adf13f1-2f19-4399-9999-864ae36d5d99.png?auto=compress,format&format=webp&q=75)

Pieces Copilot As a Daily Driver
--------------------------------

The Pieces Copilot is a powerful, adaptable tool that grows with you as you use it—*so use it!*

---

Collaborative Coding Made Easy

Troubleshoot and Resolve Bugs Swiftly

Quick Prototyping

Skill Enhancement

Efficient Code Refactoring

---

[Download the Pieces for Sublime Text Plugin today!](https://pieces.app/plugins/sublime)

Updated on March 5, 2025, 9:13 PM UTC

---

[Get Started](/products/extensions-plugins/sublime/get-started)

[Chat](/products/extensions-plugins/sublime/pieces-copilot/chat)

---

# Troubleshooting - Pieces for Sublime Text

# Troubleshooting - Pieces for Sublime Text

---

Troubleshooting
===============

Find links to support resources, documentation and our Discord channel for any troubleshooting related to the [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces).

---

Having Trouble with Pieces for Sublime Text?
--------------------------------------------

If the Pieces for Sublime Text Plugin isn’t working as expected, verify the following steps:

### Ensure You Have the Latest Versions

First, confirm you’re using the latest version of the [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces) from Package Control as well as the latest version of [PiecesOS](https://docs.pieces.app/installation-getting-started/what-am-i-installing). The minimum functioning version permitted is currently **1.4.3.**

### Check PiecesOS Status

Check to make sure PiecesOS is running. PiecesOS must be running for the Pieces for Sublime Text Plugin to work.

### Restart Sublime Text After Updates

If you’ve recently installed or updated PiecesOS or the Pieces for Sublime Text Plugin, restart the IDE.

Contact the [Pieces support team](https://getpieces.typeform.com/to/mCjBSIjF#docs-sublime) if the issue still persists.

### macOS-Specific Configuration

Make sure that the `host` object inside the Pieces Settings file is **empty,** not set to `localhost:1000` as this creates issues with Package Control trying to load the Pieces Package, and can disable the plugin.

### Reload the Plugin[​](https://docs.pieces.app/extensions-plugins/sublime#reload-the-plugin)

If you're experiencing an issue or something isn't working properly, try reloading the plugin.

To do so, open the command palette using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows / Linux) and typing `Pieces: Reload Plugin`, then press Enter.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/troubleshooting/reload_plugin_sublime.gif)

Updated on March 5, 2025, 9:13 PM UTC

---

[Configuration](/products/extensions-plugins/sublime/configuration)

[Visual Studio Code Extension](/products/extensions-plugins/visual-studio-code)

---

# Edit and Update Snippets in Sublime Text

# Edit and Update Snippets in Sublime Text

---

Editing
=======

Editing snippets and saving your changes is simple with the [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces).

---

How to Edit Snippets
--------------------

To modify an existing snippet, follow these steps:

1. Open the command palette using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux)
2. In the text field, type `Pieces: Open Saved Materials`
3. Search for your asset, or choose it drop the available assets listed in the dropdown
4. Left-click or press enter to select and open that snippet
5. Switch to the **Editor Mode** by clicking the `Edit` button on your saved snippet
6. Modify the content of the snippet as needed and save your changes with the `⌘+s` (macOS) or `ctrl+s` (Windows/Linux)

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/using_snippets_PARENT_PAGE/commenting_editing_snippet.gif)

Once you make your changes, saving your snippet will close the editing view and bring you back to the saved snippet's main tab.

Actions from the Editing View
-----------------------------

When editing a snippet, the rest of [Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot) functionality is fully available—such as adding code comments, starting conversations, and fixing bugs.

This means you can share a snippet with a coworker, receive feedback, then retroactively add code comments and tweak some parameters or error handling to polish your code snippet.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/edit_and_update/add_code_comments_to_snippet.gif)

Updated on March 5, 2025, 9:13 PM UTC

---

[Search & Reuse](/products/extensions-plugins/sublime/using-snippets/search-reuse)

[Sharing](/products/extensions-plugins/sublime/using-snippets/sharing)

---

# Saving Snippets in Sublime Text with Pieces

# Saving Snippets in Sublime Text with Pieces

---

Saving
======

The [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces) lets users save code snippets directly from the editor, so that their snippets are securely stored and ready to be reused at a later date.

---

Saving Snippets
---------------

There are two ways to save code with the Pieces for Sublime Text Plugin—through the right-click menu, or by saving with hotkeys.

You can use this feature to save all kinds of useful code materials, like:

* API endpoint definitions
* Utility functions or commonly used helper methods
* Code templates for starting new modules
* Reusable logic for error handling or authentication

### via Right-Click Menu

To capture useful code snippets, simply:

1. Highlight the code within your editor
2. Right-click
3. Hover on `Pieces` and then select `Save to Pieces`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/using_snippets_PARENT_PAGE/save_to_pieces.gif)

What’s Stored When You Save a Snippet
-------------------------------------

When you save a snippet to your Pieces Cloud, it’s more than just the code that gets stored.

The Pieces Copilot captures:

* `Type`: Categorizes the snippet (e.g., API call, function, class) with it’s code language.
* `Associated Tags`: Keywords associated with the snippet for easier searching.
* `Custom Description`: Specifies precisely which *lines* (in numerical form) the snippet is from, as well as the file from which it originated—very useful for mind-mapping.
* `Smart Description`: AI-generated descriptions that summarize the snippet’s purpose and function.
* `Suggested Searches`: Related searches that help you discover similar snippets.
* `Related Links`: References to documentation, code repositories, or other relevant resources.
* `Related People`: Associated collaborators or contributors.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733969003991/b9f128cb-abed-4994-a43a-c6a2fdcde437.png?auto=compress,format&format=webp&q=75)

Additionally, the Pieces Copilot **scans saved snippets for sensitive information**, such as API keys, passwords, or authentication tokens, to ensure no confidential data is accidentally stored.

Where Saved Snippets Live
-------------------------

Saved snippets are stored locally on your device, ensuring accessibility even when offline. This also means that any Pieces for Developers extension or plugin—or even the Pieces Desktop App—has constant, up-to-date access to your saved materials.

You can search your saved snippets with the `Pieces: Search` feature.

[Read more about how to find your saved snippets here.](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets/search-reuse#finding-saved-snippets)

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Drive](/products/extensions-plugins/sublime/using-snippets)

[Search & Reuse](/products/extensions-plugins/sublime/using-snippets/search-reuse)

---

# Searching

# Searching

---

Searching
=========

You can find your saved code easily with the [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces) by utilizing a few different search methods.

---

Finding Saved Snippets
----------------------

One of the most powerful tools baked into the Pieces for Sublime Text Plugin is the search functionality which allows you to utilize **three different searching methods.**

To get started:

1. Open the command palette using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux)
2. Type `Pieces: Search`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/search_and_reuse/search_natural_NPL.gif)

### via Fuzzy Search

Fuzzy Search helps find relevant matches even with typos, misspellings, or variations.

It’s great for locating partially-remembered function names, error messages, log entries, or comments, saving time with flexible, quick searches.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733969222267/21d999af-9f4e-458c-a1e3-c08ce01c16bb.png?auto=compress,format&format=webp&q=75)

### via Full Text Search

Full Text Search finds documents or records with an exact word match.

It indexes all words for fast searching, ideal for specific queries like function declarations, pulling up matching snippets and related classes efficiently.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733969192967/9c752edc-10d2-4be7-bcff-d3ce9dd6481a.png?auto=compress,format&format=webp&q=75)

### via Neural Code Search

Neural Code Search uses machine learning to find code snippets based on natural language descriptions.

It captures context and semantics, delivering accurate results, especially helpful for new developers or complex queries.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733969166204/f993ac03-eea1-468e-a27c-f2c44a9b634b.png?auto=compress,format&format=webp&q=75)

Viewing and Reusing Saved Snippets
----------------------------------

[Saved snippets](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets/saving-snippets) can be viewed alongside their saved metadata by opening up them up directly from the command palette.

### via Command Palette

1. Open the Command Palette using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux)
2. Type in `Pieces: Open Saved Material` to access your saved materials
3. Scroll through the list to find the snippet you’d like to view
4. Highlight the desired snippet and press `return` (macOS) or `enter` (Windows/Linux)

This opens up the snippet in markdown preview mode in a separate window. In the new window, you have the ability to [share, view metadata, edit, copy, or delete the snippet](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/search_and_reuse/open_saved_media.gif)

Real Time Snippet Streaming[​](https://docs.pieces.app/extensions-plugins/jetbrains#real-time-snippet-streaming)
----------------------------------------------------------------------------------------------------------------

Each product in the Pieces Suite uses [PiecesOS](https://docs.pieces.app/installation-getting-started/pieces-os) to get information about your snippets' context.

When you update a snippet in the [Pieces for Developers Desktop App](https://beta.docs.pieces.app/products/desktop-application)—such as a name or description, tags or any of the other metadata—those changes are also reflected in your Pieces for Sublime Text Plugin without refreshing.

If your snippets are not updating right away, see the [troubleshooting guide](https://beta.docs.pieces.app/products/extensions-plugins/sublime/troubleshooting) for details on how to refresh your snippet list.

Updated on March 5, 2025, 9:13 PM UTC

---

[Saving Snippets](/products/extensions-plugins/sublime/using-snippets/saving-snippets)

[Edit & Update](/products/extensions-plugins/sublime/using-snippets/edit-update)

---

# Sharing Snippets from Sublime Text with Pieces

# Sharing Snippets from Sublime Text with Pieces

---

Sharing Snippets
================

The `Share Snippets` feature in the [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces) is designed to streamline the process of sharing code snippets with colleagues, collaborators, or the broader development community.

This feature lets users generate shareable links for their saved code snippets directly from the Pieces for Sublime interface.

---

What Information Gets Shared
----------------------------

When a snippet is saved to the Pieces Cloud, the code is [enriched with valuable information](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets/saving-snippets#whats-stored-when-you-save-a-snippet) such as related people, links, annotations, tags, and an automatically-generated description.

This information is visible to the right of the code block when the shared snippet is open in your browser:

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733970040011/f627038f-b8f3-46f8-8235-600d1a8a8efd.png?auto=compress,format&format=webp&q=75)

Want to see what a shared snippet looks like for yourself?

[Click here to check out a C# snippet](https://jimbobbennett.pieces.cloud/?p=419d42b485) that Pieces engineers used to launch a Confetti Cannon at a conference.

How to Generate Shareable Links
-------------------------------

To generate a shareable link that can be shared anywhere:

1. Right click on a section of selected code
2. Hover over the Pieces option
3. Select the `Generate Shareable Link` option

This will then display a prompt where you can choose to `Copy` or `Dismiss` the shareable link.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733970118787/7cf943b4-f951-46ee-bd0f-4de72de0e0aa.png?auto=compress,format&format=webp&q=75)

When you click `Generate Shareable Link`, the Pieces Copilot will generate the link, then open a small menu with two options—`Copy` or `Dismiss`, allowing you to either copy the link or disregard the link.

Selecting `Copy` will copy the shareable URL to your clipboard:

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/sharing/using_snippets_menu_generate_shareable_link_1092024.png)

This feature allows the recipient to easily access and view the snippet, even if they don't have Pieces installed or have a Pieces account.

Sharing a Previously Saved Snippet
----------------------------------

In addition to sharing code snippets on the fly, you can also open up previously saved materials and generate a shareable link from the embedded `Share` button.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/using_snippets_PARENT_PAGE/sharing_saved_media.gif)

**Enriched Sharing Experience**
-------------------------------

When you `Share` a snippet, it’s not just the code that’s included. The snippet comes with additional metadata to provide context—[you can read more about that here.](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets/saving-snippets#whats-stored-when-you-save-a-snippet)

* `Snippet Type`: Identify the language or framework, such as Python or React.
* `Tags`: Useful keywords for quick categorization.
* `Description`: A short summary of what the snippet does.
* `Related Links`: Helpful resources or documentation tied to the snippet.
* `Author Information`: A record of who created the snippet.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733970528143/f4acf9e2-0d73-4634-8695-a6cdcfbd3814.png?auto=compress,format&format=webp&q=75)

Sensitive Information Watchdog
------------------------------

The `Generate Shareable Link` feature does more than just allow you to effectively share snippets across your entire team and other communities, though.

You'll see a section titled **Sensitive Information:**

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733970500459/864946d3-8d27-435c-beb4-01f5d37e5fdc.png?auto=compress,format&format=webp&q=75)

Our in-house ML model scans snippets for potentially sensitive information, like API keys or passwords, and alerts you so that you can make an informed decision before sharing the snippet.

The scan happens locally using on-device machine learning models **before the snippet is uploaded to the cloud** for sharing—that way, you can make an informed decision about sharing your code.

Updated on March 5, 2025, 9:13 PM UTC

---

[Edit & Update](/products/extensions-plugins/sublime/using-snippets/edit-update)

[Commands](/products/extensions-plugins/sublime/commands)

---

# Using Snippets in Sublime Text with Pieces

# Using Snippets in Sublime Text with Pieces

---

Using Pieces Drive
==================

The [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces) enhances your development workflow with powerful features like [saving](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets/saving-snippets) and [reusing](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets/search-reuse) snippets, ensuring your most critical code is always accessible.

Here’s a look at some commonly saved and frequently reused materials:

---

| `Logging Utilities` | A helper function for detailed server-side logging with timestamps and error levels. | Speeds up debugging and monitoring by inserting reliable logging methods. |
| --- | --- | --- |
| `Validation Functions` | A function to validate JSON payloads or form inputs before submission. | Ensures data integrity with reusable, thoroughly tested validation logic. |
| --- | --- | --- |
| `API Integration Code` | Prewritten `axios` code for making GET or POST requests, complete with error handling and response parsing. | Reduces repetitive work when integrating RESTful APIs or GraphQL endpoints. |
| `Component Templates` | A React functional component template with basic hooks and styling setup. | Provides a consistent starting point for building new components. |
| `Database Queries` | A MongoDB query to retrieve active user data filtered by last login. | Streamlines database tasks by reusing optimized query patterns. |

---

Boosting Productivity with Snippet Management
---------------------------------------------

The Pieces for Sublime Text Plugin connects you with your development environment, so you can focus on what matters—building great software—while empowering you with tools for efficient code reuse.

* **Improved Productivity:** Focus on solving new problems rather than resolving old ones.
* **Contextual Awareness:** Snippets enriched with metadata, descriptions, and links to relevant searches help you remember the origin, purpose, and ideal usage scenarios for each piece of code.
* **Code Standardization:** Sharing best practices and reusable components helps developers ensure uniform coding practices and conventions are available across different teams and projects.

By using the Pieces for Sublime Text Plugin, you can capture and manage these snippets to streamline daily tasks and enhance your workflow in several ways:

### Save & Organize

Users can save snippets by highlighting the desired code, right-clicking, and selecting the `Save to Pieces` option. This will open a new Sublime Text tab with your new snippet.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/using_snippets_PARENT_PAGE/save_to_pieces.gif)

This guarantees that important pieces of code, such as code fragments, functions, configuration files, and command-line instructions, are always at hand—just when you need them.

Additionally, [each snippet is enriched with context](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets/saving-snippets#whats-stored-when-you-save-a-snippet), enabling you to insert well-documented, relevant snippets where they make sense within your projects.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734102266231/9340d7d0-7f15-4559-99ec-b892af68dcc9.png?auto=compress,format&format=webp&q=75)

### Search & Reuse

You can directly [search through your collection of saved materials](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets/search-reuse) from within Sublime Text, allowing you to quickly find snippets by keyword or context.

To search you can open the command palette with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux), enter `Pieces: Search`, and select the algorithm that suits your search case best.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/search_and_reuse/search_natural_NPL.gif)

These intelligent search options ensure that you can find the exact snippet you need, even if you don't remember the exact details. They also prevent you from wasting time rewriting or searching for the same solutions across projects.

### Edit & Update

With a few keystrokes, you can [open saved snippets from your local repository and make edits](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets/edit-update) to keep your code evergreen and improve your most important pieces of code.

You can open your saved materials by opening the command palette with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux), enter `Pieces: Open Saved Material`, and search or select for the snippet you’d like to edit.

After selecting, the snippet will open up in a new page, where you can select `Edit` and make your necessary edits to the snippet.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/using_snippets_PARENT_PAGE/commenting_editing_snippet.gif)

Regularly revisiting your snippets ensures that your code evolves with your projects, adapting to new requirements and improvements.

### Collaborate & Share

Is your teammate scrambling for a crucial piece of boilerplate code? Are they reaching out to you on vacation, desperately searching for the shell script that keeps server #1 running smoothly?

This is where sharing snippets comes into play—this feature lets you [share your code with team members](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets/sharing), even if they don’t use Pieces.

This can be done without the recipient needing a Pieces for Developers Account.

Sharing useful code snippets can eliminate productivity roadblocks, especially when a co-developer is new to the project or a junior team member.

For instance, a teammate handling server monitoring could leverage your shared script to automate daily tasks seamlessly, saving time and effort without needing extra setup.

These shared links also include their [original enriched metadata](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets/saving-snippets#whats-stored-when-you-save-a-snippet), like tags, descriptions, and other information.

To share a snippet in Sublime Text, you can highlight some lines of code, right-click, hover over `Pieces` and click `Generate Shareable Link`. After Pieces shares the code, a pop-up will appear, allowing you to `copy` or `dismiss` the link.

This copies a link you can share with teammates, ensuring easy access to your reusable code.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/using_snippets_PARENT_PAGE/sharing_saved_media.gif)

Use Cases
---------

With Pieces for Sublime Text Plugin, your snippets become a robust library of reusable code that you can organize, search, edit, and share across projects.

Here are some examples of how you can use them:

### Reusable Scheduling Functions

Imagine yourself regularly tackling projects that require scheduling tasks to run at specific intervals.

Instead of rewriting the same logic for each new project, you can [save an evergreen snippet to your Pieces repository](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets/saving-snippets#saving-snippets).

This allows you to reuse a well-crafted scheduling function across multiple applications that’s useful in a variety of scenarios:

```
Copypackage main

import (
	"fmt"
	"time"
)

// A reusable function to schedule tasks at a specified interval
func scheduleTask(interval time.Duration, task func()) {
	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			task()
		}
	}
}

```

### File System Monitoring

If you frequently work on projects that involve monitoring file system changes, you can save a helpful snippet to your Pieces repository that does exactly that, using generic and reusable naming conventions:

```
Copypackage main

import (
	"fmt"
	"log"
	"github.com/fsnotify/fsnotify"
)

// A reusable function to monitor file system changes
func watchFileChanges(path string) {
	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		log.Fatal(err)
	}
	defer watcher.Close()

	err = watcher.Add(path)
	if err != nil {
		log.Fatal(err)
	}

	for {
		select {
		case event := <-watcher.Events:
			if event.Op&fsnotify.Write == fsnotify.Write {
				fmt.Println("Modified file:", event.Name)
			}
		case err := <-watcher.Errors:
			fmt.Println("Error:", err)
		}
	}
}

```

Additional Snippet Scenarios
----------------------------

Read up on some additional scenarios and use cases for Pieces Snippets and see how the [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces) could benefit you and your workflow.

---

Testing Framework Templates

Command-Line Utilities

Error Handling & Logging

Quickly Create New Projects

---

[Download the Pieces for Sublime Text Plugin today!](https://pieces.app/plugins/sublime)

Updated on March 5, 2025, 9:13 PM UTC

---

[LLM Settings](/products/extensions-plugins/sublime/pieces-copilot/llm-settings)

[Saving Snippets](/products/extensions-plugins/sublime/using-snippets/saving-snippets)

---

# Pieces for Sublime Text Plugin

# Pieces for Sublime Text Plugin

Pieces for Sublime Text Plugin
==============================

---

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732292374232/664cf675-ce10-4145-a5f7-e3ddf3996008.png?auto=compress,format&format=webp&q=75)

---

The [Pieces for Sublime Text Plugin](https://packagecontrol.io/packages/Pieces) is a powerful tool that integrates directly into the Sublime Text editor. It allows users to manage saved code snippets and access [Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot) features.

* [Pieces Copilot:](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot) Engage in AI-driven conversations to enhance productivity by generating code, adding comments, troubleshooting, and more—all contextualized to your project by adding files and folders as context.
* [Snippet Management:](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets) Effortlessly save, locate, and share frequently used code snippets, making it easier to organize your work, quickly access important pieces of code, and collaborate effectively with others.

![Getting Started](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1728573288735%2F7349fff8-1212-4307-a4b2-e0c4e2a6598c.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Getting Started

[Follow these instructions](https://beta.docs.pieces.app/products/extensions-plugins/sublime/get-started) to download and install the Pieces for Sublime Text Plugin.

![Troubleshooting](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1728573294187%2Ffde0dddc-2f7a-457e-baed-34b4c85e689a.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Troubleshooting

Explore [troubleshooting options,](https://beta.docs.pieces.app/products/extensions-plugins/sublime/troubleshooting) navigate to our [support page,](https://beta.docs.pieces.app/products/support) or [directly book a call](https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr) with our engineers.

---

The Pieces for Sublime Text plugin offers developers **two main pillars of functionality**:

1. **Pieces Copilot**: Offers [AI-assisted features](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot) like contextualized generative AI conversations, adding code comments, and troubleshooting code

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733971534875/432493c2-738d-41b6-b786-8cce8237fdfb.png?auto=compress,format&format=webp&q=75)

2. **Material Management**: Enables you to [save, edit, search, and share useful code](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets) snippets to boost your workflow productivity and streamline collaboration with others

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733957943876/d12f229d-f9cd-47ff-b109-e4b3c49db142.png?auto=compress,format&format=webp&q=75)

Using the Pieces Copilot
------------------------

Inside your Sublime Text Editor, Pieces Copilot enables you to perform **various actions**, such as initiating a conversation directly within the editor using your preferred LLM about a specific code snippet, fragment, or folder.

To start, you can [initiate a conversation with the LLM of your choice](https://beta.docs.pieces.app/products/extensions-plugins/sublime/pieces-copilot/chat), providing as much context as needed by adding files, folders, or even entire repositories to the conversation.

To explore available options, simply select a portion of your code, right-click, and hover over the `Pieces` item in the context menu. From here, you’ll find several quick actions, including:

* `Explain`: Get detailed explanations of the code’s functionality.
* `Ask Copilot`: Gives 3 options to fix a bug in your code, modify the selected code, or add comments to the selection.
* `Start Conversation About The Current Selection`: Opens a new Copilot window to talk about your selected code.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733962085644/31f6f523-cc3c-4899-abba-68082dc1556e.png?auto=compress,format&format=webp&q=75)

Managing Code Snippets
----------------------

Users can save snippets by right-clicking the selected code and choosing the `Save to Pieces` option, edit saved materials with a simple command, and share snippets via generated shareable links.

Commonly saved snippets include **utility functions, database queries, and API request templates**—these are frequently reused, so saving them streamlines development and keeps reusable code easily accessible.

Common snippet types include utility functions, API requests, and reusable code blocks.

When a snippet is saved, the plugin also automatically generates and associates meta data, like **tags, commit messages, code types, smart descriptions,** as well as **code authors and related resources.**

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733962137844/78f6c994-d7c7-4a50-b63d-88c83e7c8a2a.png?auto=compress,format&format=webp&q=75)

Searching for Snippets
----------------------

There are 3 ways to [search through your saved snippets](https://beta.docs.pieces.app/products/extensions-plugins/sublime/using-snippets/search-reuse) in the Pieces for Sublime Text Plugin:

* `Fuzzy Search`: Quickly find snippets even if your search term doesn’t match the saved text exactly. This is useful for locating snippets with slight variations in names or typos.
* `Full-Text Search`: Searches through the entire content of your saved snippets. Ideal for when you remember part of the snippet but not the exact title or tags.
* `Neural Code Search`: Uses AI to understand the context of your query, making it possible to find snippets even when your search term is related *conceptually* rather than *textually*. This is useful for complex searches where exact matches aren’t obvious.

These options allow you to search with vague queries or get specific when you know exactly what you’re looking for, so you can find and reuse your snippets.

Once you’ve located a snippet using one of the search methods, you can then refactor the code to your needs, share the code with other developers, or paste it directly into your code.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733962194701/f9aff393-efd8-43be-addf-b3ac37c118c8.png?auto=compress,format&format=webp&q=75)

---

Download the Plugin
-------------------

Ready to streamline your development? Download the Pieces for Sublime Text Plugin and follow our [installation guide to start.](https://beta.docs.pieces.app/products/extensions-plugins/sublime/get-started)

Updated on March 5, 2025, 9:13 PM UTC

---

[Troubleshooting](/products/extensions-plugins/jetbrains/troubleshooting)

[Get Started](/products/extensions-plugins/sublime/get-started)

---

# Commands in Pieces for VS Code Extension

# Commands in Pieces for VS Code Extension

---

Pieces for VS Code Extension Commands
=====================================

Below is a table containing every command that is available to use in the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/commands/settings_pieces.png)

---

Shortcut Table
--------------

There are a number of actions related to the [Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot) and [Pieces Drive management ecosystem](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets) that are accessible with shortcuts.

---

| **Command** | **macOS** | **Windows/Linux** |
| --- | --- | --- |
| [Ask Copilot About Selection](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/chat#pieces-ask-copilot-about-selection) | `shift+⌘+a` | `ctrl+shift+a` |
| --- | --- | --- |
| [Copy](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets/search-reuse#viewing-and-reusing-saved-snippets) | `⌘+c` | `ctrl+c` |
| [Paste](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets/search-reuse#viewing-and-reusing-saved-snippets) | `⌘+v` | `ctrl+v` |
| [Save Current Selection to Pieces](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets/saving-snippets#via-keyboard-shortcuts) | `shift+⌘+’` | `ctrl+shift+v` |
| [Search Pieces](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets/search-reuse#via-search-feature) | `⌥+⌘+p` | `ctrl+alt+p` |
| [Share](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets/sharing#via-keyboard-shortcut) | `shift+⌘+i` | `ctrl+shift+i` |

---

Command Table
-------------

You can easily access these commands through the **Command Palette** using the shortcuts—`⌘+shift+p` (macOS) and `ctrl+shift+p` (Windows/Linux).

Simply type `Pieces:` followed by the desired command.

---

| **Pieces Copilot: Focus on Pieces Copilot View** | Launches the Pieces Copilot in the side panel, providing contextual insights and assistance for the currently open code. |
| --- | --- |
| **Pieces Drive: Focus on About View** | Opens the Pieces Drive window, showing information about the Pieces for VS Code Extension, the Pieces Community, and Support resources. |
| --- | --- |
| **Pieces Drive: Focus on Connect View** | Opens the Pieces Drive window, showing the status of your Pieces account if it is connected to the Pieces Cloud. |
| **Pieces: Ask Copilot About Active File** | Allows you to ask the Pieces Copilot about the active file open in the VS Code Editor. |
| **Pieces: Ask Copilot About Selection** | Opens up a prompt for you to ask the Pieces Copilot a specific question about a selection. |
| **Pieces: Ask Copilot About Workspace** | Ask the Pieces Copilot for insights about your entire workspace, including saved files and snippets. |
| **Pieces: Comment Selection with Copilot** | Allows the Pieces Copilot to automatically generate comments for your selected code snippet. |
| **Pieces: Explain Selection with Copilot** | Generates a detailed explanation for the highlighted code selection using the Pieces Copilot. |
| **Pieces: Import User Materials to Pieces** | Import external user materials (i.e. snippets) into Pieces Drive to integrate them into your workflow seamlessly. |
| **Pieces: Launch PiecesOS** | Opens the PiecesOS desktop application. Note that PiecesOS must be running to utilize all VS Code extension features. |
| **Pieces: Modify Selection with Copilot** | Refactor or enhance selected code by describing your intended modification. Pieces Copilot will implement the changes. |
| **Pieces: Open Copilot** | Opens the Pieces Copilot on the left-hand side of the VS Code IDE. |
| **Pieces: Disconnect from Pieces Cloud** | Disconnect from your Pieces Cloud account while keeping local functionality intact. |
| **Pieces: Connect to Pieces Cloud** | Connect to the Pieces Cloud and sync VS Code with Pieces Cloud. |
| **Pieces: Sign into Pieces** | Sign into your Pieces Cloud account and sync local databases. |
| **Pieces: Refresh Snippets** | Refresh your saved code snippets in the Pieces. |
| **Pieces: Save Active File to Pieces** | Save the active code file in the VS Code editor to Pieces. |
| **Pieces: Save Current Selection to Pieces** | Save a selected code snippet to Pieces. |
| **Pieces: Search Pieces** | Launches the search bar where you can view and search for conversations, saved snippets, projects, and other interactions you have with the Pieces OS. |
| **Pieces: Sign Out of Pieces** | Log out of your Pieces account entirely, disabling both local and cloud-connected features. |
| **View: Show Pieces Copilot** | Opens the Pieces Copilot by the side of the VS Code editor. |
| **View: Show Pieces Drive** | Opens the Pieces Drive window. |

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Sharing](/products/extensions-plugins/visual-studio-code/pieces-drive/sharing)

[Configuration](/products/extensions-plugins/visual-studio-code/configuration)

---

# Configuring Pieces Extension in VS Code

# Configuring Pieces Extension in VS Code

---

Configuration
=============

Refer to the guide below to effectively configure the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) to align with your workflow and personal preferences.

---

Supported LLMs
--------------

We constantly update and configure our plugins and extensions to work with the latest LLMs.

The Pieces for VS Code Extension currently supports 13 different cloud models and [41 different local models](https://beta.docs.pieces.app/products/core-dependencies/ollama/supported-models):

---

| **Model Name** | **Context Window** | **Description** |
| --- | --- | --- |
| **GPT-4o Mini** | 128k tokens (Large) | Compact version of GPT-4o with efficiency. |
| --- | --- | --- |
| **GPT-4o** | 128k tokens (Large) | High-output GPT-4 variant for extended tasks. |
| **GPT-4 Turbo** | 128k tokens | Cost-efficient GPT-4 with large capacity. |
| **GPT-4** | 8k tokens | Advanced GPT-4 for high-quality responses. |
| **GPT-3.5** | 4k tokens | General-purpose versatile language model. |
| **Claude 3.5 Sonnet** | 40k tokens | Upgraded for improved reasoning. |
| **Claude 3 Sonnet** | 40k tokens | Designed for eloquent writing. |
| **Claude 3 Opus** | 40k tokens | High-capacity for detailed analysis. |
| **Claude 3 Haiku** | 40k tokens | Creative for precision tasks. |
| **Gemini Pro Chat** | 4k tokens | General-purpose language model. |
| **Gemini 2 Flash** | 4k tokens | Experimental, optimized for response time. |
| **Gemini 1.5 Pro** | 128k tokens (Large) | Advanced version with extended context. |
| **Gemini 1.5 Flash** | 256k tokens (Large) | Lightweight with extended context. |

---

[Read documentation on how to switch your Pieces Copilot Runtime (LLM)](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/llm-settings#how-to-configure-your-llm-runtime) utilized by the Pieces for VS Code Extension within your IDE.

Opening Pieces Settings
-----------------------

To open the **Pieces Settings** in the Pieces for VS Code Extension, follow these steps:

1

### Open the Extensions Tab

This can be done by locating the extensions tab or by pressing `⌘+x+s` (macOS) or `ctrl+x+s` (Windows/Linux)

2

### Search for Pieces

In the search bar, type **Pieces**

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/configuration/pieces_opening_settings.gif)

3

### Open the Settings

Once the extension appears, click the **Manage** icon (⚙️) on the toolbar to open a dropdown menu

4

### Adjust Settings

Select **Settings** from the dropdown to view and adjust the Pieces settings

You can also access **Pieces Settings** in the bottom-left corner of the screen, where it says `Pieces Settings`.

Overriding Commands in VS Code
------------------------------

If you’d like to adjust the keyboard shortcuts for Pieces functionality in VS Code, such as [saving a snippet](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets) or [previewing markdown](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/search-reuse#viewing-and-reusing-saved-snippets), follow these steps:

1

### Open Keyboard Shortcuts

Open the **Keyboard Shortcuts** editor by pressing `⌘+k+s` (macOS) or `ctrl+k+s` (Windows/Linux)

2

### Locate the Pieces Command

Use the **search bar at the top of the editor** to locate the Pieces command you want to modify, such as `Save Current Selection`

3

### Edit the Keybind

Click the **pencil icon** next to the command and select `Add Keybinding`

4

### Enter Preferred Shortcut

**Enter your preferred shortcut**—be sure it doesn’t conflict with an existing VS Code command—i.e., `⌘+shift+'` (macOS) or `ctrl+shift+'` on (Windows/Linux)

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/configuration/changing_keybinds.png)

Settings Overview
=================

Below is a breakdown of each adjustable setting (preferences, behaviors, views, etc.) you can find in the Pieces for VS Code Extension, broken down by section.

Snippet Preferences
-------------------

Adjustable settings specific to Pieces Drive, like code snippets, and other material-related action behavior.

### Add Snippets

To import your User Snippets from VS Code to Pieces Drive, click `Import User Snippets to Pieces`.

This will seamlessly bring your **custom snippets into Pieces Drive, making them available across your projects.**

### Pieces Autocomplete

This setting enables or disables **Pieces Autocomplete** within the Pieces extension, which is a feature that suggests pieces of saved code from your Pieces Drive where it makes sense to use them.

To enable or disable auto-complete, check or uncheck the box in this section of the VS Code settings.

To modify the auto-complete key:

1

### Open Pieces Settings

Search `Pieces` in the VS Code settings menu or click the settings button next to `Saved Materials` in the **Pieces Drive**

2

### Located the Setting

Scroll down to **Pieces: Autocomplete Key**

3

### Change Preferred Key

Select your preferred key—`tab` or `Enter or Tab`

4

### Save the Settings

Save your settings, and **Snippet Autocomplete** will be configured to your preference

### Auto-Expansion

Enabling this option will expand your snippet list to match the programming language of your active file, making it easier to find relevant snippets as you code.

### Automatically Copy Link

This setting automatically copies any generated Pieces link. When enabled, links are ready to share instantly, so you don’t need to manually copy them.

### Auto-Save

With auto-save enabled, Pieces will automatically save frequently used snippets as you work to Pieces Drive.

This helps reduce the number of snippets you need to save manually and makes it easier to revisit the code you use often.

### Display

Control what displays in your snippet list:

* **Name**: Shows the snippet title
* **Description**: Shows the snippet’s description
* **Preview**: Shows a code preview for a glance at the snippet’s contents

### Auto-Save Related Materials Selection

Check this box if you’d like any code selected for related materials search to be saved automatically to your Pieces repository.

### Git Context

This setting allows you to add Git context to your snippets. Choose if you’d like to include details from your Git history, such as commit links and authors, to better track where snippets originated.

Copilot Preferences
-------------------

Adjustable preferences related specifically to Pieces Copilot and LLM runtime usage.

### Cloud Capabilities

Choose the type of ML models you’d like the Pieces Copilot to use:

* **Cloud**: For cloud-based models
* **Local**: For on-device models
* **Blended**: A mix of cloud and local

To learn more about the types of ML models and their privacy implications, [visit our documentation.](https://beta.docs.pieces.app/products/privacy-security-your-data)

### Search

You can adjust the default Pieces Copilot search behavior in a few different ways.

1. **Search By**

Pick your search parameters! In `Search By`, you can decide if your search will match the characters in your snippets' titles, tags, code contents, or combinations of the three.

2. **Search Display**

Select what you'd like to display in your search results.

* `title`, `tags`, and `code`
* `title`, `tags`, and `description`

3. **Search Result Action**

Choose what you want to happen when you select a search result.

* `Open in Overview`
* `Insert Snippet at Cursor`
* `Open in Overview and Copy to Clipboard`
* `Copy to Clipboard`

Pieces Settings
---------------

### Launch PiecesOS

If [PiecesOS](https://docs.pieces.app/installation-getting-started/what-am-i-installing) isn’t running, launch it directly from this settings page instead of opening it from your Applications folder.

### Notifications

Customize your notification preferences for a more streamlined experience:

* **All Notifications**: Receive all types of notifications, including successes and suggestions.
* **Only Critical Notifications**: Only critical alerts, like failures, will be shown.

Other Configurable Settings
---------------------------

### Close Snippet Editor On Save

If enabled, this setting will automatically close the snippet editor window when you’ve saved the updated snippet.

### Telemetry

Uncheck this box to opt out of sharing analytics with the Pieces development team.

You can also [read up on our privacy policy and usage statements](https://beta.docs.pieces.app/products/privacy-security-your-data) for more information about what data is and isn’t collected.

.JSON-Adjustable Settings
-------------------------

All configurable settings for the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) are available in the `settings.json` file, accessible through the **Pieces Settings** window.

---

| `files.autoSave` | Sets the automatic save interval for open files. |
| --- | --- |
| `go.toolsManagement.autoUpdate` | Automatically updates tools in the extension. |
| --- | --- |
| `workbench.iconTheme` | Specifies the icon theme for the VS Code workbench. |
| `git.autofetch` | Enables automatic fetching in Git to keep your branches updated. |
| `gitlens.graph.minimap.enabled` | Controls the visibility of the GitLens graph minimap. |
| `workbench.colorCustomizations` | Allows customization of the color scheme for your editor. |
| `markdown-preview-enhanced.alwaysShowBacklinksInPreview` | Determines whether backlinks are always shown in the markdown preview. |
| `markdown-preview-enhanced.enablePreviewZenMode` | Enables Zen mode in markdown preview. |
| `update.showReleaseNotes` | Shows release notes when VS Code updates. |
| `editor.inlineSuggest.suppressSuggestions` | Suppresses inline suggestions in the editor. |
| `pieces.cloudCapabilities` | Specifies the Machine Learning model type for Pieces. |
| `pieces.telemetry` | Controls telemetry (data sharing) with the Pieces team. |
| `pieces.OS.launchOnStartup` | Defines if Pieces OS should launch on startup. |
| `pieces.launchPiecesOS` | Determines if Pieces OS should be launched manually or automatically. |

---

Once you've edited the contents of the `settings.json` file (shown below) to your preferences, simply save the file and restart VS Code for your changes to take effect.

```
Copy{
    "files.autoSave": "afterDelay",
    "go.toolsManagement.autoUpdate": true,
    "workbench.iconTheme": "vscode-icons",
    "git.autofetch": true,
    "gitlens.graph.minimap.enabled": false,
    "workbench.colorCustomizations": {},
    "markdown-preview-enhanced.alwaysShowBacklinksInPreview": false,
    "markdown-preview-enhanced.enablePreviewZenMode": false,
    "update.showReleaseNotes": false,
    "editor.inlineSuggest.suppressSuggestions": true,
    "pieces.cloudCapabilities": "Blended",
    "pieces.telemetry": true,
    "pieces.OS.launchOnStartup": "Yes",
    "pieces.launchPiecesOS": null
}

```

You can save the `.json` file with `⌘+s` (macOS) or `ctrl+s` (Windows/Linux).

There's no need to use `Save As`, since file already exists—you're simply updating it with your new settings, which come with the Pieces for VS Code Extension.

---

For additional support resources, check out our [troubleshooting guide.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/troubleshooting)

Updated on March 5, 2025, 9:13 PM UTC

---

[Commands](/products/extensions-plugins/visual-studio-code/commands)

[Troubleshooting](/products/extensions-plugins/visual-studio-code/troubleshooting)

---

# Getting Started with Pieces in VS Code

# Getting Started with Pieces in VS Code

---

Get Started
===========

Follow the steps below to install and use the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode).

---

Prerequisites
-------------

Before installation, you'll need:

* **PiecesOS:** The main engine that powers Pieces for VS Code functionality. [Learn more about PiecesOS.](https://docs.pieces.app/installation-getting-started/pieces-os)
* **VS Code:** Visual Studio Code should already be installed on your development machine.

PiecesOS must be installed to enable the Pieces for VS Code Extension. We also recommend the Pieces for Developers Desktop App for enhanced functionality.

---

Installation
------------

1. Open VS Code and navigate to the **Extensions** view, then search for **Pieces for VS Code** and click `Install`

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732735809045/38bfb971-66e8-4789-8a9d-7dd153d98a30.png?auto=compress,format&format=webp&q=75)

Alternatively, download the .VSIX installer from the [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) and install it manually.

2. Restart VS Code after installing the extension to complete the setup
3. Enable **Pieces Tool Windows** by going to `View`, then `Tool Windows` and enable whichever Pieces Windows that best suit your workflow

### Setting Up PiecesOS

To use the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode), you must install [PiecesOS](https://beta.docs.pieces.app/products/core-dependencies/pieces-os) on your operating system.

Follow the specific setup steps below:

Windows

macOS (Apple Silicon)

macOS (Intel)

Linux

**Recommended Installation Method**

[Click here to download the Pieces Suite Installer for Windows.](https://builds.pieces.app/stages/production/pieces_suite_windows/appinstaller/download?download=true&product=DOCUMENTATION_WEBSITE)

**Alternative Installation Methods**

Or, you can install PiecesOS using these alternative methods—just click the link on the package that’s right for your system.

1. **WinGet**

Paste the following command into your terminal to install the Pieces Suite via WinGet: `winget install "Pieces OS"`

2. **Standalone .EXEs**

   * [PiecesOS .EXE (Standalone Windows)](https://builds.pieces.app/stages/production/os_server/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE)
   * [Pieces for Developers Desktop App EXE (Standalone Windows)](https://builds.pieces.app/stages/production/pieces_for_x/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE)
3. **App Installer**

   * [PiecesOS Appinstaller (Standalone Windows)](https://builds.pieces.app/stages/production/appinstaller/os_server.appinstaller?download=true&product=DOCUMENTATION_WEBSITE)
   * [Pieces for Developers Desktop App Appinstaller (Standalone Windows)](https://builds.pieces.app/stages/production/appinstaller/pieces_for_x.appinstaller?download=true&product=DOCUMENTATION_WEBSITE)

---

For enhanced security and better system integration, we recommend installing the MSIX package over the InnoSetup (.exe) installer. The MSIX package operates in a containerized environment, providing additional security benefits.

---

Updating
--------

The [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) will automatically update when a new version is available.

The `Auto Update` setting is enabled by default.

Pieces Cloud
------------

Connecting to the Pieces Cloud is optional. However, it **provides additional features** like **data backups, shareable links, and more.** You can enjoy the main functionalities of Pieces without an account.

Disconnecting from the Pieces Cloud logs you out of your Pieces account.

To disconnect from the Pieces Cloud:

1

### Open the Command Palette

Open the command palette in VS Code with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux)

2

### Disconnect from the Cloud

Enter `Pieces: Disconnect from Pieces Cloud` and choose the option

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/get_started/disconnect_from_pieces_cloud.gif)

Uninstallation
--------------

To uninstall the Pieces for VS Code Extension, follow these steps:

1

### Open the Extensions Tab

Press `⌘+shift+x` (macOS) or `ctrl+shift+x` (Windows/Linux) to open the extensions tab

2

### Open the Extensions Search Bar

Open the extensions search bar, then search for `Pieces for VS Code` and click `Uninstall`

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732735910690/24eb8b81-05cd-4737-8789-10312688d8db.png?auto=compress,format&format=webp&q=75)

Restart your VS Code IDE after removing the extension to complete the uninstallation process.

Updated on March 5, 2025, 9:13 PM UTC

---

[Visual Studio Code Extension](/products/extensions-plugins/visual-studio-code)

[Pieces Copilot](/products/extensions-plugins/visual-studio-code/pieces-copilot)

---

# Chat with Pieces Copilot in VS Code

# Chat with Pieces Copilot in VS Code

---

Generative AI Conversations
===========================

The [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) offers flexible options for interacting with generative AI to gain insights, debug, and optimize code directly within your editor.

---

Accessing Copilot Chat in VS Code
---------------------------------

There are two primary ways to access generative AI chats with the Pieces Copilot.

### via Right-Click Menu

1

### Highlight Any Code Segment

Highlight any code segment and right-click to open the tool menu

2

### Select a Management Option

Choose `Ask Copilot About Selection`, `Ask Copilot About Active File`, or `Explain Selection with Copilot` from the tool menu depending on your use case

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/chat/click_on_explain.gif)

### via Keyboard Shortcuts

You can also open up a dialogue with the Pieces Copilot—specifically the `Ask Copilot About Selection` option—by using the shortcut `⌘+shift+a` (macOS) or `ctrl+shift+a` (Windows/Linux).

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732737809517/52d91b01-2106-4c4d-9e39-607943fcdc33.png?auto=compress,format&format=webp&q=75)

### via Command Palette

Open the command palette with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux), and enter commands such as:

* `Pieces: Ask Copilot About Active File`: Provides insights for the current file open in your VS Code editor.
* `Pieces: Ask Copilot About Selection`: Generates suggestions or improvements for the selected code snippet.
* `Pieces: Ask Copilot About Workspace`: Offers context-aware assistance across your entire workspace.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732737874527/2573ead1-b1fc-4a41-838d-c3509d54d2e6.png?auto=compress,format&format=webp&q=75)

Read more about [what commands are available in the Pieces for VS Code Extension.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/commands)

### via AI Quick Actions

Use the new [AI Quick Actions](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code#using-ai-quick-actions) feature in the Pieces for VS Code Extension to quickly get an explanation for a confusing or forgotten function's logic.

Try using the `Pieces: Explain` tool above your code to start a conversation about a particular function.

This triggers the Copilot Chat window which outputs an explanation and summary of the code function.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/chat/pieces_explain_copilot_action.gif)

In addition, there is also `Pieces: Comment`, which you can read more about [here.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/documenting-code)

Contextualized Chats
--------------------

There are 3 different levels of contextual awareness that you can utilize when initiating a Copilot chat (or adding code to an existing chat) with the Pieces Copilot.

### Pieces: Ask Copilot About Selection

Using the `Pieces: Ask Copilot About Selection` command lets you interact with Copilot regarding specific code snippets, functions, or classes.

To use this feature:

1

### Choose a Portion of Code

Select a portion of code that you’d like to inquire about

2

### Open the Command Palette

Open the command palette with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux). Type and run the `Pieces: Ask Copilot About Selection` command

3

### Enter Your Prompt

Type your prompt in the text input field and press `return` (macOS) or `enter` (Windows/Linux)

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732738498253/f36bb3c0-3fae-4570-a5a1-b5baa8231d12.png?auto=compress,format&format=webp&q=75)

This approach is ideal for localized queries where you need **quick insights** or **guidance** **on specific code functionality**.

### Pieces: Ask Copilot About Active File

The `Pieces: Ask About Active File` feature focuses on the current file, offering tailored insights and assistance with debugging.

There are two ways to access this command:

1. Right-click inside your file and select the `Ask Copilot about Active File`, then enter your query into the dropdown text input field
2. Open the command palette using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux) and enter `Pieces: Ask About Active File`

Once you've entered your question, the Pieces Copilot will analyze the file's context to deliver precise responses.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/chat/ask_about_active_file.gif)

This feature is useful for gaining a better understanding of file dependencies, methods, and structure as well as detecting potential issues, suggesting improvements, and more.

The `Pieces: Ask About Active File` feature can also be applied during onboarding purposes to get helpful explanations for unfamiliar code.

### Pieces: Ask Copilot About Workspace

With the `Pieces: Ask Copilot About Workspace` command, you can extend the Pieces Copilot’s assistance to fit the entire project scope.

To use this command:

1

### Open the Command Palette

Open the command palette `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux)

2

### Enter the Command and Query

Enter `Pieces: Ask Copilot About Workspace` and type your question

This is ideal for large projects where a project-wide perspective is needed, specifically for Identifying inconsistencies in naming conventions across multiple files, in error handling, or resolving global code redundancies.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732738797364/b0e79b08-11d3-473a-a10a-daedb1667862.png?auto=compress,format&format=webp&q=75)

Adding Context to Copilot Chats
-------------------------------

There are a number of individual items you can add as context to a chat, namely `Files`**,** `Folders`**,** `Snippets`**,** `Websites`**,** and `Messages`**.**

This flexibility comes in handy when items you want to serve as reference material is not directly accessible from VS Code, or if you want to compartmentalize context and minimize overlap by keeping files or folders from other projects separate from your active file’s workflow.

To do this, you can select the **Starred Message Icon** in the bottom-left corner of your Copilot Chat window, openable from the VS Code sidebar.

Click the **Starred Message Icon** then add whatever context items you need.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/chat/add_files_to_context.gif)

### Adding Code Snippets

You can paste snippets of code as a code block inside of any Copilot Chat by clicking the `{ }` icon inside the chat window, then pasting in your code.

This is useful for bringing in code that isn’t present immediately in the active file as context, or for comparisons and suggestions.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734126869579/98158d85-2072-4479-8290-069fda210cff.png?auto=compress,format&format=webp&q=75)

### Extracting Code from Screenshots

You can also extract code from screenshots directly from the Copilot chat menu by selecting `Extract Code from Screenshot`, selecting the desired screenshot from your **Finder** (macOS) or **File Explorer** (Windows/Linux) menu, and confirming.

Pieces Copilot will then scan the screenshot and generate the code captured from the image into the chat, from which you can copy, insert at your cursor, save it as a snippet, and more.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/chat/extract_code_from_screenshot_vs_code.gif)

### Adding Folders from File Explorer

If you right-click on a folder or file in your file explorer in VS Code, you’ll see 3 options: `Pieces: Add to Copilot Context`, `Pieces: Ask Copilot` and `Pieces: Save File to Pieces`, so you can take any folder in the project you’re working in and immediately have the Pieces Copilot interact with it.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734128702503/4b2c56b7-8d51-42be-8d3c-f4b13b9f7701.png?auto=compress,format&format=webp&q=75)

Improving Code Consistency & Standardization
--------------------------------------------

The Pieces Copilot helps improve code quality by identifying inconsistencies and providing actionable suggestions for standardization.

### Naming Inconsistencies

If functions across your workspace use inconsistent naming patterns (e.g., `authenticateUser` in `authHandler.go` vs. `retrieveUserProfile` in `userHandler.go`), Pieces Copilot can suggest adopting a standardized naming convention for better readability and maintainability, like this:

```
Copy// authHandler.go
func authenticateUser(ctx context.Context, credentials Credentials) (User, error) {
    if credentials.Username == "" || credentials.Password == "" {
        return User{}, errors.New("missing credentials")
    }
}

```

### Inconsistent Error Handling

If error-handling strategies differ across files (e.g., structured errors in `authService.go` vs. inconsistent handling in `userService.go`), Pieces Copilot can help unify the approach:

```
Copy// authService.go
func LoginUser(credentials Credentials) (string, error) {
    token, err := authenticate(credentials)
    if err != nil {
        return "", fmt.Errorf("login failed: %w", err)
    }
    return token, nil
}

```

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Copilot](/products/extensions-plugins/visual-studio-code/pieces-copilot)

[Documenting Code](/products/extensions-plugins/visual-studio-code/pieces-copilot/documenting-code)

---

# Debugging Errors with Pieces Copilot

# Debugging Errors with Pieces Copilot

---

Debugging with Pieces Copilot
=============================

The Pieces Copilot in the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) offers AI-driven debugging that **simplifies the process of finding and fixing code issues in VS Code.** This feature not only speeds up troubleshooting but also provides an opportunity to learn from the fixes suggested by the AI.

---

Using the Debugging Tool
------------------------

To start debugging, locate the error or problematic code segment in your project.

Errors are usually indicated by **red underscoring** surrounding the error or problematic lines of code.

Then, right-click on the error, open the quick fix menu, and select `Pieces: Fix`. You will also see a **Yellow Lightbulb**. Clicking the **Yellow Lightbulb** will show `Pieces: Fix`, allowing you to quickly debug the error on that line.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/debugging_errors/pieces_fix_quick_action.gif)

Pieces Copilot will utilize whichever LLM you have currently active and analyze the issue, then open a Copilot chat with suggestions, regenerate the code, and provide the option `Insert at Cursor` with fresh code comments.

You can then choose to `Accept` or `Insert at Cursor`. `Insert at Cursor` will place the fixed code at the pointers position. `Accept` will replace the broken code with the fixed version.

Why Debug with Pieces Copilot?
------------------------------

Debugging with Pieces Copilot smoothens error resolution and provides AI-driven insights in an experience that doesn’t detract from your workflow in VS Code.

This saves time by reducing the need to search for solutions online or navigate extensive documentation, keeping your workflow efficient and cutting down on distractions.

Additionally, each suggested fix includes an explanation, helping you understand and improve your coding practices as you debug.

The Pieces Copilot proactively identifies code issues—simply highlight your code, click the **Yellow Lightbulb,** and let it analyze the problem(s).

Updated on March 5, 2025, 9:13 PM UTC

---

[Documenting Code](/products/extensions-plugins/visual-studio-code/pieces-copilot/documenting-code)

[Refactoring](/products/extensions-plugins/visual-studio-code/pieces-copilot/refactoring)

---

# Documenting Code with Pieces Copilot

# Documenting Code with Pieces Copilot

---

Code Comments
=============

With the Pieces Copilot inside the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode), you can quickly generate comments that capture the functionality and intent of your code—an often overlooked aspect of high-quality documentation.

---

Commenting Code Selections with Pieces Copilot
----------------------------------------------

Pieces Copilot can analyze and **comment on any selected portion of your code,** explaining its logic line by line to help make sure your code is not only readable but also easy to understand for others.

### via Right-Click Menu

To add comments to your code from the toolbar, select the desired lines, right-click, hover over `Pieces`, and choose `Comment Selection with Copilot`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/documenting_code/hover_over_comment.png)

Pieces Copilot will then generate clear, contextual comments for the selected code right inside the Copilot chat window.

You can then click `Insert at Cursor` to insert the fix at your cursors location. You can also click `Accept Changes` to place the code comments directly between your lines of code at precisely the location you selected the code from.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/documenting_code/insert_at_cursor_code_comments.gif)

### via Pieces: Comment

A quicker way of adding documentation to a function you may have previously overlooked is to click the `Pieces: Comment` tool, which appears above actionable functions in your code that are visible on your screen.

This new [AI Quick Actions](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code#using-ai-quick-actions) feature—similar to CodeLens actions that sit above functions nearest your cursor—can generate quick, insertable comments to explain the purpose and logic of your code.

To get started, look for the **AI Quick Actions** buttons above individual functions in your code.

Once you’ve located the **AI Quick Actions**, left-click on `Pieces: Comment`, then click `Accept Changes` to insert the newly commented code in the original code’s location.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/documenting_code/add_comments_quick_action.gif)

Why Use Code Comments?
----------------------

Code comments play a vital role in **maintaining a clean, well-documented codebase.**

They **provide context for reviewers** to focus on functionality and **make complex reasoning transparent,** ensuring code is easier to follow and maintain.

Good documentation improves code readability and accelerates onboarding for people unfamiliar with the codebase. This is a twofold benefit—it supports both **current and future development,** and creates a strong **foundation for upgrading and reiterating.**

Comments help you remember the purpose and function of the code, making it easier to revisit and understand after a long time away.

That’s why this specific feature is so powerful. Need a few hundred lines of code documented? No problem—just `Comment Selection with Copilot`.

Updated on March 5, 2025, 9:13 PM UTC

---

[Chat](/products/extensions-plugins/visual-studio-code/pieces-copilot/chat)

[Debugging Errors](/products/extensions-plugins/visual-studio-code/pieces-copilot/debugging-errors)

---

# Configuring LLM Settings in Pieces Copilot

# Configuring LLM Settings in Pieces Copilot

---

Switching LLMs
==============

The [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) currently supports 53 different LLMs (which includes both cloud-based and local models).

---

Available LLMs
--------------

We constantly update and configure our plugins and extensions, like the Pieces for VS Code Extension, to [work with the latest LLMs](https://github.com/pieces-app/support/discussions/121).

See the list of available models below.

---

### Cloud LLMs

The cloud-based models integrate effortlessly with the Pieces Copilot, offering high-performance and real-time responses to your queries.

PiecesOS offers a variety of 13 different cloud LLMs to suit any need you have.

---

| **Model Name** | **Context Window** | **Description** |
| --- | --- | --- |
| **GPT-4o Mini** | 128k tokens (Large) | Compact version of GPT-4o with efficiency. |
| --- | --- | --- |
| **GPT-4o** | 128k tokens (Large) | High-output GPT-4 variant for extended tasks. |
| **GPT-4 Turbo** | 128k tokens | Cost-efficient GPT-4 with large capacity. |
| **GPT-4** | 8k tokens | Advanced GPT-4 for high-quality responses. |
| **GPT-3.5** | 4k tokens | General-purpose versatile language model. |
| **Claude 3.5 Sonnet** | 40k tokens | Upgraded for improved reasoning. |
| **Claude 3 Sonnet** | 40k tokens | Designed for eloquent writing. |
| **Claude 3 Opus** | 40k tokens | High-capacity for detailed analysis. |
| **Claude 3 Haiku** | 40k tokens | Creative for precision tasks. |
| **Gemini Pro Chat** | 4k tokens | General-purpose language model. |
| **Gemini 2 Flash** | 4k tokens | Experimental, optimized for response time. |
| **Gemini 1.5 Pro** | 128k tokens (Large) | Advanced version with extended context. |
| **Gemini 1.5 Flash** | 256k tokens (Large) | Lightweight with extended context. |

---

### On-Device LLMs

We also support on-device LLMs for developers prioritizing privacy, security, or offline functionality.

[PiecesOS offers a variety of 41 different local LLMs, which you can see here.](https://beta.docs.pieces.app/products/core-dependencies/ollama/supported-models)

---

How To Configure Your LLM Runtime
---------------------------------

Switching your LLM model in the Pieces for VS Code Extension is a straightforward process, giving you the flexibility to choose the model that best suits your needs.

How to change your LLM:

1

### Open the Copilot Chat View

Open the Copilot Chat view by clicking the **Pieces Copilot** icon in the sidebar

2

### Locate the Active Model

Locate the **Active Model** in the bottom-left corner of the view where the current model (e.g., *GPT-4o Mini*) is displayed

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/llm_settings/circling_change_model_icon.gif)

3

### View the Models

Click on `Change Model` to open the **Manage Copilot Runtime** modal

4

### Choose Your Desired Model

Browse the list of local and cloud models, and select your preferred model

From here, you can browse and select from a variety of available models, such as the local and cloud-based models listed [in the tables on this page.](https://beta.docs.pieces.app/products/core-dependencies/ollama/supported-models)

Once you’ve chosen a new model, the switch is instant, allowing you to continue your work seamlessly with the selected model's capabilities—*no need to restart or refresh anything.*

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/llm_settings/selecting_llm_from_modal.gif)

---

Cloud-hosted models offer access to the latest AI capabilities, while on-device models ensure offline functionality, making Pieces Copilot adaptable to your specific workflow and environment.

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Refactoring](/products/extensions-plugins/visual-studio-code/pieces-copilot/refactoring)

[Pieces Drive](/products/extensions-plugins/visual-studio-code/pieces-drive)

---

# Refactoring Code Using Pieces Copilot

# Refactoring Code Using Pieces Copilot

---

Refactoring Code
================

Refactoring is vital for improving your code's structure and maintainability without changing its behavior. The [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) simplifies this process with its `Modify Selection with Copilot` feature.

---

Modifying your Code with Pieces Copilot
---------------------------------------

You can modify your code to include changes to error handling, changing function names, and adding functionality in two different ways.

### via Right-Click Menu

Right-click a highlighted piece of code you’d like to modify, then hover over `Pieces` and click on `Modify Selection with Copilot`.

Once you click `Modify Selection with Copilot`, Pieces Copilot will open the Copilot chat window in the VS Code sidebar, generating and showcasing the proposed changes.

You can review the modifications and decide whether to accept them, automatically integrating the updates into your codebase from the point the code was selected—i.e, at your cursor.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/refactoring/modify_selection.gif)

### via Command Palette

You can also access the `Modify Selection with Copilot` feature quickly using shortcut commands in VS Code.

Press `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux) to open the command palette, then type `Pieces: Modify Selection with Copilot`.

Once the input modal is visible at the top of your IDE, enter in your prompt—i.e, whatever changes you’d like made to the code—then press `return` (macOS) or `enter` (Windows/Linux).

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732739726856/596f060f-437e-4d6f-bdeb-132ab57ff444.png?auto=compress,format&format=webp&q=75)

This method offers a fast, efficient way to refactor and improve your code without interrupting your workflow.

You can use `Modify Selection with Copilot` to add detailed logging to critical functions for improved debugging and restructure long methods into smaller, more modular functions.

Updated on March 5, 2025, 9:13 PM UTC

---

[Debugging Errors](/products/extensions-plugins/visual-studio-code/pieces-copilot/debugging-errors)

[LLM Settings](/products/extensions-plugins/visual-studio-code/pieces-copilot/llm-settings)

---

# Pieces Copilot: AI Assistant in VS Code

# Pieces Copilot: AI Assistant in VS Code

---

Pieces Copilot
==============

The [Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot) in the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) integrates advanced AI capabilities into your coding workflow, like swappable LLMs for adding code comments, generating additional code, debugging, and more.

With the Pieces Copilot, you can generate intelligent code comments, access AI Quick Actions, and ask variable-context coding questions without leaving Visual Studio Code.

---

Generative AI Conversations
---------------------------

Facing an issue or not sure how to tackle a coding challenge? You can [ask the Pieces Copilot specific coding questions](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/chat) directly in VS Code using the Copilot Chat side window.

You can either ask any question that doesn’t require context, such as *“What is the basic format for a .JSON object?”* to more in-depth questions where the Pieces Copilot needs context from your active code.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732736633318/f96645a1-a52f-455e-b128-84cf9d2f2c80.png?auto=compress,format&format=webp&q=75)

Adding Conversation Context
---------------------------

Contextual awareness allows the Pieces Copilot to help you overcome obstacles faster by providing answers that are *actually* relevant to the current issue you’re facing, and to your code.

To use this feature, include details like error messages or [file context](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/chat#adjusting-conversation-context) for more accurate responses from the LLM conversation.

You can also [add multiple files and other items as context](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/chat#adding-items-to-copilot-chats) to your question, giving the Pieces Copilot comprehensive information to help you troubleshoot.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732736690908/a20309cb-50cc-44ab-9866-e5ab301bb4c8.png?auto=compress,format&format=webp&q=75)

Start by right-clicking some code and select one of the following options from the tool menu:

* `Ask Copilot About Selection`: Includes the active selected code with the Copilot chat.
* `Ask Copilot About Active File`: Includes the entire active file with the Copilot chat for a broader range of context.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/MAIN_pieces_copilot/hover_over_ask_active_file.png)

Pieces Copilot Tools
--------------------

Discover powerful AI-powered tools and features within the Pieces for VS Code Extension.

### Documenting Code

Easily generate insightful code comments with Pieces for VS Code Extension. By understanding your code’s structure and function, [Pieces Copilot creates clear and useful comments](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/documenting-code#commenting-code-selections-with-pieces-copilot) to enhance readability and simplify maintenance.  
  
To add documentation and comments to code, select the code snippet—no matter how long—then right-click, hover on `Pieces`, and click on `Comment Selection with Copilot`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/MAIN_pieces_copilot/hover_over_comment.png)

This opens the Pieces Copilot chat in the VS Code sidebar, which begins adding documentation to the highlighted snippet, from which you can select the `Insert at Cursor` option to add the comments to your code.

You can also click `Pieces: Add Comments`, which is an [AI Quick Action](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code#using-ai-quick-actions) that lives above accessible functions within your code.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/MAIN_pieces_copilot/add_comments_quick_action.gif)

Use this feature to maintain consistency in documentation and simplify handoffs for collaborative projects.

### Enhanced Debugging Tools

Detect and address code issues quickly with Pieces for VS Code Extension [Code Debugging feature.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/debugging-errors) It pinpoints problems, suggests solutions, and provides detailed context, making bug fixes faster and more intuitive.

The code debugging feature is particularly useful for tackling complex debugging tasks and ensuring code quality across projects.

Using this feature is simple—click the **lightbulb** icon near an error—marked with a red underline—to see the `Pieces: Fix` option, then click it.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/MAIN_pieces_copilot/pieces_fix_quick_action.gif)

### Generate & Update Code

With the Pieces for VS Code extension, you can enhance your workflow with two powerful Pieces Copilot commands:

* `Modify Selection with Copilot`: [Edit or transform the selected code snippet](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/refactoring#modifying-your-code-with-pieces-copilot) to improve readability, optimize performance, or adapt it for specific needs.
* `Explain Selection with Copilot`: [Get a clear explanation of what the selected code does](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/chat#accessing-pieces-copilot-in-vs-code), making it easier to understand and document.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731382876801/88c397c2-519e-45a6-b15d-53afc59fba02.png?auto=compress,format&format=webp?auto=compress,format&format=webp&q=75)

Selecting Your Pieces Copilot Runtime
-------------------------------------

Choose between [different LLMs directly within VS Code](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/llm-settings) by accessing the sidebar and selecting your preferred model by clicking the currently-utilized LLM under `Active Model`.

Options range from lightweight models for simple queries to advanced models for in-depth analysis, as well as **local** and **cloud-based LLMs.**

This flexibility allows you to tailor Pieces Copilot to your specific development needs, whether it’s speed or accuracy.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732737435734/dce7140b-934e-42ef-bb82-9cff7bd5b620.png?auto=compress,format&format=webp&q=75)

Read more about [what LLMs are available for use](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/configuration#supported-llms) with the Pieces for VS Code Extension.

Pieces Copilot As a Daily Driver
--------------------------------

The Pieces Copilot is a powerful, adaptable tool that grows with you as you use it—*so use it!*

---

Collaborative Coding Made Easy

Troubleshoot and Resolve Bugs Swiftly

Quick Prototyping

Skill Enhancement

Efficient Code Refactoring

---

[Download the Pieces for VS Code Extension today!](https://pieces.app/plugins/vs-code)

Updated on March 5, 2025, 9:13 PM UTC

---

[Get Started](/products/extensions-plugins/visual-studio-code/get-started)

[Chat](/products/extensions-plugins/visual-studio-code/pieces-copilot/chat)

---

# Edit and Update Snippets in VS Code

# Edit and Update Snippets in VS Code

---

Editing
=======

Maintaining an up-to-date library of code snippets in the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) is made easy through seamless editing.

---

How to Edit Snippets
--------------------

To modify an existing snippet, follow these steps:

1

### Open the Pieces Drive

Open the **Pieces Drive** via the VS Code sidebar

2

### Start Editing the Snippet

Locate a snippet you want to edit and select `Edit` from the quick menu or right click the snippet and select `Edit` from the menu

3

### Edit your Snippet

Make your changes, then save using `⌘+s` (macOS) or `ctrl+s` (Windows/Linux)

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/edit_and_update/editing_snippet.gif)

After saving, the editor will automatically return to the main snippet view, with your changes applied instantly.

Actions from the Pieces Drive View
----------------------------------

When you left-click on a saved snippet in the **Pieces Drive**, you are presented with a tool menu filled with Pieces functionalities—some of which are related to the [Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot), and others which are designated [material management](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive) actions.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/right_click_options_from_drive.png)

### Pieces Copilot Actions

To access the material management view, select one of the snippets from Pieces Drive. From this view, you can select a number of Copilot-centric actions—view them in the table below.

---

| `Add to Copilot Context` | Adds the snippet to the context of your existing Copilot Chat conversation. |
| --- | --- |
| `Ask Copilot` | Triggers the input modal and lets you type a prompt directly into the field without changing your active file view. |
| --- | --- |
| `Insert at Cursor` | Inserts the code snippet at the point of your cursor inside your active file. |
| `Shareable Links` | Shows shareable links that have been generated for that snippet, if applicable. |

---

### Material Management Actions

Below the Pieces Copilot actions, you can easily change a snippet’s name, description, classification, and other enriched metadata—view them in the table below.

---

| `Annotations` | Add, adjust or delete annotations for the snippet. |
| --- | --- |
| `Related Links` | Add or remove links to the snippet’s metadata. |
| --- | --- |
| `Tags` | Add or remove tags to the snippet’s metadata. |
| `Reclassify` | Set your own custom snippet classification. |
| `Edit Selected Material` | Edit the content of the snippet. |
| `Rename` | Change the name (title) of the snippet as it appears in your repository of saved materials. |
| `Delete` | Delete the snippet. |

---

Additional Tools while Editing
------------------------------

*Layers upon layers of functionality*—that’s the goal of all Pieces for Developers plugins and extensions.

When you edit a snippet (by locating it in the **Pieces Drive** menu and clicking `Edit`), every single bit of Pieces functionality is available to you, even though you are in a view that’s removed from your main file.

Instead, the `Edit` view *becomes* your main file, so you can [generate code comments, debug, add it to context, and more.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot)

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/edit_and_update/comments_inside_editing_snippet_view.gif)

Updated on March 5, 2025, 9:13 PM UTC

---

[Search & Reuse](/products/extensions-plugins/visual-studio-code/pieces-drive/search-reuse)

[Sharing](/products/extensions-plugins/visual-studio-code/pieces-drive/sharing)

---

# Saving Snippets in VS Code with Pieces

# Saving Snippets in VS Code with Pieces

---

Saving
======

The [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) provides several ways to save code snippets so your most useful code is always at hand.

---

Saving Snippets
---------------

There are two ways to save code with the Pieces for VS Code Extension—through the right-click menu, or by saving with hotkeys.

You can use this feature to save all kinds of useful code materials, like:

* API endpoint definitions
* Utility functions or commonly used helper methods
* Code templates for starting new modules
* Reusable logic for error handling or authentication

### via Right-Click Menu

To capture useful code snippets and save them to your Pieces Drive via the right-click menu:

1

### Choose your Snippet

Highlight the code you want to save

2

### Open the Pieces Menu

Right-click on the highlighted code and hover on the `Pieces` option

3

### Save your Snippet

Select either `Save Current Selection to Pieces` or `Save Active File to Pieces`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/saving_snippets/right_click_save_snippet.gif)

This will trigger a success message in the bottom-right corner of your screen to let you know that the save was successful.

### via Keyboard Shortcuts

If you’re a developer who avoids using their cursor as much as possible, you can instantly save your selected code using keyboard shortcuts.

To do this:

1

### Choose your Snippet

Highlight the code you want to save

2

### Save your Snippet

Use the `⌘+shift+v` (macOS) or `ctrl+shift+v` (Windows/Linux) shortcut

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/saving_snippets/keybind_save_snippet.gif)

### via Copilot Chat

You can take any code block existing in your Copilot Chat and click `Save to Pieces`—like code generated by Pieces Copilot, code blocks you added as context that weren’t saved as individual snippets, and any other kind of code.

To do so, click the `Save to Pieces` button on any code block within the Copilot Chat view.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734128918736/49e96fb8-7d25-4f16-96ce-16ed9e3fd6b9.png?auto=compress,format&format=webp&q=75)

Saving Active Files to Pieces
-----------------------------

If you want to save a *really* big snippet, try saving your entire file directly to Pieces Drive.

To save your active file:

1

### Right-Click the File

Right-click within your active file

2

### Locate Pieces Options

Hover over the `Pieces` item

3

### Save the File

Click `Save Active File to Pieces`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/saving_snippets/save_active_file_to_pieces.png)

There are plenty of scenarios in which saving an entire file to your Pieces Drive is ideal, such as to:

* **Preserve Complex Codebases**: Save larger, cohesive files like utility libraries, configuration files, or classes to ensure you capture all interconnected functionality in one place.
* **Reuse in Future Projects**: Easily repurpose full files in new projects without reconstructing smaller snippets.
* **Keep Independent Files Versioned**: Maintain standalone files, such as scripts or tools, as independent backups or versions outside of source control.

What’s Stored When You Save a Snippet
-------------------------------------

When you save a snippet to your Pieces Drive, it’s more than just the code that gets stored.

The Pieces Copilot captures:

* `Type`: Categorizes the snippet (e.g., API call, function, class) with it’s code language.
* `Associated Tags`: Keywords associated with the snippet for easier searching.
* `Custom Description`**:** Specifies precisely which *lines* (in numerical form) the snippet is from, as well as the file from which it originated—very useful for mind-mapping.
* `Smart Description`: AI-generated descriptions that summarize the snippet’s purpose and function.
* `Suggested Searches`: Related searches that help you discover similar snippets.
* `Related Links`: References to documentation, code repositories, or other relevant resources.
* `Related People`: Associated collaborators or contributors.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732741621504/140ab238-3a62-45cd-b454-a56e2dca5d0c.png?auto=compress,format&format=webp&q=75)

Additionally, the Pieces Copilot **scans saved snippets for sensitive information**, such as API keys, passwords, or authentication tokens, to ensure no confidential data is accidentally stored.

Where Saved Snippets Live
-------------------------

Saved snippets are stored locally on your device, ensuring accessibility even when offline. This also means that any Pieces for Developers extension or plugin—or even the Pieces Desktop App—has constant, up-to-date access to your saved materials with Pieces Drive.

There are two ways to find your saved snippets—via the `Pieces Drive` menu, or with the `Pieces: Search Pieces` feature.

[Read more about how to find your saved snippets here.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/search-reuse#finding-saved-snippets)

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Drive](/products/extensions-plugins/visual-studio-code/pieces-drive)

[Search & Reuse](/products/extensions-plugins/visual-studio-code/pieces-drive/search-reuse)

---

# Search and Reuse Snippets in VS Code

# Search and Reuse Snippets in VS Code

---

Searching
=========

The [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) makes finding saved snippets quick and seamless, helping you stay productive without breaking your workflow.

---

Finding Saved Snippets
----------------------

To locate your snippets, open a file in VS Code and use one of two methods—searching with the **Pieces Drive** menu, or with keyboard shortcuts.

### via Pieces Drive

If you want to access your saved snippets directly within the VS Code editor, you can:

1

### Locate Pieces Drive

Open the `Pieces Drive` from the VS Code sidebar

2

### Filter, Search, and Explore

Once the `Pieces Drive` is open, you have access to a wide range of options that allow you sort through your snippets

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/opening_a_snippet.gif)

### via Search Feature

You can also use `Pieces: Search Pieces` to find specific snippets—this is where you’ll **enter a specific query**, which is useful when you know exactly what you want:

1

### Open the Command Palette

Open the **Command Palette** using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux)

2

### Enter the Command

Type `Pieces: Search Pieces`

3

### Enter your Search Query

Enter your search query, **scrolling or using the arrow keys** to navigate the list

4

### Choose your Desired Snippet

Press `return` (macOS) or `enter` (Windows/Linux) on your desired snippet to open it and it’s saved metadata in a new tab

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/search_snippets.gif)

You can search with tags, descriptions, names, types, or even languages themselves to narrow down your search.

Adding Filters to your Search
-----------------------------

Saved Snippets being viewed in the **Pieces Drive** can be filtered down by snippet tags, coding languages, and snippet titles.

To filter through your snippets:

1

### Open Pieces Drive

Open `Pieces Drive` via the VS Code sidebar

2

### Select the Search Bar

Select the search bar at the top of the Pieces Drive

3

### Choose the Filter Option

After clicking on the search bar, you’ll have the option to quick filter by `Titles`, `Annotations`, or `Content`

4

### Enter your Query

Using the filter, enter a search query in the search bar

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/filtering_snippets.gif)

When you’ve finished entering your filters, the Pieces Explorer will only display the snippets that match your filters. You can clear this by clicking the siphon icon with an `x` over it.

For any tags you don’t want to set, you can leave them blank by just pressing `return` (macOS) or `enter` (Windows/Linux).

Viewing and Reusing Saved Snippets
----------------------------------

[Saved snippets](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets) can be viewed alongside their saved metadata by opening up them up directly from the **Pieces Drive** or by clicking on them once they’ve been found using the `Pieces: Search Pieces` function from the dropdown list. You can also right click on the editor and select `Search Pieces` in the right-click options.

After opening a snippet, the **snippet in markdown preview mode** opens up in a separate window.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/opened_markdown_snippet.png)

From this view, you can then highlight the code and right-click to copy the code to your clipboard, or use the `⌘+c` (macOS) or `ctrl+c` (Windows/Linux) shortcut.

### via Right-Click Menu

The Pieces for VS Code Extension provides a host of actions that appear once you right-click a snippet from within the **Pieces Drive** menu.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/right_click_menu_drive.png)

There are a number of available material management and Pieces Copilot-related actions available on this menu, [which you can read more about here](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/edit-update#actions-from-the-editing-view)—or view an expanded table of them below.

### via Pieces Sidebar

You can view snippets by opening up the Pieces Drive sidebar in your VS Code by clicking the **Pieces Drive** icon on the left-hand side of your screen.

Once in the sidebar, you can insert a snippet and place it exactly where you want it in your code by clicking `Insert at` Cursor.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/insert_at_cursor.gif)

You can also right-click a snippet and select `Copy` to copy it to the clipboard, allowing you to paste it anywhere you need.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/drive_copy_to_clipboard.png)

### Previewing Saved Snippets

While using the `Pieces: Search Pieces` function, you can click on one of the snippets on the dropdown list to view it’s code before selecting the snippet.

---

| `Add to Copilot Context` | `Ask Copilot` | `Copy` |
| --- | --- | --- |
| `Insert at Cursor` | `Shareable Links` | `Annotations` |
| --- | --- | --- |
| `Links` | `Tags` | `Reclassify` |
| `Edit` | `Rename` | `Delete` |

---

Real-Time Snippet Streaming
---------------------------

Every product within the Pieces Suite utilizes [PiecesOS](https://docs.pieces.app/installation-getting-started/pieces-os) to gather information regarding the context of your snippets.

When you modify a snippet in the [Pieces for Developers Desktop App](https://docs.pieces.app/installation-getting-started/what-am-i-installing)—like changing its name or description, tags, or any other metadata—those updates are automatically shown in your **Pieces Drive** without the need for refreshing.

If your snippets aren’t updating immediately, refer to the [troubleshooting guide](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/troubleshooting) for instructions on how to refresh your snippet list.

Updated on March 5, 2025, 9:13 PM UTC

---

[Saving Snippets](/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets)

[Edit & Update](/products/extensions-plugins/visual-studio-code/pieces-drive/edit-update)

---

# Sharing Snippets from VS Code with Pieces

# Sharing Snippets from VS Code with Pieces

---

Sharing Snippets
================

The `Share` feature in the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) makes sharing your saved code snippets with colleagues, teams, or the wider development community easy.

With this feature, you can generate a unique, shareable link for any snippet directly from the VS Code tool window interface.

---

What Information Gets Shared
----------------------------

When a snippet is saved to the Pieces Cloud, the code is [enriched with valuable information](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets/saving-snippets#whats-stored-when-you-save-a-snippet) such as related people, links, annotations, tags, and an automatically-generated description.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731623145740/ec60e89f-ac2f-4396-b6a8-ad94f57d9745.png?auto=compress,format&format=webp&q=75)

How to Share a Saved Snippet
----------------------------

There are 3 ways to share saved snippets—by using the tool menu, keyboard shortcuts, or by right-clicking on previously-saved snippets within the **Pieces Drive.**

This link can easily be shared via email, Discord, Slack, or other platforms. The recipient can view the snippet **without needing to have a Pieces account.**

### via Right-Click Menu

Shareable Pieces links for your code snippets can be generated by right-clicking a portion of selected code, hovering over the `Pieces` item in the pop-up menu, then clicking `Share`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/sharing/share_right_click.png)

### via Keyboard Shortcut

You can share snippets using the `⌘+shift+i` (macOS) or `ctrl+shift+i` (Windows/Linux) after highlighting your desired lines of code in your active file.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/sharing/generating_snippet_shortcuts.gif)

Generating Links for Existing Saved Snippets
--------------------------------------------

If you save a material, but didn’t generate a shareable link at the time—no problem. You can still generate a shareable link (or copy, regenerate or delete the existing link) from the **Pieces Drive.**

1

### Open the Pieces Drive

Open the **Pieces Drive** via the Pieces Drive icon in the VS Code sidebar

2

### Share the Snippet

After finding the snippet you want to share, right-click it and choose `Generate Shareable Link` from the options.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/sharing/generate_shareable_link.png)

3

### Wait for the Link and Copy

After generating the link, a new modal will appear, wait for the snippet to be shared with an automatically generated link or manually copy the link from the modal

If you have generated a link for that snippet previously, the `More Actions` menu options will automatically adjust to include 3 new actions:

* `Open in Browser`: Opens the existing shareable link in your desired browser.
* `Refresh Link`: Regenerates the link—this is important if a snippet has been edited or updated, as a new link will be required to contain the new changes.
* `Revoke Link`: Revokes the shareable link so that anyone with the existing link to that snippet will be barred from future access.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/sharing/generate_share_link_drive.png)

Enriched Sharing Experience
---------------------------

When you `Share` a snippet, it’s not just the code that’s included. The snippet comes with additional metadata to provide context—[you can read more about that here.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets#whats-stored-when-you-save-a-snippet)

* `Snippet Type`: Identify the language or framework, such as Python or React.
* `Tags`: Useful keywords for quick categorization.
* `Description`: A short summary of what the snippet does.
* `Related Links`: Helpful resources or documentation tied to the snippet.
* `Author Information`: A record of who created the snippet.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731514684555/707b0769-5b68-448c-811b-a44d2414a10d.png?auto=compress,format&format=webp?auto=compress,format&format=webp&q=75)

Sensitive Information Watchdog
------------------------------

The `Share` feature does more than just allow you to effectively share snippets across your entire team and other communities, though.

You'll see a section titled **Sensitive Information:**

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732743695009/a44bf8b1-67b7-4db0-a6af-87798c8df9ed.png?auto=compress,format&format=webp&q=75)

Our in-house ML model scans snippets for potentially sensitive information, like API keys or passwords, and alerts you so that you can make an informed decision before sharing the snippet.

The scan happens locally using on-device machine learning models **before the snippet is uploaded to the cloud** for sharing—that way, you can make an informed decision about sharing your code.

Updated on March 5, 2025, 9:13 PM UTC

---

[Edit & Update](/products/extensions-plugins/visual-studio-code/pieces-drive/edit-update)

[Commands](/products/extensions-plugins/visual-studio-code/commands)

---

# Using Snippets in VS Code with Pieces Drive

# Using Snippets in VS Code with Pieces Drive

---

Pieces Drive
============

The [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) streamlines your development process by providing powerful features like [saving](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets) and [reusing](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/search-reuse) snippets, so your most important code is always available.

With the [Pieces for Visual Studio Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode), you can save all kinds of code snippets directly to your Pieces Drive. Easily [find them](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/search-reuse#finding-saved-snippets) and [edit them](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/edit-update#how-to-edit-snippets) whenever, wherever, and however you need.

Let’s take a look at some examples:

---

| `Logging Utilities` | A helper function for detailed server-side logging with timestamps and error levels. | Speeds up debugging and monitoring by inserting reliable logging methods. |
| --- | --- | --- |
| `Validation Functions` | A function to validate JSON payloads or form inputs before submission. | Ensures data integrity with reusable, thoroughly tested validation logic. |
| --- | --- | --- |
| `API Integration Code` | Prewritten `axios` code for making GET or POST requests, complete with error handling and response parsing. | Reduces repetitive work when integrating RESTful APIs or GraphQL endpoints. |
| `Component Templates` | A React functional component template with basic hooks and styling setup. | Provides a consistent starting point for building new components. |
| `Database Queries` | A MongoDB query to retrieve active user data filtered by last login. | Streamlines database tasks by reusing optimized query patterns. |

---

Boosting Productivity with Snippet Management
---------------------------------------------

With the Pieces for VS Code Extension, you can improve your productivity, standardize code, and maintain clarity across teams and projects by leveraging prewritten code.

The Pieces for VS Code Extension connects you with your development environment, so you can focus on what matters—building great software—while empowering you with tools for efficient code reuse.

* **Improved Productivity:** Focus on solving new problems rather than resolving old ones.
* **Contextual Awareness:** Snippets enriched with metadata, descriptions, and links to relevant searches help you remember the origin, purpose, and ideal usage scenarios for each piece of code.
* **Code Standardization:** Sharing best practices and reusable components helps developers ensure uniform coding practices and conventions are available across different teams and projects.

By using the Pieces for VS Code Extension you can capture and manage these snippets in Pieces Drive to streamline daily tasks and enhance your workflow in several ways:

### Save & Organize

Easily [save a function, script, or piece of boilerplate](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets) right from the tool menu or with a keyboard shortcut.

Not only are these snippets saved to your personal Pieces Drive, but they’re enriched with context, metadata, and tags for easy retrieval.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732740557545/d30c5f19-ca19-454a-8e1c-d0e9db4b95f5.png?auto=compress,format&format=webp&q=75)

To do this save a code snippet, right-click, and then hover on `Pieces` and choose `Save Current Selection to Pieces`—or you can use the keyboard shortcut by using `⌘+shift+’` (macOS) or `ctrl+shift+v` (Windows/Linux).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/MAIN_using_snippets/keybind_save_snippet.gif)

### Search & Reuse

You can directly [search through your collection of saved materials](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/search-reuse) from within VS Code, allowing you to quickly find snippets by keyword or context.

To search, you can access the `Search Pieces` action in to ways—either from the command palette or with the right-click menu.

In both scenarios, you then enter your query into the dropdown menu, and press `return`(macOS) or `enter` (Windows/Linux).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/MAIN_using_snippets/show_new_pieces_drive.png)

Any related snippets will appear in the results list. From there, you can press `return`(macOS) or `enter` (Windows/Linux) to view your snippet, complete with all its saved context, rendered neatly inside the editor.

### Edit & Update

Your snippets can evolve as your project grows as you adapt to changing project requirements, or when you move onto new files within your codebase.

In the `Saved Materials` section of the **Pieces Drive**, you can [open your saved snippets or update the code](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/edit-update#how-to-edit-snippets) to meet current needs, and save the updated version back to Pieces.

This ensures that your library stays current, relevant, and aligned with your project’s progress—plus, making your materials more efficient only helps you in the long run.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/MAIN_using_snippets/right_click_menu_drive.png)

### Sharing

[Share your snippets directly with team members](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets/sharing#how-to-share-a-saved-snippet), even if they don’t use Pieces.

You can send a shareable link containing your code snippet to anyone, even if they don’t use Pieces or have a Pieces for Developers account.

Sharing bits of code you find useful can remove productivity blockers if co-developer is unfamiliar with the project, or if they’re a junior.

For example, a teammate working on server monitoring can use your shared script to automate daily tasks without additional setup.

These shared links also include their [original enriched metadata](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets/saving-snippets#whats-stored-when-you-save-a-snippet), like tags, descriptions, and other information.

To share a snippet in VS Code, you can either highlight some lines of code, right-click, hover over `Pieces` and click `Share` or use keyboard shortcuts—`⌘+shift+i` (macOS) or `ctrl+shift+i` (Windows/Linux).

This creates a link you can share with teammates, ensuring easy access to your reusable code.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732741148257/c227792e-1abb-432e-9b46-15a486403994.png?auto=compress,format&format=webp&q=75)

Use Cases
---------

With Pieces for VS Code Extension, your snippets become a robust library of reusable code that you can organize, search, edit, and share across projects.

Here are some examples of how you can use them:

### Reusable Scheduling Functions

Imagine you’re frequently working on projects that involve scheduling tasks at regular intervals.

Instead of rewriting the same logic for each new project, you can [save an evergreen snippet to your Pieces Drive.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets/saving-snippets#saving-snippets)

This allows you to reuse a well-crafted scheduling function across multiple applications that’s useful in a variety of scenarios:

```
Copypackage main

import (
	"fmt"
	"time"
)

// A reusable function to schedule tasks at a specified interval
func scheduleTask(interval time.Duration, task func()) {
	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			task()
		}
	}
}

```

### File System Monitoring

If you frequently work on projects that involve monitoring file system changes, you can [save a helpful snippet to your Pieces Drive](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets/saving-snippets#saving-snippets) that does exactly that, using generic and reusable naming conventions:

```
Copypackage main

import (
	"fmt"
	"log"
	"github.com/fsnotify/fsnotify"
)

// A reusable function to monitor file system changes
func watchFileChanges(path string) {
	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		log.Fatal(err)
	}
	defer watcher.Close()

	err = watcher.Add(path)
	if err != nil {
		log.Fatal(err)
	}

	for {
		select {
		case event := <-watcher.Events:
			if event.Op&fsnotify.Write == fsnotify.Write {
				fmt.Println("Modified file:", event.Name)
			}
		case err := <-watcher.Errors:
			fmt.Println("Error:", err)
		}
	}
}

```

**Additional Snippet Scenarios**
--------------------------------

Read up on some additional scenarios and use cases for Pieces Drive and see how the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) could benefit you and your workflow.

---

Testing Framework Templates

Command-Line Utilities

Error Handling & Logging

Quickly Create New Projects

---

[Download the Pieces for VS Code Extension today!](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode)

Updated on March 5, 2025, 9:13 PM UTC

---

[LLM Settings](/products/extensions-plugins/visual-studio-code/pieces-copilot/llm-settings)

[Saving Snippets](/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets)

---

# Troubleshooting Pieces Extension in VS Code

# Troubleshooting Pieces Extension in VS Code

---

Troubleshooting
===============

This page will guide you through resolving common issues with the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) and connecting with the Pieces support team or community.

---

Having Trouble with Pieces for VS Code?
---------------------------------------

If the Pieces for VS Code Extension isn’t working as expected, verify the following steps:

### Ensure You Have the Latest Versions

First, confirm you’re using the latest version of the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) from the Visual Studio Marketplace as well as the latest version of [PiecesOS](https://beta.docs.pieces.app/products/core-dependencies/pieces-os). The minimum functioning version permitted is currently **10.1.12.**

### Check PiecesOS Status

Check to make sure PiecesOS is running. PiecesOS must be running for the Pieces for VS Code Extension to work.

### Restart VS Code After Updates

If you’ve recently installed or updated PiecesOS or the Pieces for VS Code Extension, restart the IDE.

Contact the [Pieces support team](https://getpieces.typeform.com/to/mCjBSIjF#docs-vscode) if the issue still persists.

### Refreshing Copilot Chats

You may find that you need to restart or refresh the Pieces Copilot chat, especially if you’re using a cloud LLM and disconnect from WiFi.

These scenarios can occasionally cause the LLM to ‘hang’—which is to appear as if generating a response, but eventually timing out or entering into an infinite response loop, or experience other issues.

To do this, click the **three vertical dots** in the top-right corner of your Copilot Chat window, and click `Refresh`.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732750665281/0ed8f785-aa34-4285-8b68-022aff96dda9.png?auto=compress,format&format=webp&q=75)

Updated on March 5, 2025, 9:13 PM UTC

---

[Configuration](/products/extensions-plugins/visual-studio-code/configuration)

[Visual Studio Extension](/products/extensions-plugins/visual-studio)

---

# Saving Snippets in VS Code with Pieces

# Saving Snippets in VS Code with Pieces

---

Saving
======

The [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) provides several ways to save code snippets so your most useful code is always at hand.

---

Saving Snippets
---------------

There are two ways to save code with the Pieces for VS Code Extension—through the right-click menu, or by saving with hotkeys.

You can use this feature to save all kinds of useful code materials, like:

* API endpoint definitions
* Utility functions or commonly used helper methods
* Code templates for starting new modules
* Reusable logic for error handling or authentication

### via Right-Click Menu

To capture useful code snippets and save them to your Pieces Drive via the right-click menu:

1

### Choose your Snippet

Highlight the code you want to save

2

### Open the Pieces Menu

Right-click on the highlighted code and hover on the `Pieces` option

3

### Save your Snippet

Select either `Save Current Selection to Pieces` or `Save Active File to Pieces`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/saving_snippets/right_click_save_snippet.gif)

This will trigger a success message in the bottom-right corner of your screen to let you know that the save was successful.

### via Keyboard Shortcuts

If you’re a developer who avoids using their cursor as much as possible, you can instantly save your selected code using keyboard shortcuts.

To do this:

1

### Choose your Snippet

Highlight the code you want to save

2

### Save your Snippet

Use the `⌘+shift+v` (macOS) or `ctrl+shift+v` (Windows/Linux) shortcut

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/saving_snippets/keybind_save_snippet.gif)

### via Copilot Chat

You can take any code block existing in your Copilot Chat and click `Save to Pieces`—like code generated by Pieces Copilot, code blocks you added as context that weren’t saved as individual snippets, and any other kind of code.

To do so, click the `Save to Pieces` button on any code block within the Copilot Chat view.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734128918736/49e96fb8-7d25-4f16-96ce-16ed9e3fd6b9.png?auto=compress,format&format=webp&q=75)

Saving Active Files to Pieces
-----------------------------

If you want to save a *really* big snippet, try saving your entire file directly to Pieces Drive.

To save your active file:

1

### Right-Click the File

Right-click within your active file

2

### Locate Pieces Options

Hover over the `Pieces` item

3

### Save the File

Click `Save Active File to Pieces`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/saving_snippets/save_active_file_to_pieces.png)

There are plenty of scenarios in which saving an entire file to your Pieces Drive is ideal, such as to:

* **Preserve Complex Codebases**: Save larger, cohesive files like utility libraries, configuration files, or classes to ensure you capture all interconnected functionality in one place.
* **Reuse in Future Projects**: Easily repurpose full files in new projects without reconstructing smaller snippets.
* **Keep Independent Files Versioned**: Maintain standalone files, such as scripts or tools, as independent backups or versions outside of source control.

What’s Stored When You Save a Snippet
-------------------------------------

When you save a snippet to your Pieces Drive, it’s more than just the code that gets stored.

The Pieces Copilot captures:

* `Type`: Categorizes the snippet (e.g., API call, function, class) with it’s code language.
* `Associated Tags`: Keywords associated with the snippet for easier searching.
* `Custom Description`**:** Specifies precisely which *lines* (in numerical form) the snippet is from, as well as the file from which it originated—very useful for mind-mapping.
* `Smart Description`: AI-generated descriptions that summarize the snippet’s purpose and function.
* `Suggested Searches`: Related searches that help you discover similar snippets.
* `Related Links`: References to documentation, code repositories, or other relevant resources.
* `Related People`: Associated collaborators or contributors.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732741621504/140ab238-3a62-45cd-b454-a56e2dca5d0c.png?auto=compress,format&format=webp&q=75)

Additionally, the Pieces Copilot **scans saved snippets for sensitive information**, such as API keys, passwords, or authentication tokens, to ensure no confidential data is accidentally stored.

Where Saved Snippets Live
-------------------------

Saved snippets are stored locally on your device, ensuring accessibility even when offline. This also means that any Pieces for Developers extension or plugin—or even the Pieces Desktop App—has constant, up-to-date access to your saved materials with Pieces Drive.

There are two ways to find your saved snippets—via the `Pieces Drive` menu, or with the `Pieces: Search Pieces` feature.

[Read more about how to find your saved snippets here.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/search-reuse#finding-saved-snippets)

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Drive](/products/extensions-plugins/visual-studio-code/pieces-drive)

[Search & Reuse](/products/extensions-plugins/visual-studio-code/pieces-drive/search-reuse)

---

# Search and Reuse Snippets in VS Code

# Search and Reuse Snippets in VS Code

---

Searching
=========

The [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) makes finding saved snippets quick and seamless, helping you stay productive without breaking your workflow.

---

Finding Saved Snippets
----------------------

To locate your snippets, open a file in VS Code and use one of two methods—searching with the **Pieces Drive** menu, or with keyboard shortcuts.

### via Pieces Drive

If you want to access your saved snippets directly within the VS Code editor, you can:

1

### Locate Pieces Drive

Open the `Pieces Drive` from the VS Code sidebar

2

### Filter, Search, and Explore

Once the `Pieces Drive` is open, you have access to a wide range of options that allow you sort through your snippets

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/opening_a_snippet.gif)

### via Search Feature

You can also use `Pieces: Search Pieces` to find specific snippets—this is where you’ll **enter a specific query**, which is useful when you know exactly what you want:

1

### Open the Command Palette

Open the **Command Palette** using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux)

2

### Enter the Command

Type `Pieces: Search Pieces`

3

### Enter your Search Query

Enter your search query, **scrolling or using the arrow keys** to navigate the list

4

### Choose your Desired Snippet

Press `return` (macOS) or `enter` (Windows/Linux) on your desired snippet to open it and it’s saved metadata in a new tab

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/search_snippets.gif)

You can search with tags, descriptions, names, types, or even languages themselves to narrow down your search.

Adding Filters to your Search
-----------------------------

Saved Snippets being viewed in the **Pieces Drive** can be filtered down by snippet tags, coding languages, and snippet titles.

To filter through your snippets:

1

### Open Pieces Drive

Open `Pieces Drive` via the VS Code sidebar

2

### Select the Search Bar

Select the search bar at the top of the Pieces Drive

3

### Choose the Filter Option

After clicking on the search bar, you’ll have the option to quick filter by `Titles`, `Annotations`, or `Content`

4

### Enter your Query

Using the filter, enter a search query in the search bar

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/filtering_snippets.gif)

When you’ve finished entering your filters, the Pieces Explorer will only display the snippets that match your filters. You can clear this by clicking the siphon icon with an `x` over it.

For any tags you don’t want to set, you can leave them blank by just pressing `return` (macOS) or `enter` (Windows/Linux).

Viewing and Reusing Saved Snippets
----------------------------------

[Saved snippets](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets) can be viewed alongside their saved metadata by opening up them up directly from the **Pieces Drive** or by clicking on them once they’ve been found using the `Pieces: Search Pieces` function from the dropdown list. You can also right click on the editor and select `Search Pieces` in the right-click options.

After opening a snippet, the **snippet in markdown preview mode** opens up in a separate window.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/opened_markdown_snippet.png)

From this view, you can then highlight the code and right-click to copy the code to your clipboard, or use the `⌘+c` (macOS) or `ctrl+c` (Windows/Linux) shortcut.

### via Right-Click Menu

The Pieces for VS Code Extension provides a host of actions that appear once you right-click a snippet from within the **Pieces Drive** menu.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/right_click_menu_drive.png)

There are a number of available material management and Pieces Copilot-related actions available on this menu, [which you can read more about here](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/edit-update#actions-from-the-editing-view)—or view an expanded table of them below.

### via Pieces Sidebar

You can view snippets by opening up the Pieces Drive sidebar in your VS Code by clicking the **Pieces Drive** icon on the left-hand side of your screen.

Once in the sidebar, you can insert a snippet and place it exactly where you want it in your code by clicking `Insert at` Cursor.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/insert_at_cursor.gif)

You can also right-click a snippet and select `Copy` to copy it to the clipboard, allowing you to paste it anywhere you need.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/drive_copy_to_clipboard.png)

### Previewing Saved Snippets

While using the `Pieces: Search Pieces` function, you can click on one of the snippets on the dropdown list to view it’s code before selecting the snippet.

---

| `Add to Copilot Context` | `Ask Copilot` | `Copy` |
| --- | --- | --- |
| `Insert at Cursor` | `Shareable Links` | `Annotations` |
| --- | --- | --- |
| `Links` | `Tags` | `Reclassify` |
| `Edit` | `Rename` | `Delete` |

---

Real-Time Snippet Streaming
---------------------------

Every product within the Pieces Suite utilizes [PiecesOS](https://docs.pieces.app/installation-getting-started/pieces-os) to gather information regarding the context of your snippets.

When you modify a snippet in the [Pieces for Developers Desktop App](https://docs.pieces.app/installation-getting-started/what-am-i-installing)—like changing its name or description, tags, or any other metadata—those updates are automatically shown in your **Pieces Drive** without the need for refreshing.

If your snippets aren’t updating immediately, refer to the [troubleshooting guide](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/troubleshooting) for instructions on how to refresh your snippet list.

Updated on March 5, 2025, 9:13 PM UTC

---

[Saving Snippets](/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets)

[Edit & Update](/products/extensions-plugins/visual-studio-code/pieces-drive/edit-update)

---

# Sharing Snippets from VS Code with Pieces

# Sharing Snippets from VS Code with Pieces

---

Sharing Snippets
================

The `Share` feature in the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) makes sharing your saved code snippets with colleagues, teams, or the wider development community easy.

With this feature, you can generate a unique, shareable link for any snippet directly from the VS Code tool window interface.

---

What Information Gets Shared
----------------------------

When a snippet is saved to the Pieces Cloud, the code is [enriched with valuable information](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets/saving-snippets#whats-stored-when-you-save-a-snippet) such as related people, links, annotations, tags, and an automatically-generated description.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731623145740/ec60e89f-ac2f-4396-b6a8-ad94f57d9745.png?auto=compress,format&format=webp&q=75)

How to Share a Saved Snippet
----------------------------

There are 3 ways to share saved snippets—by using the tool menu, keyboard shortcuts, or by right-clicking on previously-saved snippets within the **Pieces Drive.**

This link can easily be shared via email, Discord, Slack, or other platforms. The recipient can view the snippet **without needing to have a Pieces account.**

### via Right-Click Menu

Shareable Pieces links for your code snippets can be generated by right-clicking a portion of selected code, hovering over the `Pieces` item in the pop-up menu, then clicking `Share`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/sharing/share_right_click.png)

### via Keyboard Shortcut

You can share snippets using the `⌘+shift+i` (macOS) or `ctrl+shift+i` (Windows/Linux) after highlighting your desired lines of code in your active file.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/sharing/generating_snippet_shortcuts.gif)

Generating Links for Existing Saved Snippets
--------------------------------------------

If you save a material, but didn’t generate a shareable link at the time—no problem. You can still generate a shareable link (or copy, regenerate or delete the existing link) from the **Pieces Drive.**

1

### Open the Pieces Drive

Open the **Pieces Drive** via the Pieces Drive icon in the VS Code sidebar

2

### Share the Snippet

After finding the snippet you want to share, right-click it and choose `Generate Shareable Link` from the options.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/sharing/generate_shareable_link.png)

3

### Wait for the Link and Copy

After generating the link, a new modal will appear, wait for the snippet to be shared with an automatically generated link or manually copy the link from the modal

If you have generated a link for that snippet previously, the `More Actions` menu options will automatically adjust to include 3 new actions:

* `Open in Browser`: Opens the existing shareable link in your desired browser.
* `Refresh Link`: Regenerates the link—this is important if a snippet has been edited or updated, as a new link will be required to contain the new changes.
* `Revoke Link`: Revokes the shareable link so that anyone with the existing link to that snippet will be barred from future access.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/sharing/generate_share_link_drive.png)

Enriched Sharing Experience
---------------------------

When you `Share` a snippet, it’s not just the code that’s included. The snippet comes with additional metadata to provide context—[you can read more about that here.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets#whats-stored-when-you-save-a-snippet)

* `Snippet Type`: Identify the language or framework, such as Python or React.
* `Tags`: Useful keywords for quick categorization.
* `Description`: A short summary of what the snippet does.
* `Related Links`: Helpful resources or documentation tied to the snippet.
* `Author Information`: A record of who created the snippet.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731514684555/707b0769-5b68-448c-811b-a44d2414a10d.png?auto=compress,format&format=webp?auto=compress,format&format=webp&q=75)

Sensitive Information Watchdog
------------------------------

The `Share` feature does more than just allow you to effectively share snippets across your entire team and other communities, though.

You'll see a section titled **Sensitive Information:**

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732743695009/a44bf8b1-67b7-4db0-a6af-87798c8df9ed.png?auto=compress,format&format=webp&q=75)

Our in-house ML model scans snippets for potentially sensitive information, like API keys or passwords, and alerts you so that you can make an informed decision before sharing the snippet.

The scan happens locally using on-device machine learning models **before the snippet is uploaded to the cloud** for sharing—that way, you can make an informed decision about sharing your code.

Updated on March 5, 2025, 9:13 PM UTC

---

[Edit & Update](/products/extensions-plugins/visual-studio-code/pieces-drive/edit-update)

[Commands](/products/extensions-plugins/visual-studio-code/commands)

---

# Using Snippets in VS Code with Pieces Drive

# Using Snippets in VS Code with Pieces Drive

---

Pieces Drive
============

The [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) streamlines your development process by providing powerful features like [saving](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets) and [reusing](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/search-reuse) snippets, so your most important code is always available.

With the [Pieces for Visual Studio Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode), you can save all kinds of code snippets directly to your Pieces Drive. Easily [find them](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/search-reuse#finding-saved-snippets) and [edit them](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/edit-update#how-to-edit-snippets) whenever, wherever, and however you need.

Let’s take a look at some examples:

---

| `Logging Utilities` | A helper function for detailed server-side logging with timestamps and error levels. | Speeds up debugging and monitoring by inserting reliable logging methods. |
| --- | --- | --- |
| `Validation Functions` | A function to validate JSON payloads or form inputs before submission. | Ensures data integrity with reusable, thoroughly tested validation logic. |
| --- | --- | --- |
| `API Integration Code` | Prewritten `axios` code for making GET or POST requests, complete with error handling and response parsing. | Reduces repetitive work when integrating RESTful APIs or GraphQL endpoints. |
| `Component Templates` | A React functional component template with basic hooks and styling setup. | Provides a consistent starting point for building new components. |
| `Database Queries` | A MongoDB query to retrieve active user data filtered by last login. | Streamlines database tasks by reusing optimized query patterns. |

---

Boosting Productivity with Snippet Management
---------------------------------------------

With the Pieces for VS Code Extension, you can improve your productivity, standardize code, and maintain clarity across teams and projects by leveraging prewritten code.

The Pieces for VS Code Extension connects you with your development environment, so you can focus on what matters—building great software—while empowering you with tools for efficient code reuse.

* **Improved Productivity:** Focus on solving new problems rather than resolving old ones.
* **Contextual Awareness:** Snippets enriched with metadata, descriptions, and links to relevant searches help you remember the origin, purpose, and ideal usage scenarios for each piece of code.
* **Code Standardization:** Sharing best practices and reusable components helps developers ensure uniform coding practices and conventions are available across different teams and projects.

By using the Pieces for VS Code Extension you can capture and manage these snippets in Pieces Drive to streamline daily tasks and enhance your workflow in several ways:

### Save & Organize

Easily [save a function, script, or piece of boilerplate](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets) right from the tool menu or with a keyboard shortcut.

Not only are these snippets saved to your personal Pieces Drive, but they’re enriched with context, metadata, and tags for easy retrieval.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732740557545/d30c5f19-ca19-454a-8e1c-d0e9db4b95f5.png?auto=compress,format&format=webp&q=75)

To do this save a code snippet, right-click, and then hover on `Pieces` and choose `Save Current Selection to Pieces`—or you can use the keyboard shortcut by using `⌘+shift+’` (macOS) or `ctrl+shift+v` (Windows/Linux).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/MAIN_using_snippets/keybind_save_snippet.gif)

### Search & Reuse

You can directly [search through your collection of saved materials](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/search-reuse) from within VS Code, allowing you to quickly find snippets by keyword or context.

To search, you can access the `Search Pieces` action in to ways—either from the command palette or with the right-click menu.

In both scenarios, you then enter your query into the dropdown menu, and press `return`(macOS) or `enter` (Windows/Linux).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/MAIN_using_snippets/show_new_pieces_drive.png)

Any related snippets will appear in the results list. From there, you can press `return`(macOS) or `enter` (Windows/Linux) to view your snippet, complete with all its saved context, rendered neatly inside the editor.

### Edit & Update

Your snippets can evolve as your project grows as you adapt to changing project requirements, or when you move onto new files within your codebase.

In the `Saved Materials` section of the **Pieces Drive**, you can [open your saved snippets or update the code](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/edit-update#how-to-edit-snippets) to meet current needs, and save the updated version back to Pieces.

This ensures that your library stays current, relevant, and aligned with your project’s progress—plus, making your materials more efficient only helps you in the long run.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/MAIN_using_snippets/right_click_menu_drive.png)

### Sharing

[Share your snippets directly with team members](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets/sharing#how-to-share-a-saved-snippet), even if they don’t use Pieces.

You can send a shareable link containing your code snippet to anyone, even if they don’t use Pieces or have a Pieces for Developers account.

Sharing bits of code you find useful can remove productivity blockers if co-developer is unfamiliar with the project, or if they’re a junior.

For example, a teammate working on server monitoring can use your shared script to automate daily tasks without additional setup.

These shared links also include their [original enriched metadata](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets/saving-snippets#whats-stored-when-you-save-a-snippet), like tags, descriptions, and other information.

To share a snippet in VS Code, you can either highlight some lines of code, right-click, hover over `Pieces` and click `Share` or use keyboard shortcuts—`⌘+shift+i` (macOS) or `ctrl+shift+i` (Windows/Linux).

This creates a link you can share with teammates, ensuring easy access to your reusable code.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732741148257/c227792e-1abb-432e-9b46-15a486403994.png?auto=compress,format&format=webp&q=75)

Use Cases
---------

With Pieces for VS Code Extension, your snippets become a robust library of reusable code that you can organize, search, edit, and share across projects.

Here are some examples of how you can use them:

### Reusable Scheduling Functions

Imagine you’re frequently working on projects that involve scheduling tasks at regular intervals.

Instead of rewriting the same logic for each new project, you can [save an evergreen snippet to your Pieces Drive.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets/saving-snippets#saving-snippets)

This allows you to reuse a well-crafted scheduling function across multiple applications that’s useful in a variety of scenarios:

```
Copypackage main

import (
	"fmt"
	"time"
)

// A reusable function to schedule tasks at a specified interval
func scheduleTask(interval time.Duration, task func()) {
	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			task()
		}
	}
}

```

### File System Monitoring

If you frequently work on projects that involve monitoring file system changes, you can [save a helpful snippet to your Pieces Drive](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/using-snippets/saving-snippets#saving-snippets) that does exactly that, using generic and reusable naming conventions:

```
Copypackage main

import (
	"fmt"
	"log"
	"github.com/fsnotify/fsnotify"
)

// A reusable function to monitor file system changes
func watchFileChanges(path string) {
	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		log.Fatal(err)
	}
	defer watcher.Close()

	err = watcher.Add(path)
	if err != nil {
		log.Fatal(err)
	}

	for {
		select {
		case event := <-watcher.Events:
			if event.Op&fsnotify.Write == fsnotify.Write {
				fmt.Println("Modified file:", event.Name)
			}
		case err := <-watcher.Errors:
			fmt.Println("Error:", err)
		}
	}
}

```

**Additional Snippet Scenarios**
--------------------------------

Read up on some additional scenarios and use cases for Pieces Drive and see how the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) could benefit you and your workflow.

---

Testing Framework Templates

Command-Line Utilities

Error Handling & Logging

Quickly Create New Projects

---

[Download the Pieces for VS Code Extension today!](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode)

Updated on March 5, 2025, 9:13 PM UTC

---

[LLM Settings](/products/extensions-plugins/visual-studio-code/pieces-copilot/llm-settings)

[Saving Snippets](/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets)

---

# Pieces for VS Code Extension

# Pieces for VS Code Extension

Visual Studio Code Extension
============================

---

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732641483589/fe76a57c-5b66-48c4-8f1e-375f03883073.png?auto=compress,format&format=webp&q=75)

---

The [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) is a versatile tool that integrates seamlessly with the VS Code editor.

It provides users with a streamlined way to manage and interact with saved code snippets and harness the capabilities of the AI-powered [Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot) directly within their coding environment.

* [Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot): Engage in AI-driven conversations to enhance productivity by generating code, adding comments, troubleshooting, and more—all contextualized to your project by adding files and folders as context, with or without the powerful Long-Term Memory Engine (LTM).
* [Pieces Drive](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive): Effortlessly save, locate, and share frequently used code snippets to your Pieces Drive—Making it easier to organize your work, quickly access important pieces of code, and collaborate effectively with others.

![Getting Started](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1732641306052%2Fbf1c7729-8524-4adc-87af-62f098a42dd0.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Getting Started

Follow [these instructions](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/get-started) to download and install the Pieces for VS Code Extension.

![Support & Troubleshooting](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1732641309569%2F1515d9f1-50bd-49de-b536-1fc3a8fb882b.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Support & Troubleshooting

Explore [troubleshooting options](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/troubleshooting), navigate to our [support page](https://beta.docs.pieces.app/products/support), or [directly book a call](https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr) with our engineers.

This extension is designed to offer **two main pillars of functionality** for developers working in the Visual Studio Code environment:

### Enhanced AI Assistance

Through Pieces Copilot, developers can generate code solutions with [context-based AI conversations](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/chat), [add code comments](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/documenting-code), troubleshoot, and fix bugs right inside VS Code.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/MAIN_vs_code_extension/new_right_click_menu.png)

### Integrated Snippet Management

With Pieces Drive embedded in VS Code, developers can also [save, edit, search, and share their code snippets,](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive) boosting productivity by keeping reusable code accessible.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732734822822/d6af3ad0-3db0-40cf-9b34-15c92894026c.png?auto=compress,format&format=webp&q=75)

Using Pieces Copilot
--------------------

Inside VS Code, the Pieces Copilot offers **several powerful actions** to enhance your coding workflow using generative AI.

To start, you can [initiate a conversation with the LLM of your choice](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/chat), providing as much context as needed by adding files, folders, or even entire repositories to the chat.

To explore available options, simply select a portion of code, right-click, and hover over the `Pieces` item in the context menu.

From here, you’ll find several quick actions, including:

* `Modify Selection with Copilot`: Edit or transform the selected code to improve readability, optimize performance, or adapt it for other needs.
* `Explain Selection with Copilot`: Get detailed explanations of the code’s functionality.
* `Comment Selection with Copilot`: Generate inline comments to improve code clarity.

You can also use the `Ask Copilot About Active File` action to provide more context about your project. This helps Pieces Copilot **better understand your entire file** and **deliver more relevant suggestions.**

> ![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/MAIN_vs_code_extension/hover_over_ask_active_file.png)

### Using AI Quick Actions

The Pieces Copilot now comes packaged with **AI Quick Actions**, which are similar to CodeLens actions that sit above functions nearest your cursor.

With the new `Pieces: Comment` tool, the Pieces Copilot can [generate meaningful, insertable documentation](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/documenting-code) explaining your codes’ purpose and function—and `Pieces: Explain` can quickly [generate a breakdown of some code logic](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/chat#via-pieces-explain) while simultaneously initiating a Copilot chat in the side window.

---

| `Pieces: Comment` | `Pieces: Explain` |
| --- | --- |

---

To get started, look for the **AI Quick Actions** buttons in your code—these buttons relocate themselves depending on the location of the nearest visible functions, and click the documentation or explanation tool depending on your use case.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732735014831/16fbf46a-8512-408d-8161-66744901e66a.png?auto=compress,format&format=webp&q=75)

Managing Your Pieces Drive
--------------------------

Saving and managing code snippets within Pieces Drive in the VS Code extension is **simple** and **efficient**.

To save a snippet, right-click the selected code, hover over `Pieces`, and choose `Save Current Selection to Pieces`. You can also use the `Share` option to share snippets with others.

Common snippet types include utility functions, API requests, and reusable code blocks.

When you save snippets to your Drive, Pieces enriches them with AI-generated metadata, such as [tags, titles, authorship details, and descriptions,](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets#whats-stored-when-you-save-a-snippet) keeping everything organized and accessible.

You can find brief descriptions below of the different material management options available within the Pieces for VS Code Extension:

* `Save Current Selection to Pieces`: Right-click a code block and [save it to your repository with AI-enriched metadata](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets#whats-stored-when-you-save-a-snippet), ensuring easy access to frequently used snippets.
* `Save Active File to Pieces`: [Save the entire active file to your repository](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/saving-snippets#saving-active-files-to-pieces) in one action—ideal for preserving larger scripts or complete files.
* `Ask Copilot About Selection`: [Start a conversation with Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/chat#pieces-ask-copilot-about-selection) to gain insights, explanations, or improvement suggestions for the selected code.
* `Ask Copilot About Active File`: [Analyze the active file with Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot/chat#pieces-ask-about-active-file) to get insights and recommendations for your codebase.
* `Share`: [Share snippets with your team](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/sharing) by creating distributable copies of reusable code.
* `Search Pieces`: Quickly [find specific snippets in your repository](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/search-reuse#via-search-feature) using keywords, tags, or titles.

> ![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/MAIN_vs_code_extension/save_active_file_to_pieces.png)

### **Referencing & Reusing**

The [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) offers powerful search tools to quickly find and access your saved snippets.

You can [perform broad searches or refine results using specific terms](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/search-reuse#via-search-feature) like function names, keywords, or tags, making it easy to locate the exact code you need.

To search, right-click, hover over `Pieces`, and select `Search Pieces`.

This opens a search bar where you can input queries to find your snippets. Once found, [snippets can be shared or copied](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-drive/search-reuse#viewing-and-reusing-saved-snippets) directly into your project.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/MAIN_vs_code_extension/share_right_click.png)

---

Download the Extension
----------------------

Ready to streamline your development? Download the [Pieces for VS Code Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) and follow our [installation guide to start.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/get-started)

Updated on March 5, 2025, 9:13 PM UTC

---

[Troubleshooting](/products/extensions-plugins/sublime/troubleshooting)

[Get Started](/products/extensions-plugins/visual-studio-code/get-started)

---

# Pieces for Developers

# Pieces for Developers

---

Pieces for Visual Studio Extension Commands
===========================================

Below is a table containing every command available for use in the [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/commands/pieces_settings_dropshadow.png)

---

Shortcut Table
--------------

There are a number of actions related to the [Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot) and [Material Management ecosystem](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets) that are accessible with shortcuts.

---

| **Command** | **Windows/Linux** |
| --- | --- |
| [Ask Copilot About Selection](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot/chat#pieces-ask-copilot-about-selection) | `alt+m, a` |
| --- | --- |
| [Copy](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/search-reuse#viewing-and-reusing-saved-snippets) | `ctrl+c` |
| [Paste](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/search-reuse#viewing-and-reusing-saved-snippets) | `ctrl+v` |
| [Save Current Selection to Pieces](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/saving-snippets#via-keyboard-shortcuts) | `alt+m, s` |
| [Open Pieces Drive](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets) | `alt+m, e` |
| [Search Pieces](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/search-reuse#via-search-feature) | `alt+m, f` |
| [Share](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/sharing#via-keyboard-shortcut) | `alt+m, l` |

---

Command Table
-------------

You can easily access these commands through the **Command Palette** using the shortcut `ctrl+shift+p`.

Simply type `Pieces >` followed by the desired command to filter and locate it from the list.

---

| **Pieces > Save Current Selection to Pieces** | Saves the selected code snippet or active file to Pieces Drive. |
| --- | --- |
| **Pieces > Save Active File to Pieces** | Save the active code file in the Visual Studio editor to Pieces. |
| --- | --- |
| **Pieces > Ask Copilot About Selection** | Launches the Pieces Copilot, allowing you to ask questions or get code insights on your current selection. |
| **Pieces > Ask Copilot About Active File** | Allows you to ask the Pieces Copilot about the active file open in the Visual Studio editor. |
| **Pieces > Explain Selection with Copilot** | Explains the selection portion of code—it’s functionality, usage, and more. |
| **Pieces > Modify Selection with Copilot** | Allows you to easily ask the Pieces Copilot to change a code selection with a query. |
| **Pieces > Comment Selection with Copilot** | Uses the Pieces Copilot to add helpful inline comments to your code selection. |
| **Pieces > Share Current Selection** | Enables sharing of your selected code snippet or file. |
| **Pieces > Search Pieces Drive** | Opens the Pieces Drive tab to the search bar, enabling you to quickly search Pieces Drive. |
| **Pieces > Pieces Copilot** | Opens the Pieces Copilot side panel for contextual insights and assistance. |
| **Pieces > Pieces Account** | Manages your Pieces account information and connection to the Pieces Cloud. |
| **Pieces > Pieces Welcome Guide** | Opens the welcome guide for getting started with Pieces. |
| **Pieces > Pieces Drive** | Launches the Pieces Drive interface to explore and manage saved materials. |
| **Pieces > Pieces for Visual Studio > User Preferences** | Accesses user settings for the Pieces for Visual Studio Extension. |

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Sharing](/products/extensions-plugins/visual-studio/using-snippets/sharing)

[Configuration](/products/extensions-plugins/visual-studio/configuration)

---

# Pieces for Developers

# Pieces for Developers

---

Configuration
=============

Refer to the guide below to effectively configure the [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio) to suit your workflow and personal preferences.

---

Supported LLMs
--------------

We continuously update and optimize our plugins and extensions to ensure [compatibility with the latest LLMs](https://github.com/pieces-app/support/discussions/121).

The Pieces for Visual Studio Extension currently supports 13 different cloud models and [41 different local models](https://beta.docs.pieces.app/products/core-dependencies/ollama/supported-models):

---

| **Model Name** | **Context Window** | **Description** |
| --- | --- | --- |
| **GPT-4o Mini** | 128k tokens | Compact version of GPT-4o with efficiency. |
| --- | --- | --- |
| **GPT-4o** | 128k tokens | High-output GPT-4 variant for extended tasks. |
| **GPT-4 Turbo** | 128k tokens | Cost-efficient GPT-4 with large capacity. |
| **GPT-4** | 8k tokens | Advanced GPT-4 for high-quality responses. |
| **GPT-3.5** | 4k tokens | General-purpose versatile language model. |
| **Claude 3.5 Sonnet** | 40k tokens | Upgraded for improved reasoning. |
| **Claude 3 Sonnet** | 40k tokens | Designed for eloquent writing. |
| **Claude 3 Opus** | 40k tokens | High-capacity for detailed analysis. |
| **Claude 3 Haiku** | 40k tokens | Creative for precision tasks. |
| **Gemini Pro Chat** | 4k tokens | General-purpose language model. |
| **Gemini 2 Flash** | 4k tokens | Experimental, optimized for response time. |
| **Gemini 1.5 Pro** | 128k tokens | Advanced version with extended context. |
| **Gemini 1.5 Flash** | 256k tokens | Lightweight with extended context. |

---

[Read the documentation to learn how to switch your Pieces Copilot Runtime (LLM)](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot/llm-settings) used by the Pieces for Visual Studio Extension directly within your IDE.

Opening Pieces Settings
-----------------------

To open the Pieces Settings in the **Pieces for Visual Studio Extension**, follow these steps:

1

### Open the Command Palette

Press `ctrl+shift+p` to open the Command Palette in Visual Studio.

2

### Search for User Preferences

Type `Pieces > Pieces for Visual Studio > User Preferences` in the search bar.

3

### Open and Adjust Settings

Select the command to access the Pieces settings and make adjustments as needed.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/configuration/opening_user_preferences.gif)

Overriding Commands in VS Code
------------------------------

To modify the keyboard shortcuts for Pieces functionality in Visual Studio, such as [saving a snippet](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/saving-snippets) or [launching the Copilot](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot/chat#accessing-copilot-chat-in-vs-code), follow these steps:

1

### Open the Options Menu

Navigate to `Tools > Options` from the top toolbar in Visual Studio

2

### Access Keyboard Settings

In the **Options** window, expand the `Environment` section and select `Keyboard`

3

### Search for a Pieces Command

Use the search bar to find the Pieces command you want to modify, such as `Pieces.SaveToPieces`

4

### Assign a New Shortcut

Select the command from the list and enter your preferred shortcut in the `Press shortcut keys` field

5

### Save Your Shortcut

Ensure your new shortcut doesn’t conflict with existing Visual Studio commands, then click `Assign` to save your changes

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/commands/pieces_keybinds_visual_studio.png)

This process enables you to customize keyboard shortcuts to fit your workflow seamlessly.

Settings Overview
=================

### Analytics

Manage how Pieces collects and processes data:

* **Analytics Privacy**: Set your privacy level (e.g., OPEN or ANONYMOUS).
* **Anonymous Analytics**: Enable or disable the collection of anonymous analytics.
* **Exception Analytics**: Toggle tracking of application exceptions.
* **Usage Analytics**: Track general usage patterns to improve functionality.

### CodeLens

Customize the behavior of CodeLens features in Visual Studio:

* **Enabled**: Turn CodeLens integration on or off.
* **Refresh Delay**: Adjust the refresh rate (in milliseconds) for CodeLens updates.

### Editing

Modify editor behavior related to snippets:

* **Close Snippet Editor On Save**: Automatically close the snippet editor after saving changes.

### Enrichment

Set the level of metadata added to saved snippets:

* **Enrichment Value**: Choose the level of snippet enrichment (e.g., Low, Medium, High).

### Miscellaneous

Manage miscellaneous settings for Pieces functionality:

* **DetectedPiecesOSPort**: Displays the detected port where PiecesOS is running.
* **PiecesOSPort**: Shows the port used for PiecesOS communication.

### PiecesOS

Control integration and communication with the PiecesOS application:

* **Base API Path**: Specifies the API path (default: `http://localhost:39300`).
* **Base API Port**: Displays the port PiecesOS is running on (default: `39300`).
* **Capabilities**: Selects the type of models used (e.g., Cloud, Local, Blended).
* **Launch Pieces OS on Interaction**: Define whether PiecesOS should launch upon user interaction.
* **Launch PiecesOS on Startup**: Enable or disable automatic startup of PiecesOS.

### Searching

Adjust search-related functionality:

* **Search Action**: Set the default action when searching (e.g., Overview).
* **Search By**: Define the search criteria (e.g., All).
* **Search Display**: Configure how search results are displayed (e.g., NameTagsAndSnippet).

### Sharing

Manage sharing settings for snippets:

* **Clipboard Links**: Enable or disable the creation of clipboard links for shared snippets.

### Terminal

Set terminal-specific preferences:

* **Use Integrated Terminal**: Toggle the use of the integrated terminal in Visual Studio.

---

For additional support resources, check out our [troubleshooting guide.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/troubleshooting)

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Commands](/products/extensions-plugins/visual-studio/commands)

[Troubleshooting](/products/extensions-plugins/visual-studio/troubleshooting)

---

# Pieces for Developers

# Pieces for Developers

---

Get Started
===========

Follow the steps below to install and use the [Pieces for Visual Studio Extension.](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio)

---

Prerequisites
-------------

Before installation, you'll need:

* **PiecesOS:** The main engine that powers Pieces for Visual Studio functionality. [Learn more about PiecesOS.](https://beta.docs.pieces.app/products/core-dependencies/pieces-os)
* **Visual Studio:** Visual Studio is installed on your development machine.
* **Windows:** Visual Studio is no longer available on macOS and is exclusively designed and maintained for Windows devices.

PiecesOS must be installed to enable the Pieces for Visual Studio Extension. We also recommend the Pieces for Developers Desktop App for enhanced functionality.

---

Installation
------------

1

### Extensions

Open Visual Studio and navigate to the **Extensions** view in your toolbar

2

### Search for the Pieces Extension

Search for **Pieces for Visual Studio** and click `Install`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/get_started/hovering_install.png)

3

### Restart

Restart Visual Studio after installing the extension to complete the setup

4

### Use the Pieces for Visual Studio Extension

Once you’ve restarted Visual Studio, the **Pieces Account, Pieces Copilot** and **Pieces Drive** view will automatically open as docked tabs in your `Solution Explorer` view

Alternatively, download the .VSIX installer from the [Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio) and install it manually.

### Setting Up PiecesOS

To use the [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode), you must install [PiecesOS](https://docs.pieces.app/installation-getting-started/pieces-os) on your operating system.

Follow the specific setup steps below:

Windows

**Recommended Installation Method**

[Click here to download the Pieces Suite Installer for Windows.](https://builds.pieces.app/stages/production/pieces_suite_windows/appinstaller/download?download=true&product=DOCUMENTATION_WEBSITE)

**Alternative Installation Methods**

Or, you can install PiecesOS using these alternative methods—just click the link on the package that’s right for your system.

1. **WinGet**

Paste the following command into your terminal to install the Pieces Suite via WinGet: `winget install "Pieces OS"`

2. **Standalone .EXEs**

   * [PiecesOS .EXE (Standalone Windows)](https://builds.pieces.app/stages/production/os_server/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE)
   * [Pieces for Developers Desktop App EXE (Standalone Windows)](https://builds.pieces.app/stages/production/pieces_for_x/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE)
3. **App Installer**

   * [PiecesOS Appinstaller (Standalone Windows)](https://builds.pieces.app/stages/production/appinstaller/os_server.appinstaller?download=true&product=DOCUMENTATION_WEBSITE)
   * [Pieces for Developers Desktop App Appinstaller (Standalone Windows)](https://builds.pieces.app/stages/production/appinstaller/pieces_for_x.appinstaller?download=true&product=DOCUMENTATION_WEBSITE)

---

For enhanced security and better system integration, we recommend installing the `.exe` version, as more security protocols recognize and accept `.exe` files more than `.MSIX` packages.

---

Updating
--------

The Pieces for Visual Studio Extension will automatically update when a new version is available.

The `Auto Update` setting is enabled by default.

Pieces Cloud / Pieces Account
-----------------------------

Connecting to the Pieces Cloud is optional. However, it **provides additional features** like **data backups, shareable links, and more.** You can enjoy the main functionalities of Pieces without an account.

With the Pieces for Visual Studio Extension, you can log into your account and connect to the Pieces Cloud from the **Pieces Account** view, a tab which can be found next to the `Solution Explorer` view in your IDE’s sidebar.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/get_started/pieces_account_view.png)

From here, you can click `Sign In / Sign Out` under the **Account** section, or `Connect / Disconnect` under the **Cloud** section.

Connecting your Pieces account and personal cloud lets you access a range of features, like data backups and shareable links, but is not required.

Uninstallation
--------------

To uninstall the Pieces for Visual Studio Extension, follow these steps:

1

### Extensions

Open Visual Studio and navigate to the **Extensions** view in your toolbar

2

### Search for the Pieces Extension

Search for **Pieces for Visual Studio** and click `Install`, or clicked `Installed` to and find the Pieces Extension in your list of installed extensions

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/get_started/visual_studio_extension_in_ide.png)

3

### Restart

Restart Visual Studio after uninstalling the extension to complete the uninstallation process

Updated on March 5, 2025, 9:13 PM UTC

---

[Visual Studio Extension](/products/extensions-plugins/visual-studio)

[Pieces Copilot](/products/extensions-plugins/visual-studio/pieces-copilot)

---

# Pieces for Developers

# Pieces for Developers

---

Generative AI Conversations
===========================

The [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio) provides flexible options for interacting with generative AI, enabling you to gain insights, debug, and optimize your code seamlessly within your editor.

---

Accessing Copilot Chat in VS Code
---------------------------------

There are four primary ways to access generative AI conversations with the Pieces Copilot.

### via Right-Click Menu

1

### Highlight Code and Right-Click

Highlight any code segment and right-click to open the tool menu

2

### Choose "Ask Copilot"

Choose an option from the list that best fits your use case:

* `Ask Copilot About Selection`
* `Ask Copilot About Active File`
* `Add Active File to Copilot Context`
* `Explain Selection with Copilot`

3

### Enter Question

A new menu will pop up asking for your question, enter it, and `enter`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/ask_about_file.gif)

### via Keyboard Shortcuts

You can also open up a dialogue with the Pieces Copilot—specifically the `Ask Copilot` option—by using the shortcut `alt+m` and then pressing `a`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/asking_question_input_modal_for_asking_about_selection.png)

### via Command Palette

Open the command palette with `ctrl+shift+p`, and enter commands, such as:

`Pieces > Ask Copilot about Selection`: Generates suggestions or improvements for the selected code snippet.

`Pieces > Ask Copilot About Active File`: Provides insights for the current file open in your Visual Studio editor.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/command_pallette.png)

Read more about [what commands are available in the Pieces for Visual Studio Extension](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/commands).

### via AI Quick Actions

One quick way to get an explanation for a confusing or unclear function is by using the new [AI Quick Actions](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio#using-ai-quick-actions) feature in the Pieces for Visual Studio Extension.

Simply click the `Pieces` tool above a code function, then select `Explain`. This will start a conversation about the selected function.

You can also right-click a selected portion of code, hover over `Pieces`, and select `Explain Selection with Copilot`.

This action triggers the Copilot Chat window, which provides a detailed explanation and summary of the code's logic.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/pieces_explain_quick_action.gif)

There is also `Pieces > Comment`, which you can read more about [here](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot/documenting-code).

Contextualized Chats
--------------------

There are two levels of contextual awareness in Visual Studio you can use when starting a conversation or adding code to an existing Copilot Chat with the Pieces Copilot.

### Pieces > Ask Copilot About Selection

Use the `Pieces > Ask Copilot About Selection` button to interact with Copilot about specific code snippets, functions, or classes.

To use this feature:

1

### Choose your Selection

Select a portion of code or select a class in the solution explorer.

2

### Right-Click

Open the tool menu by right-clicking your selection

3

### Locate “Ask Copilot About Selection”

Located the `Pieces` tool menu section, hover over it, and select `Ask Copilot About Selection`

4

### Ask your Question

Type your prompt in the text input field and press `enter`

This approach is perfect for getting **quick insights** or **guidance** on specific code functionality.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/asking_question_input_modal_for_asking_about_selection.png)

### Pieces > Ask Copilot About Active File

The `Pieces > Ask About Active File` feature targets the current file, providing specific insights and help with debugging.

There are two ways to access this command:

1. Right-click inside your file, hover over `Pieces`, and select the `Ask Copilot about Active File`, then enter your query into the dropdown text input field.
2. Open the command palette using `ctrl+shift+p` and enter `Pieces > Ask Copilot About Active File`, then enter your query into the dropdown text input field.

After you enter your question, Pieces Copilot will analyze the file's context to provide precise responses.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/ask_about_file.gif)

This feature helps you understand file dependencies, methods, and structure. It also detects potential issues, suggests improvements, and more.

The `Pieces > Ask About Active File` feature can also be applied during onboarding purposes to get helpful explanations for unfamiliar code.

Adding Context to Copilot Chats
-------------------------------

There are a number of individual items you can add as context to a chat, namely `Files`**,** `Folders`**,** `Snippets`**,** `Websites`**,** and `Messages`**.**

This flexibility is especially useful when reference materials are not directly accessible from Visual Studio or when you want to compartmentalize context, minimizing overlap by keeping files or folders from other projects separate from your active workflow.

To do this, you can select the **Starred Message Icon** in the bottom-left corner of your Copilot Chat window, openable from the Visual Studio sidebar.

Click the **Starred Message Icon** then add whatever context items you need.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/adding_context.gif)

### Adding Code Snippets

You can insert code snippets as a code block in any Copilot Chat by clicking the `{ }` icon in the chat window and pasting your code.

This feature is particularly helpful for referencing code that isn't in the active file or for making comparisons and receiving tailored suggestions.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/snippet_in_chat.png)

### Extracting Code from Screenshots

You can extract code directly from screenshots through the Copilot Chat menu. Simply select `Extract Code from Screenshot`, choose the desired screenshot from your File Explorer, and confirm.

Pieces Copilot will scan the screenshot, generate the code from the image, and display it in the chat. From there, you can copy the code, insert it at your cursor, save it as a snippet, and more.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/extracting_code.gif)

### Adding Folders from File Explorer

You can add folders to your Copilot Chat context by clicking on the **Starred Message Icon** in the bottom-left corner of your Copilot Chat window, openable from the Visual Studio sidebar.

You can then choose which type of context you’d like to add, but in our case we’re going to choose `folder`.

This will open a new prompt that will guide you through the process of adding folders to context.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/add_folder_to_context.png)

Improving Code Consistency & Standardization
--------------------------------------------

The Pieces Copilot helps improve code quality by identifying inconsistencies and providing actionable suggestions for standardization.

### Naming Inconsistencies

If functions across your workspace use inconsistent naming patterns (e.g., `authenticateUser` in `authHandler.go` vs. `retrieveUserProfile` in `userHandler.go`), Pieces Copilot can suggest adopting a standardized naming convention for better readability and maintainability, like this:

```
Copy// authHandler.go
func authenticateUser(ctx context.Context, credentials Credentials) (User, error) {
    if credentials.Username == "" || credentials.Password == "" {
        return User{}, errors.New("missing credentials")
    }
}

```

### Inconsistent Error Handling

If error-handling strategies differ across files (e.g., structured errors in `authService.go` vs. inconsistent handling in `userService.go`), Pieces Copilot can help unify the approach:

```
Copy// authService.go
func LoginUser(credentials Credentials) (string, error) {
    token, err := authenticate(credentials)
    if err != nil {
        return "", fmt.Errorf("login failed: %w", err)
    }
    return token, nil
}

```

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Copilot](/products/extensions-plugins/visual-studio/pieces-copilot)

[Documenting Code](/products/extensions-plugins/visual-studio/pieces-copilot/documenting-code)

---

# Pieces for Developers

# Pieces for Developers

---

Code Comments
=============

With the Pieces Copilot in the [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio), you can quickly generate comments that clearly capture the functionality and intent of your code—an essential yet often overlooked aspect of high-quality documentation.

---

Commenting Code Selections with Pieces Copilot
----------------------------------------------

Pieces Copilot can **analyze** and **comment on any selected portion of your code**, providing line-by-line explanations of its logic. This ensures your code is not only readable but also easy for others to understand.

### via Pieces > Comment

A quick way to add documentation to a function is by using the [AI Quick Actions](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio#using-ai-quick-actions) feature, visible above actionable functions in your code. This feature allows you to generate comments to explain the logic and purpose of your functions directly within your editor.

To get started:

1

### Locate the Pieces Quick Actions

Look for the `Pieces` button above individual functions in your code

2

### Open the Pieces Menu

Click the `Pieces` Quick Action button to open the available options

3

### Select the Comment Option

Choose `Comment` from the menu to let the Copilot generate meaningful documentation for the function

4

### Accept Changes

Review the generated comments and click `Accept Changes` to insert them into your code

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/documenting_code/adding_comments_quick_action.gif)

You can also right-click a selected portion of code, hover over `Pieces`, and select `Comment Selection with Copilot`. Pieces Copilot will suggest changes that contain new section comments.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/documenting_code/hover_over_comment.png)

Why Use Code Comments?
----------------------

Code comments are essential for maintaining a clean and well-documented codebase. They **provide context for reviewers**, allowing them to focus on functionality and **understand complex reasoning**, making the code easier to follow and maintain.

Good documentation improves code readability and accelerates onboarding for people unfamiliar with the codebase. This dual benefit supports both **current and** **future development** by creating a strong **foundation for upgrades and iterations**.

Comments also serve as a memory aid, helping you remember the purpose and function of the code when revisiting it after a long time away.

That’s what makes the Pieces Copilot’s commenting feature so powerful. Whether you’re documenting a single function or hundreds of lines of code, simply highlight the desired code, click the `Pieces` CodeLens button, select **Comment**, and let Copilot take care of the rest.

Updated on March 5, 2025, 9:13 PM UTC

---

[Chat](/products/extensions-plugins/visual-studio/pieces-copilot/chat)

[Refactoring](/products/extensions-plugins/visual-studio/pieces-copilot/refactoring)

---

# Pieces for Developers

# Pieces for Developers

---

Switching LLMs
==============

The [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio) currently supports 39 different LLMs, including both cloud-based and local models, offering flexibility to accommodate diverse workflows and preferences.

---

Available LLMs
--------------

We continuously update and configure our plugins and extensions, including the Pieces for Visual Studio Extension, to [support the latest LLMs](https://github.com/pieces-app/support/discussions/121).

See the list of available models below.

### Cloud LLMs

The cloud-based models integrate effortlessly with the Pieces Copilot, offering high-performance and real-time responses to your queries.

---

| GPT-4o Mini | Gemini-1.5 Pro / Flash | Claude-3 Sonnet |
| --- | --- | --- |
| GPT-4o | Gemini-2 Flash | Claude-3.5 Sonnet |
| --- | --- | --- |
| GPT-4 Turbo | Gemini Pro Chat | Code Chat Bison (PaLM 2) |
| GPT-4 | Claude-3 Haiku | Chat Bison (PaLM 2) |
| GPT-3.5 Turbo | Claude-3 Opus | Custom OpenAI API Key |

---

### On-Device LLMs

We also support on-device LLMs for developers prioritizing privacy, security, or offline functionality.

---

| Mistral 7B | LLaMA-2 7B | StarCoder 2 15B |
| --- | --- | --- |
| Mixtral 8 7B | LLaMA-2 13B | Qwen 2.5 Coder 0.5B |
| --- | --- | --- |
| Phi-2 2.7B | LLaMA-3 8B | Qwen 2.5 Coder 1.5B |
| Phi-3 Mini 128K / Mini 4K | LLaMA-3.2 1B | Qwen 2.5 Coder 3B |
| Phi-3 Medium 14B 128k / 4k | LLaMA-3.2 3B | Qwen 2.5 Coder 7B |
| Phi-3.5 Mini 3.8B | CodeLLaMA 7B / 13B | Qwen 2.5 Coder 14B |
| Phi-4 14B | CodeLLaMA 34B | Qwen 2.5 Coder 32B |
| Gemma-1.1 7B / Gemma-1.1 2B | Granite-3B / 8B | Qwen QwQ Preview 32B |

---

How To Configure Your LLM Runtime
---------------------------------

Switching your LLM model in the Pieces for Visual Studio Extension is a simple process, allowing you to select the model that best fits your needs.

How to change your LLM:

1

### Open the Copilot Chat View

Open the Copilot Chat view by clicking the **Pieces Copilot** icon in the sidebar

2

### Locate the Active Model

Locate the **Active Model** in the bottom-left corner of the view where the current model (e.g., *GPT-4o Mini*) is displayed

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/llm_settings/changing_active_model.gif)

3

### View the Models

Click on `Change Model` to open the **Manage Copilot Runtime** modal

4

### Chose your Desired Model

Browse the list of local and cloud models, and select your preferred model

From here, you can browse and select from a variety of available models, such as the local and cloud-based models listed [in the table at the top of this page.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/configuration#supported-llms)

Once you’ve chosen a new model, the switch is instant, allowing you to continue your work seamlessly with the selected model's capabilities—*no need to restart or refresh anything.*

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/llm_settings/showing_llms.gif)

---

Cloud-hosted models offer access to the latest AI capabilities, while on-device models ensure offline functionality, making Pieces Copilot adaptable to your specific workflow and environment.

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Refactoring](/products/extensions-plugins/visual-studio/pieces-copilot/refactoring)

[Pieces Drive](/products/extensions-plugins/visual-studio/using-snippets)

---

# Pieces for Developers

# Pieces for Developers

---

Refactoring Code
================

Refactoring is essential for enhancing your code's structure and maintainability without altering its behavior. The [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio) makes this easier with its `Modify Selection with Copilot` feature.

---

Modifying your Code with Pieces Copilot
---------------------------------------

Modify your code to change error handling, rename functions, and add functionality in one way.

### via Right-Click Menu

Right-click on the highlighted code you want to modify, hover over `Pieces`, and click `Modify Selection with Copilot`.

Once you click `Modify Selection with Copilot`, Pieces Copilot opens the Copilot Chat window in the Visual Studio sidebar, showing the proposed changes.

Review the modifications and choose to accept them. The updates will automatically integrate into your codebase at the point where the code was selected, right at your cursor.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/refactoring/modify_code_right_click.gif)

This method provides a quick and efficient way to refactor and improve your code without disrupting your workflow.

You can use `Modify Selection with Copilot` to add detailed logging to important functions for better debugging and to break down long methods into smaller, more modular functions.

Updated on March 5, 2025, 9:13 PM UTC

---

[Documenting Code](/products/extensions-plugins/visual-studio/pieces-copilot/documenting-code)

[LLM Settings](/products/extensions-plugins/visual-studio/pieces-copilot/llm-settings)

---

# Pieces for Developers

# Pieces for Developers

---

Pieces Copilot
==============

The Pieces Copilot in the [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio) brings advanced AI features into your coding workflow, such as interchangeable LLMs for adding code comments, generating extra code, debugging, and more.

With the Pieces Copilot, you can create smart code comments, use [AI Quick Actions](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio#using-ai-quick-actions), and ask coding questions with variable context, all without leaving Visual Studio.

---

Generative AI Conversations
---------------------------

Facing an issue or not sure how to tackle a coding challenge? You can [ask the Pieces Copilot specific coding questions](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot/chat) directly in Visual Studio using Pieces Copilot in the `Solution Explorer`.

You can either ask any question that doesn’t require context, such as *“What is the basic format for a .JSON object?”* to more in-depth questions where the Pieces Copilot needs context from your active code.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/pieces_copilot_main/copilot_chat_in_active_code_file.png)

Adding Conversation Context
---------------------------

Contextual awareness enables the Pieces Copilot to help you solve problems more quickly by providing answers that are truly relevant to the issue you're dealing with and your code.

You can add context in the form of specific lines of code, or entire files, right from your active file.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/pieces_copilot_main/hovering_on_ask_copilot_about_selection_command_right_click_menu.png)

Start by right-clicking some selected code and select one of the following options from the tool menu:

* `Ask Copilot About Selection`: Includes the active selected code with the conversation.
* `Ask Copilot About Active File`: Includes the entire active file with the conversation for a broader range of context.

To use this feature, include details like error messages or [file context](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot/chat#adding-context-to-copilot-chats) for more accurate responses from the LLM conversation.

You can also add multiple files and other items as context to your prompt, giving the Pieces Copilot comprehensive information to assist you in troubleshooting.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/pieces_copilot_main/adding_context_to_chat.png)

Pieces Copilot Tools
--------------------

Explore the powerful AI tools and features in the Pieces for Visual Studio Extension.

### Documenting Code

Easily generate insightful code comments with Pieces for Visual Studio Extension. Pieces Copilot understands your code’s structure and function, [creating clear and useful comments to improve readability and simplify maintenance](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot/documenting-code#commenting-code-selections-with-pieces-copilot).

To add documentation and comments to your code, select the code snippet, right-click, hover over `Pieces`, and click `Comment Selection with Copilot`.

This opens Pieces Copilot in the Visual Studio sidebar, which starts adding documentation to the highlighted snippet. You can then select one of the `Insert at Cursor` or `Accept Changes` options to add the comments to your code.

You can also click `Pieces > Comment`, which is an AI Quick Action that lives above accessible functions within your code.

Use this feature to maintain consistency in documentation and simplify handoffs for collaborative projects.

### Generate & Update Code

With the Pieces for Visual Studio extension, you can easily change code to adapt to new requirements or insert quick fixes with two powerful Pieces Copilot commands:

* `Modify Selection with Copilot`: [Edit or transform the selected code snippet](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot/refactoring#modifying-your-code-with-pieces-copilot) to improve readability, optimize performance, or adapt it for specific needs.
* `Explain Selection with Copilot`: [Get a clear explanation of what the selected code does](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot/chat#accessing-pieces-copilot-in-vs-code), making it easier to understand and document.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/pieces_copilot_main/modify_right_click.png)

Selecting Your Pieces Copilot Runtime
-------------------------------------

Choose between [different LLMs directly within Visual Studio](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot/llm-settings) by accessing the sidebar and selecting your preferred model by clicking the currently-utilized LLM under `Active Model`.

Options include lightweight models for simple queries, advanced models for in-depth analysis, and both **local** and **cloud-based LLMs.**

This flexibility lets you customize Pieces Copilot to fit your development needs, focusing on either speed or accuracy.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/pieces_copilot_main/selecting_LLM_runtime.png)

Read more about [what LLMs are available for use](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/configuration#supported-llms) within the Pieces for Visual Studio Extension.

Pieces Copilot As a Daily Driver
--------------------------------

The Pieces Copilot is a powerful, adaptable tool that grows with you as you use it—*so use it!*

---

Collaborative Coding Made Easy

Troubleshoot and Resolve Bugs Swiftly

Quick Prototyping

Skill Enhancement

Efficient Code Refactoring

---

[Download the Pieces for Visual Studio Extension today!](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio)

Updated on March 5, 2025, 9:13 PM UTC

---

[Get Started](/products/extensions-plugins/visual-studio/get-started)

[Chat](/products/extensions-plugins/visual-studio/pieces-copilot/chat)

---

# Pieces for Developers

# Pieces for Developers

---

Troubleshooting
===============

This page guides you on how to fix common issues with the Pieces for [Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio) and how to connect with the Pieces support team or community.

---

Having Trouble with Pieces for Visual Studio?
---------------------------------------------

If the Pieces for Visual Studio Extension isn’t working as expected, verify the following steps:

### Ensure You Have the Latest Versions

First, make sure you're using the latest version of the [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio) from the Visual Studio Marketplace and the latest version of [PiecesOS](https://beta.docs.pieces.app/products/core-dependencies/pieces-os). The minimum supported version is Visual Studio 2022 — 17.9.0 or higher.

### PiecesOS

Check to make sure PiecesOS is running. PiecesOS must be running for the Pieces for Visual Studio Extension to work.

### Restart VS Code After Updates

If you’ve recently installed or updated PiecesOS or the Pieces for Visual Studio Extension, restart the IDE.

Contact the [Pieces support team](https://getpieces.typeform.com/to/mCjBSIjF#docs-vscode) if the issue still persists.

### Refreshing Copilot Chats

You might need to restart or refresh the Pieces Copilot chat, especially if you're using a cloud LLM and lose your WiFi connection.

This can sometimes cause the LLM to hang, appearing to generate a response but eventually timing out or getting stuck in a loop.

To fix this, click the **three vertical dots** in the top-right corner of your Copilot Chat window and select `Refresh`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/troubleshooting/refresh_copilot_chat.png)

Updated on March 5, 2025, 9:13 PM UTC

---

[Configuration](/products/extensions-plugins/visual-studio/configuration)

[Azure Data Studio](/products/extensions-plugins/azure-data-studio)

---

# Pieces for Developers

# Pieces for Developers

---

Editing
=======

Keep your library of saved code snippets up-to-date easily with the seamless editing process between Visual Studio and the Pieces for Visual Studio Extension.

---

How to Edit Snippets
--------------------

To modify code you’ve saved to your personal repository, you can use the Pieces Drive view in Visual Code.

If you don’t have it open, use the command palette shortcut `ctrl+shift+p` and type **Pieces Drive,** then click it or press `enter` to open the view.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/edit_update/opening_pieces_drive_via_command_palette.gif)

1

### Locating a Snippet

Inside the **Pieces Drive** view, you can select the snippet you want to edit from the scrollable list of saved materials, or use the **Search Bar** to enter a query and locate your desired snippet.

2

### Open the Snippet

To start editing your saved material from your repository, click the **Pencil Icon**. Hovering over this icon reveals a `Edit Selected Material` + `ctrl+e` tooltip.

3

### Edit the Snippet

Once you click the **Pencil Icon,** your saved code will open in a new tab, and you’ll automatically be redirected to that tab. Simply make your changes as needed.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/edit_update/edit_and_insert_snippet.gif)

4

### Save the Snippet

After making the desired changes to the code snippet, use `ctrl+s` to save the snippet, after which you will be returned to your active file.

You’ll see a success message at the top of the active file indicating that your changes have been made successfully.

### Material Management Actions

From within the Pieces Drive view, you can click the **three vertical dots** to review a `Quick Actions` tab that shows available metadata that you can view or directly adjust for that snippet.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/edit_update/editing_snippet_metadata.gif)

You can view the table below for a comprehensive list of available actions.

---

| `Reclassify` | Set your own custom snippet classification. |
| --- | --- |
| `Rename` | Change the name (title) of the material as it appears in your Pieces Drive. |
| --- | --- |
| `Duplicate` | Create a duplicate of the saved material—non-modified or modified to be more performant, readable, as a template, or in another language. |
| `Related Links` | View, add or remove related resources which provide additional context to the snippet. |
| `Tags` | Add or remove tags to the snippet’s metadata. |
| `Shareable Link` | Generate or copy a shareable link for the saved material. |
| `Annotations` | View or edit the automatically generated description for that saved code. |
| `Anchors` | Add associated files and directories to the material. |
| `Related People` | Manage related code authors or coworkers. |
| `Sensitive Information` | Manually add or remove, if not automatically generated, a sensitive information tag to the snippet. |
| `Delete Piece` | Remove this saved material from Pieces Drive. |

---

Additional Tools while Editing
------------------------------

When you edit a saved snippet, you are opening a new file in Visual Studio to make those edits—which means that other Pieces functionalities, like functionalities provided by Pieces Copilot and Pieces Drive, are completely available to you.

For example, when editing a snippet, right-clicking selected code will present you with the same toolbar and Pieces-related options (like `Save Current Selection to Pieces` or `Share Current Selection`).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/edit_update/showing_actions_in_edit_view.gif)

This makes it easy to modify your saved code with the power that the Pieces for Visual Studio Extension gives you.

Updated on March 5, 2025, 9:13 PM UTC

---

[Search & Reuse](/products/extensions-plugins/visual-studio/using-snippets/search-reuse)

[Sharing](/products/extensions-plugins/visual-studio/using-snippets/sharing)

---

# Pieces for Developers

# Pieces for Developers

---

Saving
======

The [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio) lets you save code snippets in multiple ways, keeping your most useful code easily accessible.

---

Saving Snippets
---------------

Save code with the Pieces for Visual Studio Extension by using the right-click menu or hotkeys.

Use this feature to save all kinds of useful code materials, such as:

* API endpoint definitions
* Utility functions or commonly used helper methods
* Code templates for starting new modules
* Reusable logic for error handling or authentication

### via Right-Click Menu

1

### Highlight Selection

Select the portion of code you’d like to save

2

### Right-Click

Right-click on the highlighted section and hover over the `Pieces` option

3

### Select Save to Pieces

Choose the `Save to Pieces` option to save the selection to **Pieces Drive**

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/hovering_over_save_to_pieces.png)

### via Keyboard Shortcuts

If you prefer not to use your cursor, you can quickly save your selected code with keyboard shortcuts.

To do this:

1

### Highlight Selection

Select the portion of code you’d like to save

2

### Use Shortcut

Use the `alt+m, s` shortcut to save the selection to **Pieces Drive**

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/saving_snippet_keybind.gif)

### via Copilot Chat

You can save any code block from your Copilot Chat by clicking Pieces > `Save to Pieces`. This includes code generated by Pieces Copilot, code blocks you've added as context but haven't saved as individual snippets, and any other code.

Just click the `Save to Pieces` button on any code block in the Copilot Chat view.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/hoverig_over_pieces_save_copilot.png)

Saving Active Files to Pieces
-----------------------------

If you want to save a *really* big snippet, try saving your entire file directly to Pieces.

To save your active file:

1

### Right-Click

Right-click within your active file

2

### Locate the Pieces Section

Hover over the `Pieces` item in the right-click options

3

### Save Active File to Pieces

Click `Save Active File to Pieces`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/save_active_file_to_pieces.png)

There are plenty of scenarios in which saving an entire file to your Pieces Drive is ideal, such as to:

* **Preserve Complex Codebases**: Save large, complete files like utility libraries, configuration files, or classes to keep all related functionality together.
* **Reuse in Future Projects**: Use full files in new projects without having to rebuild smaller parts.
* **Keep Independent Files Versioned**: Store standalone files, like scripts or tools, as separate backups or versions outside of source control.

What’s Stored When You Save a Snippet
-------------------------------------

When you save a snippet to your Pieces Drive, it’s more than just the code that gets stored.

The Pieces Copilot captures:

* `Type`: Categorizes the snippet (e.g., API call, function, class) with it’s code language.
* `Associated Tags`: Keywords associated with the snippet for easier searching.
* `Custom Description`**:** Specifies precisely which *lines* (in numerical form) the snippet is from, as well as the file from which it originated—very useful for mind-mapping.
* `Smart Description`: AI-generated descriptions that summarize the snippet’s purpose and function.
* `Suggested Searches`: Related searches that help you discover similar snippets.
* `Related Links`: References to documentation, code repositories, or other relevant resources.
* `Related People`: Associated collaborators or contributors.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/opened_markdown_snippet.png)

Additionally, the Pieces Copilot **checks saved snippets for sensitive information**, like API keys, passwords, or authentication tokens, to make sure no confidential data is stored by mistake.

Where Saved Snippets Live
-------------------------

Saved snippets are stored locally on your device, ensuring accessibility even when offline. This also means that any Pieces for Developers extension or plugin—or even the Pieces Desktop App—has constant, up-to-date access to your saved materials.

You can find your saved snippets in the `Pieces Drive` menu.

[Read more about how to find your saved snippets here.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/search-reuse#finding-saved-snippets)

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Drive](/products/extensions-plugins/visual-studio/using-snippets)

[Search & Reuse](/products/extensions-plugins/visual-studio/using-snippets/search-reuse)

---

# Pieces for Developers

# Pieces for Developers

---

Searching
=========

The [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio) lets you quickly find saved snippets, keeping you productive without interrupting your workflow.

---

Finding Saved Snippets
----------------------

In Visual Studio, you can locate your snippets in two main ways.

### via Pieces Sidebar

To locate your snippets, use the Pieces Sidebar menu or the search feature:

1

### Open the Pieces Drive

There are three main ways to search your Pieces Drive via the Pieces Sidebar

**via Right-Click Menu**

1. Right-click anywhere in your editor window
2. Hover over `Pieces` and located `Search Pieces Drive`, select it

**via Keyboard Shortcut**

1. Quickly open the search bar menu by pressing `alt+m`, letting go, and then quickly entering the `f` key

Once you’ve opened the search bar, you can enter your search query to search for a specific snippet

2

### Open a Snippet

Click on the snippet you want to see its content, metadata, and quick actions

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/opening_snippet_markdown.gif)

### via Search Feature

If you know exactly what you’re looking for, you can search for specific snippets:

1

### Click the Search Bar

Open the search bar at the top of the Pieces Drive Sidebar

2

### Enter Your Search Query

Type your search query into the search box

3

### Navigate the Results

Scroll through the results or use arrow keys to select your desired snippet

4

### Open the Snippet

Click on the snippet to open it and view its content, metadata, and quick actions

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/searching_snippets.gif)

Search using tags, descriptions, names, types, or languages to narrow down your results.

Adding Filters to Your Search
-----------------------------

You can sort and filter saved snippets in the Pieces Drive Sidebar to refine your search results.

### Filtering Snippets

1

### Click on the Search Bar

Click the search bar at the top of the Pieces Drive Sidebar

2

### Use Quick Filters

Apply quick filters like `Titles`, `Annotations`, or `Content` that show up below the search bar

3

### Filter by Tags or Keywords

Enter specific tags or keywords in the search bar to narrow down the snippets shown

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/filtering_snippets.gif)

### Sorting Snippets

1

### Click the Sorting Icon

Click the icon at the top of the Pieces Drive sidebar (like the clock icon for recent). The icon changes depending on the sorting method you choose

2

### Choose Sorting Order

Choose your sorting order: `Recent`, `Suggested`, `Alphabetical`, or `Language`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/sorting_snippets.gif)

Viewing and Reusing Saved Snippets
----------------------------------

[Saved snippets](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/saving-snippets) can be viewed with their metadata by opening them directly from the Pieces Sidebar. Just click on them once you find them.

From this view, use Quick Actions to copy the snippet or insert it at your cursor in the editor. Click `Open Markdown Preview` to **see the snippet in markdown preview mode** or click on the snippet for a quick overview.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/opened_markdown_snippet.png)

From this view, you can highlight and right-click to copy, or use `ctrl+c` to copy to your clipboard.

### via Pieces Sidebar

In the Pieces Drive sidebar, you can insert a snippet into your note by clicking the `Instert at Cursor` button.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/inserting_snippet_via_drive.gif)

You can right-click a snippet and select `Copy to Clipboard` to paste it wherever you need.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/search_resuse/hovering_over_copy_to_clipboard.png)

### Previewing Saved Snippets

When using the Pieces Drive sidebar in Visual Studio, click on the **three vertical dots** on a saved code snippet to **delete** it or choose from 6 other options:

---

| `View Preview` | `Start Copilot Chat` | `Copy to Clipboard` |
| --- | --- | --- |
| `Insert at cursor` | `Generate Shareable Link` | `Open Markdown Preview` |
| --- | --- | --- |

---

Real-Time Snippet Streaming
---------------------------

Every product in the Pieces Suite uses [PiecesOS](https://docs.pieces.app/installation-getting-started/pieces-os) to collect information about the context of your snippets.

When you change a snippet in the [Pieces for Developers Desktop App](https://beta.docs.pieces.app/products/desktop-application)—such as its name, description, tags, or any other metadata—those updates automatically appear in your [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio) without needing to refresh.

If your snippets aren’t updating immediately, refer to the [troubleshooting guide](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/troubleshooting) for instructions on how to refresh your snippet list.

Updated on March 5, 2025, 9:13 PM UTC

---

[Saving Snippets](/products/extensions-plugins/visual-studio/using-snippets/saving-snippets)

[Edit & Update](/products/extensions-plugins/visual-studio/using-snippets/edit-update)

---

# Pieces for Developers

# Pieces for Developers

---

Sharing Snippets
================

The `Share` feature in the [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio) makes sharing your saved code snippets with colleagues, teams, or the wider development community easy.

With this feature, you can generate a unique, shareable link for any saved material directly from within your active file in Visual Studio or with a shortcut.

---

What Information Gets Shared
----------------------------

When a snippet is saved to the Pieces Drive, the code is [enriched with valuable information](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/saving-snippets#whats-stored-when-you-save-a-snippet) such as related people, links, annotations, tags, and an automatically-generated description.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/shared_snippet_in_browser.png)

How to Share a Saved Snippet
----------------------------

There are two ways to share saved snippets within Visual Studio itself—by using the right-click tool menu, or with keyboard shortcuts.

This link can easily be shared via email, Discord, Slack, or other platforms. The recipient can view the snippet **without needing to have a Pieces account.**

### via Right-Click Menu

Shareable Pieces links for your code snippets can be generated by right-clicking a portion of selected code, hovering over the `Pieces` item in the pop-up menu, then clicking `Share Current Selection`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/sharing/share_current_selection.png)

### via Keyboard Shortcut

You can generate shareable links for your code snippets using the `alt+M, L` keyboard shortcut after highlighting the desired piece of code within your active file.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/sharing/generating_share_link_keybind.gif)

Generating Links for Existing Saved Snippets
--------------------------------------------

If you save a material, but didn’t generate a shareable link at the time—no problem. You can still generate a shareable link (or copy, regenerate or delete the existing link) from the **Quick Menu** within the **Pieces Drive** view.

1

### Open the Pieces Drive View

Start by opening the Pieces Drive view and finding the saved material you want to generate a shareable link for.

2

### Launch the Quick Menu

Once you’ve located the saved material you want to share, click the **three vertical dots** to open the **Quick Menu.**

3

### Generate the Sharable Link

After the quick menu is open, you’ll see a section titled `Shareable Link`. Click `Generate Shareable Link` to generate the link and automatically copy it to your clipboard.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/sharing/share_current_snippet_quick_menu.png)

You can also generate the link using the right-click menu if you edit the saved material, which opens up the code in an independent file. To do this, right-click the selected hover over `Pieces`, and click `Share Current Selection`.

4

### Share the Saved Material

Your shareable link has now been copied to your clipboard, so you can share it with anyone—no need for them to have a Pieces Account.

Enriched Sharing Experience
---------------------------

When you `Share` a snippet, it’s not just the code that’s included. The snippet comes with additional metadata to provide context—[you can read more about that here.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/saving-snippets#whats-stored-when-you-save-a-snippet)

* `Snippet Type`: Identify the language or framework, such as Python or React.
* `Tags`: Useful keywords for quick categorization.
* `Description`: A short summary of what the snippet does.
* `Related Links`: Helpful resources or documentation tied to the snippet.
* `Author Information`: A record of who created the snippet.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731514684555/707b0769-5b68-448c-811b-a44d2414a10d.png?auto=compress,format&format=webp?auto=compress,format&format=webp&q=75)

Sensitive Information Watchdog
------------------------------

The `Share` feature does more than just allow you to effectively share snippets across your entire team and other communities, though.

You'll see a section titled **Sensitive Information:**

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732743695009/a44bf8b1-67b7-4db0-a6af-87798c8df9ed.png?auto=compress,format&format=webp&q=75)

Our in-house ML model scans snippets for potentially sensitive information, like API keys or passwords, and alerts you so that you can make an informed decision before sharing the snippet.

The scan happens locally using on-device machine learning models **before the snippet is uploaded to the cloud** for sharing—that way, you can make an informed decision about sharing your code.

Updated on March 5, 2025, 9:13 PM UTC

---

[Edit & Update](/products/extensions-plugins/visual-studio/using-snippets/edit-update)

[Commands](/products/extensions-plugins/visual-studio/commands)

---

# Pieces for Developers

# Pieces for Developers

---

Using Snippets
==============

Snippets are useful pieces of code you can save, share, reuse, modify, and integrate into future projects to increase productivity and save time.

With the [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio), you can save all types of code snippets directly to your Pieces Drive and easily find, edit, and reuse them whenever you need.

Here are some examples of developer materials you can reuse:

---

| `Logging Utilities` | A helper function for detailed server-side logging with timestamps and error levels. | Speeds up debugging and monitoring by inserting reliable logging methods. |
| --- | --- | --- |
| `Validation Functions` | A function to validate JSON payloads or form inputs before submission. | Ensures data integrity with reusable, thoroughly tested validation logic. |
| --- | --- | --- |
| `API Integration Code` | Prewritten `axios` code for making GET or POST requests, complete with error handling and response parsing. | Reduces repetitive work when integrating RESTful APIs or GraphQL endpoints. |
| `Component Templates` | A React functional component template with basic hooks and styling setup. | Provides a consistent starting point for building new components. |
| `Database Queries` | A MongoDB query to retrieve active user data filtered by last login. | Streamlines database tasks by reusing optimized query patterns |

---

Boosting Productivity with Snippet Management
---------------------------------------------

The Pieces for Visual Studio extension connects you with your code and project files, letting you focus on building great software while offering tools for efficient code reuse and management.

* **Improved Productivity**: Access and reuse saved code snippets quickly, so you can spend more time solving new problems instead of revisiting old ones.
* **Contextual Awareness**: Snippets come with metadata, descriptions, and links to relevant searches, helping you remember their origin, purpose, and best usage scenarios.
* **Code Standardization**: Share best practices and reusable components to ensure consistent coding practices and conventions across teams and projects.

Use the Pieces for Visual Studio Extension to effectively capture, manage, and reuse snippets, streamlining your daily tasks and improving your workflow.

### Save & Organize

Easily [save a function, script, or piece of boilerplate](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/saving-snippets) directly from the tool menu.

These snippets are not only saved to your personal repository but are also enriched with context, metadata, and tags, making them easy to retrieve whenever you need them.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/opened_markdown_snippet.png)

To save a snippet in Visual Studio, right-click on the selected code and choose `Save Current Selection to Pieces`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/saving_snippet_to_pieces.gif)

You can also save the entire file to your Pieces Drive by right-clicking anywhere in your code, hovering over `Pieces` in the tool menu and clicking `Save Active File to Pieces`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/save_active_file_to_pieces.png)

### Search & Reuse

You can directly search through your collection of saved materials from within Visual Studio, allowing you to quickly find snippets by keyword or context.

To search, you can either right-click, hover over `Pieces` and select `Search Pieces Drive` or click the search bar in your **Pieces Drive** view and type your query there.

Then, enter your query into the search bar and press `enter` to view the search results.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/searching_snippets.gif)

Any related snippets will appear in the results list. From there, you can press `enter` to view your snippet, complete with all its saved context, neatly rendered in markdown as its own separate tab.

### Edit & Update

Your snippets can change as your project grows, adapts to new requirements, or when you switch to new files. In the **Pieces Drive** view, search for a snippet and click the **edit (pencil) icon** to open it in a new tab in Visual Studio.

Edit your code and use `ctrl+s` to save, updating the snippet in your repository.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/searching_editing_saving_snippet.gif)

This keeps your library current and aligned with your project's progress, making your materials more efficient in the long run.

### Sharing

Sharing useful code snippets can help overcome productivity hurdles, especially if a co-developer is new to the project or less experienced.

For instance, a teammate handling server monitoring can use your shared script to automate daily tasks without extra setup.

These shared links also come with their [original enriched metadata](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/saving-snippets#whats-stored-when-you-save-a-snippet), including tags, descriptions, and other details.

To share a snippet using the Pieces Extension for Visual Studio, right-click on selected code, hover over `Pieces`, and select `Share Current Selection`. This will send your code to the cloud, generate a link, and copy it to your keyboard.

You can send a shareable link containing your code snippet to anyone, even if they don’t use Pieces or have a Pieces for Developers account.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/shared_snippet_in_browser.png)

You can send a shareable link containing your code snippet to anyone, even if they don’t use Pieces or have a Pieces for Developers account.

Use Cases
---------

With the Pieces for Visual Studio Extension, your snippets transform into a powerful library of reusable code. You can organize, search, edit, and share these snippets across various projects.

Here are some ways you might use them:

### Reusable Scheduling Functions

Suppose you often work on projects that require scheduling tasks at regular intervals.

Instead of writing the same code for each new project, you can write a reusable function, then save it to your Pieces Drive.

This enables you to apply a well-designed scheduling function across different applications, such as this:

```
Copypackage main

import (
	"fmt"
	"time"
)

// A reusable function to schedule tasks at a specified interval
func scheduleTask(interval time.Duration, task func()) {
	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			task()
		}
	}
}

```

### File System Monitoring

If you frequently work on projects that involve monitoring file system changes, you can [save a helpful snippet to your Pieces Depository](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/saving-snippets#saving-snippets) that does exactly that, using generic and reusable naming conventions:

```
Copyfrom watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import time

class FileMonitorHandler(FileSystemEventHandler):
    def on_modified(self, event):
        print(f"File modified: {event.src_path}")

    def on_created(self, event):
        print(f"File created: {event.src_path}")

    def on_deleted(self, event):
        print(f"File deleted: {event.src_path}")

def monitor_directory(directory="."):
    observer = Observer()
    event_handler = FileMonitorHandler()
    observer.schedule(event_handler, directory, recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

if __name__ == "__main__":
    monitor_directory()  # Monitors the current directory

```

**Additional Snippet Scenarios**
--------------------------------

Read up on some additional scenarios and use cases for Pieces Snippets and see how the [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio) could benefit you and your workflow.

---

Testing Framework Templates

Command-Line Utilities

Quickly Create New Projects

Error Handling & Logging

---

[Download the Pieces for Visual Studio Extension today!](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio)

Updated on March 5, 2025, 9:13 PM UTC

---

[LLM Settings](/products/extensions-plugins/visual-studio/pieces-copilot/llm-settings)

[Saving Snippets](/products/extensions-plugins/visual-studio/using-snippets/saving-snippets)

---

# Pieces for Developers

# Pieces for Developers

Visual Studio Extension
=======================

---

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/icons_banners/visual-studio.png)

---

The [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) is a powerful and versatile tool designed to integrate seamlessly with the Visual Studio IDE, enhancing productivity and enabling efficient code management.

It provides users with a streamlined solution for managing and interacting with saved code snippets through the Pieces Drive, while leveraging the AI-powered capabilities of the Pieces Copilot—all directly within their development environment.

* [Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot): Engage in AI-driven conversations to enhance productivity by generating code, adding comments, troubleshooting, and more—all contextualized to your project by adding files and folders as context, with or without the powerful Long-Term Memory Engine (LTM).
* [Pieces Drive](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets): Effortlessly save, locate, and share frequently used code snippets to your Pieces Drive—Making it easier to organize your work, quickly access important pieces of code, and collaborate effectively with others.

![Getting Started](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1738594724152%2F53e7f635-9e95-4d4b-8a8a-21f2b5a69f6b.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Getting Started

Follow [these instructions](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/get-started) to download and install the Pieces for Visual Studio IDE Extension.

![Support & Troubleshooting](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1738291474469%2F028feb3e-99e7-433b-8ff8-300d49b22d14.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Support & Troubleshooting

Explore [troubleshooting options](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/troubleshooting), navigate to our [support page](https://beta.docs.pieces.app/products/support), or [directly book a call](https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr) with our engineers.

This extension is designed to offer **two main pillars of functionality** for developers working in the Visual Studio IDE:

### AI Assistance with Pieces Copilot

Through Pieces Copilot, developers can generate code solutions with [context-based AI conversations](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot/chat), [add code comments](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot/documenting-code), [troubleshoot](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/troubleshooting), and fix bugs right inside Visual Studio.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/pieces_highlighted_showing_pieces_options.png)

### Material Management with Pieces Drive

With Pieces Drive and PiecesOS built into Visual Studio, developers can save, edit, search, and share their code easily.

This feature allows developers to keep their favorite code in a personal, easy-to-access library. They can quickly review past work, find related authors and links with the extra details saved with each piece, and much more.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/snippet_saved_materials_open_in_sidebar.png)

Using Pieces Copilot
--------------------

Inside Visual Studio, the Pieces Copilot offers **several powerful actions** to enhance your coding workflow using generative AI.

To begin, you can [initiate a conversation with the LLM of your choice](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot/chat) by right-clicking and selecting the `Ask Copilot About Selection` or any of the available Copilot Chat options.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/right_click_asking_about_something.gif)

For added context, you can also add specific files, folders or even entire repositories to the conversation so that the LLM utilized by Pieces Copilot has a comprehensive understand of your project and the task at hand.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/add_folders_to_context.png)

You can also access `Pieces: Explain / Modify / Comment Selection with Copilot` commands from the right-click menu to easily get a breakdown of the code’s logic, make changes such as adding error handling, or add comments to your code.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/hovering_explain.png)

### Using AI Quick Actions

The Pieces Copilot comes packaged with **AI Quick Actions**, which are similar to CodeLens actions that sit above functions nearest to your cursor.

These Quick Actions are nested under `Pieces`, which automatically sits above applicable functions.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/nested_pieces_in_function.png)

Unfortunately, Visual Studio does not support CodeLens features for Python, so **AI Quick Actions will not work in Python files.**  
  
Supported languages for CodeLens features (AI Quick Actions) include **C/C++, C#, Basic, vbscript, TypeScript and JavaScript.**

With the new `Pieces > Comment` tool, the Pieces Copilot can generate meaningful, insertable documentation that explains your code's purpose and function.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/using_ai_quick_actions.png)

Additionally, the `Pieces > Explain` feature can quickly generate a breakdown of code logic while simultaneously initiating a Copilot Chat conversation in the side window, providing deeper insights and context.

---

| Pieces > Comment | Pieces > Explain |
| --- | --- |

---

Managing Your Code Snippets
---------------------------

Saving and managing code snippets with Pieces for Visual Studio extension is quick and effortless.

To save a snippet, simply right-click the selected code, hover over `Pieces`, and select `Save Current Selection to Pieces` or `Save Active File to Pieces`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/hovering_over_save_to_pieces.png)

Snippets are automatically stored in your **Pieces Drive**, keeping them organized and accessible—you can search for them using the `Search Pieces Drive` function which can be found in the right-click menu.

Additionally, you can use the `Share Current Selection` option to easily share snippets with others directly from the extension.

Common snippet types include utility functions, API requests, and reusable code blocks.

When you save snippets to your repository, Pieces enriches them with AI-generated metadata, including [tags, titles, authorship details, and descriptions](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/saving-snippets#whats-stored-when-you-save-a-snippet), ensuring everything stays organized and accessible.

Below is a brief overview of the various material management options available within the Pieces for Visual Studio Extension:

* `Save Current Selection / Active File to Pieces`: Right-click a selected block of code or your entire active file and [save it to your Pieces Drive with AI-enriched metadata](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/saving-snippets#whats-stored-when-you-save-a-snippet), ensuring easy access to frequently used snippets.
* `Ask Copilot About Selection`: [Start a conversation with Pieces Copilot](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/pieces-copilot/chat#accessing-copilot-chat-in-vs-code) to gain insights, explanations, or improvement suggestions for the selected code.
* `Share Current Selection`: [Share snippets with your team](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/sharing) by creating distributable copies of reusable code.
* `Search Pieces Drive`: Quickly [find specific snippets in your repository](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/search-reuse#via-search-feature) using keywords, tags, or titles.

### **Referencing & Reusing**

The [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode) provides robust search tools to help you quickly find and access your saved snippets.

You can [perform broad searches or narrow your results by using specific terms](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/using-snippets/search-reuse#via-search-feature) such as function names, keywords, or tags, making it effortless to locate the exact code you need.

Right-clicking anywhere in your active file, hovering over `Pieces` and selecting `Search Pieces Drive` will open up the search bar in the Pieces Drive view—from there, enter your query or use filters to find the saved material you’re looking for.

As you search, snippets matching your query will be displayed in a filtered list of your previously saved snippets.

From there, you can open the snippet and see it’s metadata in markdown or use the Pieces Drive window to edit the enriched metadata saved alongside it.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/snippet_saved_materials_open_in_sidebar.png)

---

Download the Extension
----------------------

Ready to streamline your development? Download the Pieces for Visual Studio Extension and follow our [installation guide to start.](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio/get-started)

Updated on March 5, 2025, 9:13 PM UTC

---

[Troubleshooting](/products/extensions-plugins/visual-studio-code/troubleshooting)

[Get Started](/products/extensions-plugins/visual-studio/get-started)

---

# Web Extension

# Web Extension

Web Extension
=============

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729000827826/b61ba5fc-6d58-4a33-85e9-288816902ecc.png?auto=compress,format&format=webp&q=75)

V2 Documentation for the Pieces for Developers Web Extension is under construction 🚧 ... In the meantime, you can find current documentation for the Web Extension [here.](https://docs.pieces.app/extensions-plugins/web-extension)

Updated on March 5, 2025, 9:13 PM UTC

---

[Neovim Plugin](/products/extensions-plugins/neovim-plugin)

[Pieces CLI](/products/extensions-plugins/cli)

---

# Pieces for JetBrains Plugin: Enhance Your Development Workflow

# Pieces for JetBrains Plugin: Enhance Your Development Workflow

Pieces for JetBrains Plugin
===========================

---

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732290822484/1ff85201-d524-4996-8e8d-9070db6ea380.png?auto=compress,format&format=webp&q=75)

---

The [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) enhances your development experience by seamlessly integrating the best features from the Pieces suite directly into JetBrains IDEs, making your favorite tools readily accessible within your workspace.

It provides developers with powerful tools for **managing code snippets, debugging, and refactoring** within their familiar development environment.

* [Pieces Copilot:](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot) Users can start generative AI conversations and add files and folders as context to get the solutions they need—including out-of-IDE context with the optional Long-Term Memory Engine (LTM-2).
* [Pieces Drive:](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive) Effortlessly save, locate, and share frequently used code snippets, making it easier to organize your work, quickly access important pieces of code, and collaborate effectively with others.
* [AI Quick Actions:](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot/chat#ai-quick-actions) Fully integrated and Pieces-powered AI Quick Actions tools are built right into your code to access Pieces Copilot explanation and documentation features even more easily.

![Getting Started](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1731096255269%2F3c7ccc7f-599c-4f37-b15d-cc23d2e0be60.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Getting Started

Follow [these instructions](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/get-started) to download and install the [Pieces for JetBrains plugin.](https://plugins.jetbrains.com/plugin/17328-pieces)

![Support](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1731096296705%2F4c1f6917-8818-4340-b604-836bb5b5b214.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Support

Explore [troubleshooting options](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/troubleshooting), navigate to our [support page](https://beta.docs.pieces.app/products/support), or [directly book a call](https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr) with our engineers.

All media (e.g., GIFs, screenshots) in this documentation were captured in **PyCharm CE.**

The Pieces for JetBrains Plugin verifies against the JetBrains IntelliJ Ultimate IDE, but works across the entire JetBrains suite of IDEs.

The minimum version required for the Pieces for JetBrains Plugin to work in your JetBrains IDE is **2023.1.**

If you’re not quite sure what version your JetBrains IDE is, [you can click here to find out how to check it.](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/configuration#checking-your-jetbrains-ide-version)

This plugin is currently available for use in any JetBrains IDE, such as:

---

* [IntelliJ IDEA](https://www.jetbrains.com/idea/)
* [WebStorm](https://www.jetbrains.com/webstorm/)
* [PhpStorm](https://www.jetbrains.com/phpstorm/)
* [PyCharm](https://www.jetbrains.com/pycharm/)
* [CLion](https://www.jetbrains.com/clion/)
* [GoLand](https://www.jetbrains.com/go/)
* [Rider](https://www.jetbrains.com/rider/)
* [RubyMine](https://www.jetbrains.com/ruby/)
* [DataGrip](https://www.jetbrains.com/datagrip/)
* [AppCode](https://www.jetbrains.com/objc/)
* [Android Studio](https://developer.android.com/studio)

---

The Pieces for JetBrains plugin provides developers with **two pillars of functionality**:

### AI Assistance with Pieces Copilot

Pieces Copilot offers [AI-assisted features](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot) like starting contextualized [generative AI conversations](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot/chat), [adding code comments](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-copilot/documenting-code), and [troubleshooting code](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/troubleshooting).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/jetbrains_plugin/right_click_hover_over_save_to_pieces.png)

### Material Management with Pieces Drive

Pieces Drive enables you to [save, edit, search, and share useful code snippets](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive) to boost your workflow productivity and streamline collaboration with others.

These features let developers store their favorite code in a personal, easy-to-access library. They can quickly review past work, find related authors and links with the extra details saved with each piece, and more.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/jetbrains_plugin/pieces_drive_right_click.png)

Using Pieces Copilot
--------------------

You can perform **several powerful** **actions** with the Pieces Copilot inside of your JetBrains IDE, like starting a conversation directly inside the editor with your LLM of choice about a specific code snippet, fragment, folder, or terminal output.

This is the backbone of the Pieces Copilot experience—the **Ask Copilot** feature.

Pieces for Developers has recently rolled out its new **AI Quick Actions** feature—similar to VS Code’s Codelens—which allows for select quick actions powered by Pieces Copilot, namely `Pieces: Explain` and `Pieces: Comment`.

The Quick Action tools—`Pieces: Explain` and `Pieces: Comment`—can be found above the function nearest to your cursor.

Using either of these AI Quick Actions triggers the Pieces Copilot conversation window, where you can find the output from the LLM of your choice.

These AI Quick Action tools live above certain pieces of code, like functions, so that you always have easy access to them.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/jetbrains_plugin/lightbulb_fix.png)

Managing Code Snippets
----------------------

When you save code to your personal repository, Pieces **automatically enriches the snippet** with AI-generated tags, titles, related authors and links, and a description.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/jetbrains_plugin/right_click_menu.png)

Save code snippets by right-clicking a selection of code and choosing the `Save Current Selection to Pieces` option from the pop-up window. Alternatively, right-click and hover over the `Pieces` item to access several other snippet-related functions.

* + `Save Current Selection / File to Pieces`: Right-click a selected block of code or your entire active file and [save it to your Pieces Drive with AI-enriched metadata](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/pieces-drive/saving-snippets#whats-stored-when-you-save-a-snippet), ensuring easy access to frequently used snippets.
  + `Save File to Pieces`: Save an entire file to Pieces Drive for future reference.
  + `Ask Copilot About Selection`: Ask Pieces Copilot to generate suggestions or explain the selection with a query.
  + `Ask Copilot About File`: Get AI-powered insights or suggestions based on the file's content.
  + `Modify Selection with Copilot`: Adjust and refine selected code using AI suggestions.
  + `Explain Selection with Copilot`: Receive an explanation for the selected code from the AI assistant.
  + `Comment Selection with Copilot`: Auto-generate comments for the selected code snippet using AI.
  + `Share via Pieces Link`: Generate a shareable link for your snippet, allowing collaboration even with those who don’t have a Pieces account.
  + `Search Pieces Drive`: Search for previously saved snippets in Pieces.
  + `Pieces Quick Search`: Quickly find and retrieve relevant snippets saved in Pieces.

### **Referencing & Reusing**

The [Pieces for JetBrains Plugin](https://plugins.jetbrains.com/plugin/17328-pieces) provides robust search tools to help you quickly find and access your saved snippets.

You can easily find saved snippets in your JetBrains IDE by double-tapping the shift key and then selecting the `Pieces` window.

Simply enter a query, and any snippet you’ve saved that matches the query will be returned in the drop-down list.

Once you’ve located the snippet you want, pressing enter or clicking the snippet title will open it inside your JetBrains IDE.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/jetbrains_plugin/searching_for_snippet.gif)

---

Download the Plugin
-------------------

Follow the [installation instructions](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains/get-started) to get started with the Pieces for JetBrains Plugin.

Updated on March 5, 2025, 9:13 PM UTC

---

[Troubleshooting](/products/core-dependencies/ollama/troubleshooting)

[Get Started](/products/extensions-plugins/jetbrains/get-started)

---

# Pieces for Developers

# Pieces for Developers

---

Available Cloud LLMs
====================

Find reference information and an up-to-date (January February 25th, 2025) of cloud LLMs available for use that are currently supported by PiecesOS, the Pieces Desktop App, and other Pieces plugins and extensions.

---

Supported LLMs
--------------

The Pieces for Developers Suite currently supports cloud models from a range of providers.

---

| **Provider** | **Model Name** |
| --- | --- |
| *OpenAI* | GPT-X |
| --- | --- |
| *Anthropic* | Claude / Sonnet / Opus / Haiku |
| *Google* | Gemini / Pro / Flash / Chat |

View the tables below for detailed model names, parameters, and the context window size of all usable models.

---

Please note that not all specific models have easily indentifiable **parameter quantities**. Some companies release information on their models, while others do not—as such, the parameters provided in these tables are **estimated parameter ranges** based on leading AI sources, detailed evaluations and assessments, and other available information.

---

OpenAI
------

---

| **Model Name** | **Parameters** | **Context Window (Maximum)** |
| --- | --- | --- |
| *GPT-4o Mini* | 8b | 128k tokens |
| --- | --- | --- |
| *GPT-4o* | N/A | 128k tokens |
| *GPT-4 Turbo* | N/A | 128k tokens |
| *GPT-4* | N/A | 8k tokens |
| *GPT-3.5* | N/A | 4k tokens |

Anthropic
---------

---

| **Model Name** | **Parameters** | **Context Window (Maximum)** |
| --- | --- | --- |
| *Claude 3.5 Sonnet* | 175b | 40k tokens |
| --- | --- | --- |
| *Claude 3 Sonnet* | 100b | 40k tokens |
| *Claude 3 Opus* | 150b | 40k tokens |
| *Claude 3 Haiku* | N/A | 40k tokens |

Google
------

---

| **Model Name** | **Parameters** | **Context Window (Maximum)** |
| --- | --- | --- |
| *Gemini Pro Chat* | 8b | 4k tokens |
| --- | --- | --- |
| *Gemini 2 Flash* | 30b | 1m tokens |
| *Gemini 1.5 Pro* | 45b | 128k tokens |
| *Gemini 1.5 Flash* | 80b | 256k tokens |

Updated on March 5, 2025, 9:13 PM UTC

---

[Compatible LLMs](/products/large-language-models)

[Local Models](/products/large-language-models/local-models)

---

# Pieces for Developers

# Pieces for Developers

---

Available Local LLMs
====================

Find reference information and an up-to-date (January 31st, 2025) of local LLMs available for download that are currently supported by PiecesOS, the Pieces Desktop App, and other Pieces plugins and extensions.

---

Supported LLMs
--------------

The Pieces for Developers Suite currently supports 41 local models from a range of providers.

---

| **Provider** | **Model Name** |
| --- | --- |
| *Google* | Gemma / Code Gemma |
| --- | --- |
| *IBM* | Granite / Code / Dense / MoE |
| *Meta* | LLaMA / CodeLLaMA |
| *Mistral* | Mistral / Mixtral |
| *Microsoft* | Phi |
| *Qwen* | QwQ / Coder |
| *StarCoder* | StarCoder |

View the tables below for detailed model names, parameters, and the context window size of all usable models.

---

Please note that not all specific models have easily indentifiable **parameter quantities**. Some companies release information on their models, while others do not—as such, the parameters provided in these tables are **estimated parameter ranges** based on leading AI sources, detailed evaluations and assessments, and other available information.

---

### Google (Gemma)

---

| **Model Name** | **Parameters** | **Context Window (Maximum)** |
| --- | --- | --- |
| *Gemma 2 27B* | 27B | 8k tokens |
| --- | --- | --- |
| *Gemma 2 9B* | 9B | 8k tokens |
| *Gemma 2 2B* | 2B | 8k tokens |
| *Gemma 1.1 7B* | 7B | 4k tokens |
| *Gemma 1.1 2B* | 2B | 4k tokens |
| *Code Gemma 1.1 7B* | 7B | 4k tokens |

### IBM (Granite)

---

| **Model Name** | **Parameters** | **Context Window (Maximum)** |
| --- | --- | --- |
| *Granite Code 34B* | 34B | 8k tokens |
| --- | --- | --- |
| *Granite Code 20B* | 20B | 8k tokens |
| *Granite Code 8B* | 8B | 128k tokens |
| *Granite Code 3B 128K* | 3B | 128k tokens |
| *Granite Code 3B* | 3B | 4k tokens |
| *Granite 3.1 Dense 8B* | 8B | 128k tokens |
| *Granite 3.1 Dense 2B* | 2B | 128k tokens |
| *Granite 3 MoE 3B* | 3B | 128k tokens |
| *Granite 3 MoE 1B* | 1B | 128k tokens |
| *Granite 3 Dense 8B* | 8B | 128k tokens |

### Meta (LLaMA)

---

| **Model Name** | **Parameters** | **Context Window (Maximum)** |
| --- | --- | --- |
| *LLaMA 3.2 3B* | 3B | 128k tokens |
| --- | --- | --- |
| *LLaMA 3.2 1B* | 1B | 8k tokens |
| *LLaMA 3 8B* | 8B | 8k tokens |
| *LLaMA 2 13B* | 13B | 4lk tokens |
| *LLaMA 2 7B* | 7B | 4k tokens |
| *CodeLLaMA 34B* | 34B | 100k tokens |
| *CodeLLaMA 13B* | 13B | 16k tokens |
| *CodeLLaMA 7B* | 7B | 8k tokens |

### Mistral (Mixtral)

---

| **Model Name** | **Parameters** | **Context Window (Maximum)** |
| --- | --- | --- |
| *Mixtral 8 7B* | 7B | 128k tokens |
| --- | --- | --- |
| *Mistral 7B* | 7B | 32.8k tokens |

### Microsoft (Phi)

---

| **Model Name** | **Parameters** | **Context Window** |
| --- | --- | --- |
| *Phi-4 14B* | 14B | 4k tokens |
| --- | --- | --- |
| *Phi-3.5 Mini 3.8B* | 3.8B | 128k tokens |
| *Phi-3 Mini 128K* | 3B | 128k tokens |
| *Phi-3 Mini 4K* | 3B | 4k tokens |
| *Phi-3 Medium 14B 128K* | 14B | 128k tokens |
| *Phi-3 Medium 14B 4K* | 14B | 4k tokens |
| *Phi-2* | N/A | 4k tokens |

### Qwen (Qwen)

---

| **Model Name** | **Parameters** | **Context Window** |
| --- | --- | --- |
| *Qwen QwQ Preview 32B* | 32B | 32k tokens |
| --- | --- | --- |
| *Qwen 2.5 Coder 32B* | 32B | 128k tokens |
| *Qwen 2.5 Coder 14B* | 14B | 32k tokens |
| *Qwen 2.5 Coder 7B* | 7B | 128k tokens |
| *Qwen 2.5 Coder 3B* | 3B | 32k tokens |
| *Qwen 2.5 Coder 1.5B* | 1.5B | 128k tokens |
| *Qwen 2.5 Coder 0.5B* | 0.5B | 32k tokens |

### StarCoder (StarCoder)

---

| **Model Name** | **Parameters** | **Context Window** |
| --- | --- | --- |
| *StarCode 2 15B* | 15b | 16k tokens |
| --- | --- | --- |

Updated on March 5, 2025, 9:13 PM UTC

---

[Cloud Models](/products/large-language-models/cloud-models)

[Support](/products/support)

---

# Pieces for Developers

# Pieces for Developers

---

Pieces for Developers | LLMs
============================

Pieces for Developers software products provide user access to X total large language models (LLMs) from a wide variety of providers—and we’re adding more and more!

---

Compatible AI Models with Pieces
--------------------------------

Pieces utilizes cloud-hosted LLMs from providers like OpenAI, Anthropic, and Google. All local models are served through [Ollama, a core dependency of PiecesOS](http://google.com) and the rest of the Pieces Suite.

Cloud-Only LLMs | Providers
---------------------------

[Browse the list of cloud-hosted AI models available for use](http://google.com) with the Pieces Desktop App and several of our plugins and extensions.

---

| **Provider** | **Model Name** |
| --- | --- |
| *OpenAI* | GPT-X |
| --- | --- |
| *Anthropic* | Claude / Sonnet / Opus / Haiku |
| *Google* | Gemini / Pro / Flash / Chat |

---

Local-Only LLMs | Providers
---------------------------

Read [through the list of local AI models available for use](http://google.com) within the Pieces Desktop App and the rest of the Pieces Suite.

---

| **Provider** | **Model Name** |
| --- | --- |
| *Google* | Gemma / Code Gemma |
| --- | --- |
| *IBM* | Granite / Code / Dense / MoE |
| *Meta* | LLaMA / CodeLLaMA |
| *Mistral* | Mistral / Mixtral |
| *Microsoft* | Phi |
| *Qwen* | QwQ / Coder |
| *StarCoder* | StarCoder |

---

### Using Ollama with Pieces

Ollama is *required* to utilize local generative AI features.

It’s a lightweight system that allows for a plug-and-play experience with local models, meaning that Pieces can update the number of compatible models we serve at lightning-speeds!

If you want to read more about installing and using Ollama with Pieces, [click here for the Ollama section of our Core Dependencies documentation.](http://google.com)

Updated on March 5, 2025, 9:13 PM UTC

---

[Privacy, Security & Your Data](/products/privacy-security-your-data)

[Cloud Models](/products/large-language-models/cloud-models)

---

# Pieces Fundamentals: Core Features

# Pieces Fundamentals: Core Features

---

Core Features of Pieces
=======================

Learn about the **[3] core features of Pieces**, available for use within the Pieces for Developers Desktop App and any supported browser or IDE integration.

---

The Pillars
-----------

Pieces powers developers to new levels of productivity by introducing the **[1] Long-Term Memory Engine (LTM-2)**, a powerful “artificial memory” that remembers your workflow and automatically saves context for future use.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/fundamentals/ltm-2-header.png)

Next, Pieces offers the **[2] Pieces Copilot**, assisting with day-to-day tasks like debugging code, generating comments, and answering questions—with as much or as little workflow context as you need.

Finally, Pieces provides the **[3] Pieces Drive**, an intelligent and enriched material management experience that ensures your most important code—and other useful materials—are always at hand.

LTM-2
-----

The Long-Term Memory Engine (LTM-2) captures live context from your workflow over a 7-day period, enhancing your ability to recall and access past materials.

---

*Pieces Copilot with LTM-2 Context*

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734028488469/d128a760-7e91-4dbf-8cfc-e7fc257488b7.png?auto=compress,format&format=webp&q=75)

---

You can ask questions like, “*Can you provide me with the link to the Firestore database I was working in last week?”* or “*Summarize the contents of the brief on plugin updates in the Google doc Tim shared”* for game-changing productivity enhancement.

Here are some ways to take advantage of the LTM-2:

* `Contextual Recall`: LTM-2 remembers the websites you visit, the code you work on, and the snippets you save. This context can be accessed via the Pieces Desktop App or within Copilot Chats inside your favorite IDE—with the relevant Pieces extension or plugin installed.
* `Natural Language Queries`: Ask contextual questions about your previous workflow, and LTM-2 will source the relevant anchor and provide you with a clickable URL or path to a file on your device—or try asking it to summarize the contents of a webpage you visited earlier in the day.
* `Integrated Access`: Utilize LTM-2 through the Pieces Desktop App or within your favorite development tools via browser or IDE integrations.

### Workstream Activity

Pieces for Developers has just launched a new flagship feature called [Workstream Activity](https://beta.docs.pieces.app/products/desktop-application/workstream-activity).

The Workstream Activity view in the [Pieces Desktop App](https://beta.docs.pieces.app/products/desktop-application) uses the advanced Long-Term Memory (LTM-2) Engine to collect and summarize your recent tasks, discussions, code reviews, and more.

---

*Workstream Activity in the Pieces Desktop App*

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/workstream_activity/new_workstream_activity_media/ltm_rollup_demo_screenshot.png)

---

[PiecesOS](https://beta.docs.pieces.app/products/core-dependencies/pieces-os) collects the LTM data and provides a concise roll-up of that data *every 20 minutes,* drastically reducing the repetitive context-setting typical of many AI tools.

Each roll-up is a snapshot that includes details on main tasks, projects, issues resolved, key decisions, discussions, documents, and code you’ve reviewed—often with helpful links included!

You can also start Pieces Copilot chats with individual roll-ups, eliminating the need to manually enter context.

Pieces Copilot
--------------

Pieces Copilot leverages advanced Large Language Models (LLMs) to assist you in understanding and generating code, accessible through your IDEs, editors, and the Desktop App.

---

*Pieces Copilot for Code Generation*

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734028533289/f37f7075-f2d2-4a99-b948-c23fd70e7257.png?auto=compress,format&format=webp&q=75)

---

The Pieces Copilot, accessible via the Pieces Desktop App or any of our IDE or browser integrations, helps with:

* `Understanding Code`: Get explanations of complex code snippets, learn how a particular function works, or explore alternative implementations.
* `Code Generation`: Generate code or code comments based on specific requirements, either from raw prompting or in-environment contextual understanding.
* `LLM Flexibility`: Switch between local models for privacy and speed, or cloud-hosted models for more advanced capabilities.

Pieces Drive
------------

Saving and managing code and other materials is effortless and efficient with Pieces Drive.

---

*Viewing Saved Materials with Pieces Drive*

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734026181487/e947ec50-4346-49f1-a967-62b218aafc47.png?auto=compress,format&format=webp&q=75)

---

The Pieces Drive lets you save important developer resources, like notes, useful code, links, and more to your personal Local Repository—from which you can then view, edit, re-use, and share these materials via Pieces Shareable Links.

Intended recipients are not required to have a Pieces account, so cross-platform collaboration is exceptionally easy.

With Pieces, you’ll find Pieces Drive integrated into your favorite:

* `IDEs and Editors`: Extensions for [VS Code](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code), [JetBrains IDEs](https://beta.docs.pieces.app/products/extensions-plugins/jetbrains), [Sublime Text](https://beta.docs.pieces.app/products/extensions-plugins/sublime), and more enable you to save snippets without leaving your coding environment.
* `Web Browsers`: The [Pieces Web Extension](https://beta.docs.pieces.app/products/extensions-plugins/web-extension) let you capture code from documentation sites, forums, or any web page using your favorite browsers.
* `Collaboration Tools`: Integrations with tools like [Obsidian](https://beta.docs.pieces.app/products/obsidian) or [Microsoft Teams](https://beta.docs.pieces.app/products/microsoft-teams) help you save code from notes and shared documents.

Updated on March 5, 2025, 9:13 PM UTC

---

[👋 Meet Pieces](/products/meet-pieces)

[🪟 Quickstart | Windows](/products/meet-pieces/windows-quickstart)

---

# Pieces for Developers

# Pieces for Developers

---

Installation Guide | Linux
==========================

The following guide will help you install and run both PiecesOS and the Pieces for Developers Desktop Application quickly and easily on your Linux device.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/trimmed_linux_banner.png)

---

Download Pieces for Linux
-------------------------

Follow the steps below to download and install Pieces for Linux using the Command-Line Interface (CLI).

![Download — Linux](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740080977439%2F7ad5c157-3c13-4f22-8e83-6d159b135c28.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Download — Linux

*Ubuntu 22+ required.*

---

Run these commands **in order** to install and properly set up the Pieces Desktop App and it’s core dependencies:

1. `sudo snap install pieces-os`
2. `sudo snap connect pieces-os:process-control :process-control`
3. `sudo snap install pieces-for-developers`

Then, type `pieces-for-developers` to launch the application directly from your terminal.

Your Linux device must be running a support distribution of Ubuntu—**Ubuntu 22+.**

Click here for documentation [on determining your OS version.](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/linux#checking-ubuntu-version)

Installation Method
-------------------

Installation of PiecesOS and the Pieces Desktop App on supported Linux systems is done using the terminal (CLI).

Post-Installation Tips
----------------------

Read the documentation below for tips and information to ensure you’re up and running with the latest versions of PiecesOS and the Pieces Desktop App, as well as steps to uninstall Pieces software from your Linux device.

### Updating

The Pieces Desktop App automatically downloads and installs new updates.

You can also manually check for updates to PiecesOS and the Pieces Desktop App by clicking the profile icon nested in the search bar at the top of your Pieces Desktop App view, then selecting `Check for Desktop App Updates` or `Check for PiecesOS Updates.`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/get_started_linux/checking_pieces_desktop_app_for_pieces_os_updates.gif)

Uninstalling
------------

You can uninstall PiecesOS and the Pieces Desktop App using `snap` commands directly from your terminal.

---

When running both of these commands, you will be prompted to enter your device’s local account password due to the `sudo` command.

---

1

### Removing the Pieces Desktop Application

Type `sudo apt remove pieces-for-developers` and press `enter`.

2

### Removing PiecesOS

Type `sudo apt remove pieces-os` and press `enter`.

3

### Removing Unused Dependencies (Optional)

Type `sudo apt autoremove` and press `enter`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/get_started_linux/uninstall_pfd_from_terminal.png)

Additional Resources
--------------------

Click here for additional [documentation on troubleshooting](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting) or reach out to [support.](https://beta.docs.pieces.app/products/support)

Updated on March 5, 2025, 9:13 PM UTC

---

[🍎 Quickstart | macOS](/products/meet-pieces/macos-quickstart)

[🔧 Troubleshooting](/products/meet-pieces/troubleshooting)

---

# Pieces for Developers

# Pieces for Developers

---

Installation Guide | macOS
==========================

The following guide will help you install and run both PiecesOS and the Pieces for Developers Desktop Application quickly and easily.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/trimmed_macos_banner.png)

---

Recommended Installation Method
-------------------------------

Click the **buttons below** to download Pieces for your macOS device.

[![Apple Silicon / ARM](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740779223594%2Feb78fb3a-95c0-4eb3-8eef-f76a6456f12d.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Apple Silicon / ARM

*macOS 12.0 (Monterey) or higher*](https://builds.pieces.app/stages/production/macos_packaging/pkg-arm64/download?download=true&product=DOCUMENTATION_WEBSITE)[![Intel / PKG](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740779228190%2F7aa494c2-6926-41d6-ad51-fb124d4936fd.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Intel / PKG

*macOS 12.0 (Monterey) or higher*](https://builds.pieces.app/stages/production/macos_packaging/pkg/download?download=true&product=DOCUMENTATION_WEBSITE)

### **System Requirements**

There are (2) requirements for installing Pieces on your macOS device:

1. Compatible OS Version—**macOS 12.0 (Monterey) or higher**
2. Compatible installer for your device’s architecture—**Apple Silicon (ARM) or Intel**

Click here for a quick guide on [determining your OS type](http://google.com), and here for [how to check your device’s CPU architecture.](http://google.com)

---

| **Component** | **Minimum** | **Recommended** | **Notes** |
| --- | --- | --- | --- |
| *CPU* | Any modern CPU | Multi-core CPU | Avoid dual-core processors—aim for at least a 4-core CPU. |
| --- | --- | --- | --- |
| *RAM (Local Mode)* | 8 GB total system RAM with 2 GB free | 16 GB total system RAM or more | Applies when PiecesOS is running locally. |
| *RAM (Cloud Mode)* | 8 GB total system RAM with 1 GB free | 16 GB total system RAM or more | Applies when PiecesOS is running in cloud mode. |
| *Disk Space* | 2 GB minimum (1 GB for PiecesOS + 0.5–1 GB for data), with at least 4 GB free | 8 GB with at least 6 GB free or more | Ensure additional free space for data storage and future growth. |

---

Install the PKG
---------------

Once you’ve downloaded the correct `.pkg` file, it’s time to run the installer.

1

### Open the Installer

Double-click the `.pkg` file to launch the macOS installer.

2

### Follow the On-Screen Prompts

Navigate through the introduction screen, select the install location, and enter your administrator credentials if prompted, then click `Install Software`.

### Alternative Installations

If you cannot use the `.pkg` installer for any reason, you have other options.

You can click either of the links below for documentation on installing standalone `.dmg` files or by using `Homebrew` in your Mac’s terminal:

[![Pieces Desktop App - ARM .DMG](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1741289187818%2Fab8d3bce-f03c-40a1-884b-44d570369921.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Pieces Desktop App - ARM .DMG

*macOS 12.0 (Monterey) or higher*](https://builds.pieces.app/stages/production/os_server/dmg-arm64/download?download=true&product=DOCUMENTATION_WEBSITE)[![Pieces Desktop App - Intel .DMG](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1741289190170%2F79ad15ab-62c1-4b17-8933-f829e2b32055.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Pieces Desktop App - Intel .DMG

*macOS 12.0 (Monterey) or higher*](https://builds.pieces.app/stages/production/os_server/dmg/download?download=true&product=DOCUMENTATION_WEBSITE)

![Installing via Homebrew](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1741289183702%2Fadf316a9-202f-4b7b-bf0e-42af3aa986f7.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Installing via Homebrew

You can also install PiecesOS manually using Homebrew from your device’s terminal.

To do so:

1. Ensure Homebrew is installed on your system.
2. Run `brew install --cask pieces-os` in your terminal to install the Pieces `brew` package.

Install the DMG
---------------

After downloading the correct `.dmg` file, it’s time to install the Pieces Desktop App.

1

### 

Open your **Downloads** folder (or wherever you saved the installer) and look for the `.dmg` file you just downloaded (e.g., `Pieces.dmg`).

2

### Mount the DMG

Double-click the `.dmg` file to mount it.

3

### Drag & Drop into Applications

Drag the application icon from the mounted `.dmg` window into your **Applications** folder.

4

### Eject the DMG

Go back to **Finder**, right-click the mounted image, and select **Eject** to unmount it.

Install Using Homebrew
----------------------

Alternatively, you may opt to install Pieces via Homebrew in your terminal:

1

### Open Terminal

Launch the **Terminal** app on your macOS device.

2

### Run the Brew Command

Paste `brew install --cask pieces` into your terminal and press `Enter`

This command installs both the Pieces Desktop App and PiecesOS cask. If prompted, enter your administrator password.

3

### Wait for Installation to Complete

Homebrew will download and install the necessary files. Once it’s done, you’ll see a message indicating successful installation.

Post-Installation Tips
----------------------

Read the documentation below for some tips and information to make sure you’re up and running with the latest version(s) of PiecesOS and the Pieces Desktop App, as well as steps to uninstall Pieces software from your Apple device.

### Updating

The Pieces Desktop App automatically downloads and installs new updates.

You can also manually check for updates to PiecesOS and the Pieces Desktop App by clicking the `Profile` icon nested in the **Search Bar** at the top of your Pieces Desktop App view, then selecting `Check for Desktop App Updates` or `Check for PiecesOS Updates`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/get_started/macos/macos_check_pfd_for_updates_profile_dropdown.gif)

### Uninstalling

On your macOS device, navigate to **Finder,** then select **Applications.**

Scroll or search until you find both `Pieces` and `PiecesOS.` Right-click on these two applications and select `Move to Trash`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/get_started/macos/macos_how_to_uninstall_pfd.gif)

---

Additional Resources
--------------------

Click here for additional [documentation on troubleshooting](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting) or reach out to [support.](https://beta.docs.pieces.app/products/support)

Updated on March 6, 2025, 7:38 PM UTC

---

[🪟 Quickstart | Windows](/products/meet-pieces/windows-quickstart)

[🐧 Quickstart | Linux](/products/meet-pieces/linux-quickstart)

---

# Cross-Platform Troubleshooting

# Cross-Platform Troubleshooting

---

Cross-Platform Issues
=====================

Learn about what troubleshooting steps to take if PiecesOS or the Pieces Desktop App isn’t working as expected, regardless of your operating system.

![Displaying cross-platform-1.png](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/cross_platform/troubleshooting_multiOS.png)

---

Versions & Updates
------------------

Many issues can stem from out-of-date plugins, extensions, Ollama, the Pieces Desktop App, or PiecesOS itself.

### Updating PiecesOS

Both PiecesOS and the Pieces Desktop Application update automatically if installed through the Pieces Suite Installer.

For standalone installations (non-macOS/Linux store-based), updates are checked daily or upon application launch, prompting you to install or delay.

See your specific OS page for platform-specific instructions on updating PiecesOS:

* [macOS](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/macos#updating-piecesos)
* [Windows](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/windows#updating-piecesos)
* [Linux](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/linux#updating-piecesos)

### Updating the Pieces Desktop App

Ensuring the Desktop App is up-to-date is critical.

See your specific OS page for platform-specific update instructions on updating the Pieces Desktop App:

* [macOS](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/macos#updating-the-pieces-desktop-app)
* [Windows](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/windows#updating-the-pieces-desktop-app)
* [Linux](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/linux#updating-the-pieces-desktop-app)

Connection Issues with PiecesOS
-------------------------------

You may occasionally encounter connection issues with PiecesOS or your Personal Cloud, resulting in:

* Pieces Copilot not generating outputs
* Difficulty finding saved materials
* Trouble sharing code snippets

The quickest way to resolve this basic connection issue is to restart PiecesOS, then check for updates.

### Restarting PiecesOS & Checking Updates

To restart and check for updates to PiecesOS:

1. Restart PiecesOS
2. Ensure PiecesOS is running (look for the Pieces Icon in your system tray or menu bar)
3. Check for and install available updates
4. Verify that the Pieces Desktop Application and the plugin or extension you are attempting to use is up-to-date

Common Installation Issues
--------------------------

Common issues can occur when setting up PiecesOS and the Pieces Desktop App for the first time.

Platform-specific solutions are detailed on their respective OS pages:

* [macOS](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/macos#common-installation-issues)
* [Windows](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/windows#common-installation-issues)
* [Linux](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/linux#common-installation-issues)

Using Local Models
------------------

Running Pieces software with a local LLM through **Ollama** can offer greater privacy, faster responses (when properly configured), and independence from cloud dependencies.

By utilizing the Ollama framework, users can efficiently deploy and manage local language models tailored to their needs.

However, local models often require robust hardware configurations and careful optimization to run smoothly.

Older devices, regardless of operating system, may struggle to meet the hardware demands of these LLMs, even with Ollama's streamlined setup.

### Minimum System Requirements

Local models demand more from your system than their cloud-hosted counterparts.

To ensure a stable, responsive experience—make sure your device fits these general minimum device specifications, pulled from Ollama documentation and other experience-tested public sources.

1

### Operating System

Ollama is supported on macOS, Windows, and Linux devices—but you need to make sure your operating system is running at the correct minimum version to avoid compatibility issues.

* **macOS:** macOS 12.0 (Monterey) or higher
* **Windows:** Windows 10 or higher
* **Linux:** Ubuntu 22+ or higher

2

### RAM

Your system should have a minimum amount of RAM depending on the local model you’re trying to run. More RAM may further improve performance and reduce bottlenecks.

* **3B Models:** 8GB of RAM
* **7B Models:** 16GB of RAM
* **13B Models:** 32GB of RAM

3

### CPU

If your system doesn’t have a dedicated or otherwise capable GPU, running a CPU-tuned model may be in your best interests.

* **Recommended:** Any modern CPU with at least 4 cores
* **13B Models:** Any modern CPU with at least 8 cores

4

### GPU

While you don’t need a GPU to run a local Ollama model as long as the LLM is CPU-tuned, a GPU can significantly speed up inference and the training of custom models.

* **Recommended:** Any modern GPU with at least 6GB of VRAM

5

### Disk Space

Local large language models can occupy significant disk space, so ensure you have enough capacity for both the core installation and any custom models you plan to download or train.

* **Minimum:** At least 12GB of free storage space for installing Ollama and other base models.
* **Additional Storage:** Required for larger models that have additional dependencies

### Minimum System Requirements for Pieces Software

Your device, regardless of platform, should meet the following basic system specifications for using Pieces for Developers software.

---

| **Component** | **Minimum** | **Recommended** | **Notes** |
| --- | --- | --- | --- |
| *CPU* | Any modern CPU | Multi-core CPU | Avoid dual-core processors—aim for at least a 4-core CPU. |
| --- | --- | --- | --- |
| *RAM (Local Mode)* | 8 GB total system RAM with 2 GB free | 16 GB total system RAM or more | Applies when PiecesOS is running locally. |
| *RAM (Cloud Mode)* | 8 GB total system RAM with 1 GB free | 16 GB total system RAM or more | Applies when PiecesOS is running in cloud mode. |
| *Disk Space* | 2 GB minimum (1 GB for PiecesOS + 0.5–1 GB for data), with at least 4 GB free | 8 GB with at least 6 GB free or more | Ensure additional free space for data storage and future growth. |

---

### Choosing the Right Model

Select a model that matches your system’s capabilities and performance limitations, especially if you’re running an older or weaker device.

* **Lightweight Models:** Opt for smaller or **quantized models** if you’re using older hardware or have limited VRAM. Quantized models are optimized to reduce memory usage, making them easier to run without significantly impacting output quality for general tasks.
* **GPU-Tuned Models:** If you have a strong GPU with enough VRAM, GPU-accelerated models often run faster and produce results more efficiently.
* **CPU-Tuned Models:** If you lack a dedicated GPU or have low GPU memory, CPU-tuned models are a fallback option. Although slower, they can still provide consistent performance.

### Local Model Crashing

If you are running into ‘hanging’ or crashing issues when attempting to power Pieces using a local LLM, it may be because of your system’s hardware.

Insufficient system resources, like RAM or VRAM may cause hiccups, slowdowns, and other glitches.

There are a few options available to you for troubleshooting:

1. **Check Hardware:** Verify that you have sufficient RAM, VRAM, and CPU headroom as recommended by the model.
2. **Update Drivers:** Run `vulkaninfo` (or a similar tool) to check for GPU or Vulkan-related errors, if you have a Vulkan-based GPU. Update your GPU drivers if you detect compatibility issues.
3. **Model Switching:** If you experience crashes or slowdowns, try switching to a less resource-intensive local model. Reducing complexity can stabilize performance.

If you’ve tried all of these troubleshooting steps but are still experiencing crashes, hanging-time, or other instabilities, you may need to switch to a cloud-based LLM.

Vulkan-based GPUs
-----------------

NVIDIA and AMD both utilize the Vulkan API framework in their GPUs, but there are known issues with using Vulkan GPUs for AI and LLM-centered workloads.

For example, a corrupted or outdated Vulkan API can cause crashes.

If you are experiencing this issue, you can check Vulkan health in your terminal or command line and scanning for errors or warning message—if there are any issues detected, **update your GPU drivers.**

### Checking Vulkan

To check your Vulkan health status, run `vulkaninfo` in your terminal or command line and look for errors or warnings.

### Updating GPU Drivers

If issues are detected, update your GPU drivers to ensure Vulkan compatibility and stability.

Checking Hardware
-----------------

It may be necessary to verify your system’s specifications if you experience ongoing issues.

See the OS-specific pages for instructions on how to check CPU, RAM, and GPU details:

* [macOS](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/macos#checking-cpu-type)
* [Windows](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/windows#checking-hardware-specifications)
* [Linux](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/linux#checking-system-information)

Updated on March 5, 2025, 9:13 PM UTC

---

[🔧 Troubleshooting](/products/meet-pieces/troubleshooting)

[macOS](/products/meet-pieces/troubleshooting/macos)

---

# Pieces Troubleshooting for Linux

# Pieces Troubleshooting for Linux

---

Issues | Linux
==============

Learn about what troubleshooting steps to take if PiecesOS or the Pieces Desktop App isn’t working as expected on your Linux device.

![Displaying linux.png](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/troubleshooting_linux.png)

---

Versions & Updates
------------------

Many issues can stem from running outdated versions of PiecesOS or the Pieces Desktop App on Linux.

### Updating PiecesOS

On Linux, PiecesOS and the Pieces Desktop App are distributed via snaps (for Ubuntu-based systems).

To update PiecesOS on Linux:

1. Run `snap info pieces-os` to check the current version of PiecesOS
2. Run `sudo snap refresh` to update PiecesOS if a newer version is available

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/snap_refresh_POS.gif)

### Updating the Pieces Desktop App

Similar to PiecesOS, you can update the Pieces Desktop App by:

1. Running `snap info pieces-for-developers` to check the current version
2. Running `sudo snap refresh` to apply any available updates

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/snap_refresh_PFD.gif)

Common Installation Issues
--------------------------

Official support is provided for **Ubuntu 18+ and Ubuntu-based distributions.** Other distributions may work but *aren’t guaranteed.*

### Checking Distribution Compatibility

Ensure you’re running a supported Ubuntu-based distribution.

If not, consider switching to a supported environment, as installation on non-Ubuntu distributions isn’t guaranteed.

### Updating Snapd

Snap-based installations require an up-to-date snap `daemon`:

* Run `sudo snap refresh` to ensure `snapd` and its packages are current

### Adjusting Graphics & Display Settings

If installation or UI issues persist, consider the following:

* **Switch Between x11 and Wayland:** Some applications may work better on one display protocol than the other. Try switching to x11 for compatibility or Wayland for newer features. You can usually select this at the login screen.
* **Update GPU Drivers:** Ensure your GPU drivers are up to date. For NVIDIA, check for proprietary driver updates. AMD and Intel users should verify that open-source drivers are current.
* **Optimize Graphics Configurations:** Use tools like `nvidia-settings`, `radeon-profile`, or similar utilities to adjust your GPU settings for better performance and stability.

These adjustments can resolve many graphical and display-related issues that you may experience while you use Pieces for Developers or PiecesOS.

Checking System Information
---------------------------

You can verify your system’s hardware configuration and ensure it meets recommended specifications by running specific commands in your terminal.

### Checking CPU Information

To determine your CPU type and find other important information, type `lscpu` in your terminal and press `Enter`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/lscpu_UBUNTU.png)

### Checking GPU Information

To determine your GPU type and find other important information, `lspci | grep -i vga` in your terminal and press `Enter`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/lscpi_UBUNTU.png)

Confirm that your CPU, GPU, and memory resources are sufficient for running PiecesOS and local AI models (if applicable).

Click here for documentation on [what we recommend for minimum device specifications](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform#hardware-recommendations) if you plan on utilizing a local LLM.

### Checking Ubuntu Version

If the Pieces Installer is not working as intended, you could have an outdated version of Ubuntu. The minimum Ubuntu version that Pieces will run on is **Ubuntu 18**.

To check what version of Ubuntu you’re running:

* Open the **Settings** on Ubuntu
* Locate the **System** section at the bottom of the left-hand side menu and click it
* Open the **About** section and locate the **Operating System** label

This section will will display your Ubuntu version information.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/settings_about_system.gif)

### Consulting Online Resources

If you encounter persistent installation issues, consult online forums or community guides related to snap and Ubuntu-specific troubleshooting steps.

Restart & Retry
---------------

If you’ve updated components, checked hardware, and adjusted configurations without success, restart your machine and try again.

If the problem persists, please open a [GitHub issue](https://github.com/pieces-app/support/issues) for further assistance, or book a call with our engineers.

Updated on March 5, 2025, 9:13 PM UTC

---

[Windows](/products/meet-pieces/troubleshooting/windows)

[Desktop App](/products/desktop-application)

---

# Pieces Troubleshooting for macOS

# Pieces Troubleshooting for macOS

---

Issues | macOS
==============

Learn about what troubleshooting steps to take if PiecesOS or the Pieces Desktop App isn’t working as expected on your macOS device.

![Displaying macos.png](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/troubleshooting_macos.png)

---

Manual Installation Methods
---------------------------

If you’re experiencing difficulties with installing PiecesOS or the Pieces Desktop App, you can install both softwares manually by downloading the standalone files or by using terminal commands.

If you’re not sure which `.dmg` or `.pkg` you need based on your device’s CPU, [click here.](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/macos#checking-cpu-type)

### via PKG Files

Make sure to select the correct Pieces `.pkg` for your macOS device—Apple Silicon (ARM) or Intel.

---

| **Apple Silicon (ARM)** | **Intel** |
| --- | --- |
| [Download Pieces PKG for macOS (Apple Silicon / ARM)](https://builds.pieces.app/stages/production/macos_packaging/pkg-arm64/download?download=true&product=DOCUMENTATION_WEBSITE) | [Download Pieces PKG for macOS (Intel)](https://builds.pieces.app/stages/production/macos_packaging/pkg/download?download=true&product=DOCUMENTATION_WEBSITE) |
| --- | --- |

---

### via DMG Files

Make sure to select the correct Pieces `.dmg` files for your macOS device—Apple Silicon (ARM) or Intel.

---

| **Apple Silicon (ARM)** | **Intel** |
| --- | --- |
| [Download PiecesOS DMG for macOS (ARM)](https://builds.pieces.app/stages/production/os_server/dmg-arm64/download?download=true&product=DOCUMENTATION_WEBSITE) | [Download PiecesOS DMG for macOS (Intel)](https://builds.pieces.app/stages/production/os_server/dmg/download?download=true&product=DOCUMENTATION_WEBSITE) |
| --- | --- |
| [Download Pieces Desktop App DMG for macOS (ARM)](https://builds.pieces.app/stages/production/pieces_for_x/dmg-arm64/download?download=true&product=DOCUMENTATION_WEBSITE) | [Download Pieces Desktop App DMG for macOS (Intel)](https://builds.pieces.app/stages/production/pieces_for_x/dmg/download?download=true&product=DOCUMENTATION_WEBSITE) |

---

### via Homebrew

Installing PiecesOS and the Pieces Desktop App is automatically managed by a singular `brew` command, which is `brew install --cask pieces`.

Versions & Updates
------------------

Many issues can stem from out-of-date plugins, extensions, the desktop app, or PiecesOS itself.

### Updating PiecesOS

To restart and check for updates to PiecesOS on macOS:

1. Restart PiecesOS
2. Ensure PiecesOS is running (look for the **Pieces Icon** in your system tray)
3. Check for and install available updates

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_checking_piecesos_for_updates.gif)

### Updating the Pieces Desktop App

Updating the **Pieces Desktop App** on Windows and macOS systems can be done by clicking the **user icon** to the right of the **search bar** at the top of the Pieces Desktop Window, then clicking `Check for Desktop App Updates` or `Check for PiecesOS Updates`.

To check the Pieces Desktop App for updates on macOS:

1. Open the Pieces Desktop App
2. Click the **user icon** to the right of the **search bar** at the top of the main app view
3. Click `Check for Desktop App Updates`

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_check_pfd_for_updates_profile_dropdown.gif)

You can also click `Check for PiecesOS Updates` as an alternative to doing so in from the PiecesOS system window in your taskbar.

Common Installation Issues
--------------------------

There are a range of common install issues on Apple devices, like having an out-of-date OS version or selecting the wrong installation package.

### Checking OS Version

Pieces Suite applications require a minimum macOS version of **macOS 12.0 (Monterey).** If you’re experiencing installation issues, you should first check your OS version to make sure it’s up-to-date.

To determine your Apple device’s version of macOS:

1. Click the **Apple** icon in the top-left corner of your screen
2. Select `About This Mac`
3. Under your device name (i.e., MacBook Air), look for the last line on the list, titled `macOS`

The `macOS` line will report what version of macOS installed, e.g., `Sequoia 15.1.1`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_checking_about_mac.gif)

### Checking CPU Type

Intel and Apple Silicon (ARM) devices run on entirely separate CPU architectures, so downloading the wrong package for your Apple device can cause apps from the Pieces Suite to be rendered useless.

To determine what CPU architecture your Apple device utilizes:

1. Click the **Apple () icon** in the top-left corner of your screen.
2. Select **About This Mac**, and look for the **Overview section.** The first line will contain your CPU type:

* **Apple Silicon / ARM:** You will see an M-Series processor, e.g., `Apple M3`
* **Intel:** You will see an Intel processor, e.g., `2.6 GHz Intel Core i7`

Once you’ve determined your CPU architecture, [download the correct installation package accordingly.](https://beta.docs.pieces.app/products/meet-pieces/get-started/macos#recommended-installation-method)

Restart & Retry
---------------

If installation fails due to having an outdated version of macOS or installing the wrong package for your device’s architecture, restart your machine and try the installation again from scratch.

If the problem persists, please open a [GitHub issue](https://github.com/pieces-app/support/issues) for further assistance, or book a call with our engineers.

Updated on March 5, 2025, 9:13 PM UTC

---

[Cross-Platform](/products/meet-pieces/troubleshooting/cross-platform)

[Windows](/products/meet-pieces/troubleshooting/windows)

---

# Pieces Troubleshooting for Windows

# Pieces Troubleshooting for Windows

---

Issues | Windows
================

Learn about what troubleshooting steps to take if PiecesOS or the Pieces Desktop App isn’t working as expected on your Windows issues.

![Displaying windows.png](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/troubleshooting_windows.png)

---

Manual Installation Methods
---------------------------

If you’re experiencing difficulties with installing PiecesOS or the Pieces Desktop App, you can install both softwares manually by downloading the standalone `.exe` or `.msix` files.

### via EXE Files

You can download the individual `.exe` files for PiecesOS and the Pieces Desktop App by clicking the download links below.

---

| [Download PiecesOS EXE](https://builds.pieces.app/stages/production/pieces_for_x/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE) | [Download Pieces Desktop App EXE](https://builds.pieces.app/stages/production/os_server/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE) |
| --- | --- |

---

### via MSIX

For an alternative to the `.exe` method, you can use the `.msix` (innosetup) standalone installation files for PiecesOS and the Pieces Desktop App.

---

| [Download PiecesOS Appinstaller](https://builds.pieces.app/stages/production/appinstaller/os_server.appinstaller?download=true&product=DOCUMENTATION_WEBSITE) | [Download Pieces Desktop App Appinstaller](https://builds.pieces.app/stages/production/appinstaller/pieces_for_x.appinstaller?download=true&product=DOCUMENTATION_WEBSITE) |
| --- | --- |

---

Versions & Updates
------------------

Many issues can stem from out-of-date plugins, extensions, the desktop app, or PiecesOS itself.

### Updating PiecesOS

To restart and check for updates to PiecesOS on Windows:

1. Locate the Pieces Icon (`P`) in your taskbar
2. Click the icon to view your update status
3. If an update is available, follow the on-screen prompt to download and install it.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/windows_checking_pieces_os_for_updates.gif)

For standalone .EXE installations, updates are checked daily or upon application launch, prompting you to install or delay as needed.

### Updating the Pieces Desktop App

Updating the Pieces Desktop App on Windows (and macOS) can be done directly within the application:

1. Open the Pieces Desktop App
2. Click the **User Icon** to the right of the **Search Bar** at the top of the main app view
3. Select `Check for Desktop App Updates`
4. If prompted, click `Download Update` install available updates

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/windows_check_pfd_for_updates.gif)

You can also select `Check for PiecesOS Updates` from the same menu as an alternative to doing so from the PiecesOS system window in your taskbar.

Common Installation Issues
--------------------------

Windows users may encounter installation issues for various reasons, such as out-of-date OS components or incomplete dependencies.

### Checking for Windows Updates

Before installing, ensure your Windows system is fully updated:

1. Click the **Start** button, then select `Settings`
2. Click `Windows Update`
3. Install any pending updates and restart your computer

### Updating the Microsoft Store & App Installer

1. Open the **Microsoft Store**
2. Click on `Library` to check for available updates
3. Update the Microsoft Store and the App Installer if prompted
4. Retry installing the Pieces Suite

Checking Hardware Specifications
--------------------------------

It may be necessary to verify your system’s specifications if you experience ongoing issues, especially when attempting to utilize local LLMs.

To check your device specifications on Windows:

* Press the `Windows` key on your keyboard, or the `Windows` icon in the task bar
* Type `run` and hit `enter`
* Type `dxdiag` and press enter on, or click, the blue `OK` button

The **System** tab will display your processor, number of CPU cores, and memory (RAM), while the **Display** tab will list your GPU, it’s maker (NVIDIA, AMD, Intel, etc.) and the available video memory (VRAM).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/windows_checking_hardware_specs.gif)

[Read documentation on minimum recommended hardware specifications across all OS platforms.](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform#hardware-recommendations)

### Checking Windows Version

If the Pieces Installer is not working as intended, you could have an outdated version of Windows. The minimum Windows version that Pieces will run on is **Windows 10 v.1809 or higher**.

To check what version of Windows you’re running:

* Press the `Windows` and the `R` keys simultaneously on your keyboard
* A new window will pop-up, type `winver` and press `Enter`

A new window will open called **About Windows**, which will display your current windows version.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/checking_windows_ver.gif)

---

If this doesn't work, you are likely using a Windows version lower than Windows 10.

---

Restart & Retry
---------------

If the problem persists, please open a [GitHub issue](https://github.com/pieces-app/support/issues) for further assistance, or book a call with our engineers.

Updated on March 5, 2025, 9:13 PM UTC

---

[macOS](/products/meet-pieces/troubleshooting/macos)

[Linux](/products/meet-pieces/troubleshooting/linux)

---

# Pieces Troubleshooting

# Pieces Troubleshooting

---

Troubleshooting
===============

If the Pieces Desktop App isn't working properly, start here. This page explains our troubleshooting documentation and guides you to the right solution for your issue.

---

Using the Guides
----------------

Click one of the links below to get started troubleshooting on your device—or [browse the cross-platform troubleshooting documentation](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform) for more general fixes.

---

| [Cross-Platform](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform) | [macOS](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/macos) |
| --- | --- |
| [Windows](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/windows) | [Linux](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/linux) |
| --- | --- |

---

### Cross-Platform Issues

Use the Cross-Platform page if you’re not sure where to begin or if your issue isn’t clearly related to your operating system.

On the [Cross-Platform troubleshooting guide](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform), you’ll find:

* [Tips on handling local LLM crashes due to hardware-related issues](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform#local-model-crashing)
* [Guidance on working with Vulkan-based GPUs](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform#vulkan-based-gpus)
* [Links to related documentation on checking hardware specifications on your OS](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform#checking-hardware)

### macOS Issues

The [macOS troubleshooting guide](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/macos) provides information and guides on:

* [How to verify your macOS software version](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/macos#checking-os-version)
* [Determining and choosing the correct installation package for different chipsets](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/macos#checking-cpu-type)
* [Updating PiecesOS and the Pieces Desktop App](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/macos#versions--updates)

### Windows Issues

The [Windows troubleshooting guide](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/windows) provides information and guides on:

* [Checking for Windows installation updates](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/windows#checking-for-windows-updates)
* [Verifying the App Installer is up-to-date](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/windows#versions--updates)
* [Alternative installation methods for non-Suite installs](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/windows#trying-different-installation-methods)
* [Viewing hardware specifications using dxdiag](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/windows#checking-hardware-specifications)

### Linux Issues

The [Linux troubleshooting guide](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/linux) provides information and guides on:

* [Confirming compatibility with your Linux distribution](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/linux#checking-distribution-compatibility)
* [Using snap commands to update PiecesOS and the Pieces Desktop App](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/linux#updating-piecesos)
* [Adjusting graphics settings if you encounter UI issues](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/linux#adjusting-graphics--display-settings)

Additional Assistance
---------------------

If you’ve followed the applicable troubleshooting steps and still experience problems, consider visiting our community forums for additional guidance, opening a GitHub issue, or booking a call with our engineers.

[You can also find additional support resources here.](https://beta.docs.pieces.app/products/support)

Updated on March 5, 2025, 9:13 PM UTC

---

[🐧 Quickstart | Linux](/products/meet-pieces/linux-quickstart)

[Cross-Platform](/products/meet-pieces/troubleshooting/cross-platform)

---

# Pieces for Developers

# Pieces for Developers

---

Installation Guide | Windows
============================

The following guide will help you install and run both PiecesOS and the Pieces for Developers Desktop Application quickly and easily on your Windows device.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/trimmed_windows_banner.png)

---

Recommended Installation Method
-------------------------------

The recommended installation method on Windows is using the `.exe` installer for the Pieces Desktop App.

This installer provides a straightforward and guided setup process, bundling PiecesOS and the Pieces Desktop App together.

[![Download — Windows (EXE)](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740782301016%2F894aa6f7-eaab-4a22-b118-623bead5603f.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Download — Windows (EXE)

*Recommended Method*

Windows 10 (1809) or higher required.](https://builds.pieces.app/stages/production/pieces_for_x/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE&_gl=1*1a9yqbf*_gcl_au*OTQ5NDE1NTA4LjE3Mzk0NjU4MzM.*_ga*MTI0OTgzMTMuMTcyNDA5ODQwNg..*_ga_BVYEFRWCYX*MTc0MDc4MjM4Mi44LjAuMTc0MDc4MjM4Mi42MC4wLjA.)

### System Requirements

Your Windows device must be running **Windows 10 (1809) or higher.**

Click here for a quick guide on [determining your OS version](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting/windows#checking-windows-version).

---

| **Component** | **Minimum** | **Recommended** | **Notes** |
| --- | --- | --- | --- |
| *CPU* | Any modern CPU | Multi-core CPU | Avoid dual-core processors—aim for at least a 4-core CPU. |
| --- | --- | --- | --- |
| *RAM (Local Mode)* | 8 GB total system RAM with 2 GB free | 16 GB total system RAM or more | Applies when PiecesOS is running locally. |
| *RAM (Cloud Mode)* | 8 GB total system RAM with 1 GB free | 16 GB total system RAM or more | Applies when PiecesOS is running in cloud mode. |
| *Disk Space* | 2 GB minimum (1 GB for PiecesOS + 0.5–1 GB for data), with at least 4 GB free | 8 GB with at least 6 GB free or more | Ensure additional free space for data storage and future growth. |

---

Install the EXE
---------------

Now that you downloaded the `.exe`, it’s time to install Pieces.

1

### Find Saved Location

Open your **Downloads** folder (or wherever you saved the installer) and look for the *.exe* file you just downloaded (e.g., *PiecesInstaller.exe*).

2

### Open the Installer

Double-click the `.exe` file to launch the installation wizard.

---

### Alternative Installations

If you cannot use the `.exe` installer for any reason, you can also install via the App Installer (`.MSIX`).

[![Download - Windows (MSIX)](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1741289003917%2F5cf74976-7246-48c4-bcd4-09317c40bbfd.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Download - Windows (MSIX)

*Windows 10 (1809) or higher*](https://builds.pieces.app/stages/production/appinstaller/pieces_for_x.appinstaller?download=true&product=DOCUMENTATION_WEBSITE)

![WinGet](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1741289067030%2Fba5d7cfb-b752-42b8-9534-87e72695bded.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

WinGet

WinGet will allow you to easily install Pieces without having to leave the terminal.

1. Launch a Windows Terminal, Command Prompt, or PowerShell as administrator.
2. In the terminal, type `winget install “Pieces for Developers”` and press `enter`.

You may be prompted to enter `Y` or `N` to agree or disagree the terms of use when installing the Pieces Desktop App—type and enter `Y` to proceed with the installation.

3. Next, install PiecesOS by typing `winget install “Pieces OS”` and pressing `enter`.
4. You will be promoted to agree or disagree to the terms of use a second time, so enter `Y` to proceed with the installation.

Install the App Installer MSIX
------------------------------

Installing via the `.MSIX` installer may result in some native system prompts, which are outlined below.

1

### Find Saved Location

Open your **Downloads** folder (or wherever you saved the file) and look for the `.msix` file you just downloaded (e.g., *PiecesDesktop.appinstaller*).

2

### Open the Installer

Double-click the `.msix` file to launch the Windows installation prompt.

A small window will appear, prompting you to install the Pieces Desktop App. Review the publisher and source information, and then click `Install`.

A progress bar may appear briefly, and then the installer window will close automatically after completing the installation.

### Follow the On-Screen Prompts

There are a series of on-screen prompts to navigate through when installing the Pieces Desktop App and PiecesOS.

1. **User Account Control (UAC):** If prompted by Windows’ User Account Control, click `Yes` to allow the installer to make changes.
2. **Install Location:** Choose where to install Pieces (default location is recommended) and click `Install`.
3. **Select Additional Tasks:** Check `Create a desktop shortcut` or `Automatically start Pieces for Developers` if preferred.
4. **Ready to Install:** Click `Install`**.**
5. **Installation Progress & Completion:** Wait for the installation to complete. Once finished, you’ll see a confirmation message. Click `Finish` to close the installer.

Enterprise & Advanced Security Considerations
---------------------------------------------

Some Windows systems—particularly those in enterprise environments or with advanced security settings—may require using an `.exe` package (default installer) instead of an `.msix` package (AppInstaller) for compatibility reasons

If you find that your environment is restrictive or that the `.msix` package doesn’t work properly, consider using the `.exe` version or an alternative method.

Post-Installation Tips
----------------------

Read the documentation below for some tips and information to make sure you’re up and running with the latest version(s) of PiecesOS and the Pieces Desktop App, as well as steps to uninstall Pieces software from your Windows device.

### Updating

The Pieces Desktop App **automatically downloads and installs new updates.**

You can also manually check for updates to PiecesOS and the Pieces Desktop App by clicking the `Profile` nested in the **Search Bar** at the top of your Pieces Desktop App view, then selecting `Check for Desktop App Updates` or `Check for PiecesOS Updates`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/get_started/windows/windows_check_pfd_for_updates.gif)

### Uninstalling

Open **Settings,** then find **Apps** and search `Pieces.`

Two applications will appear after you enter the search query—**Pieces Desktop** and **PiecesOS.** Click the three dots to the right of the application title, and click `Uninstall`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/get_started/windows/uninstalling_on_windows.gif)

Additional Resources
--------------------

Click here for additional [documentation on troubleshooting](https://beta.docs.pieces.app/products/meet-pieces/troubleshooting) or reach out to [support.](https://beta.docs.pieces.app/products/support)

Updated on March 6, 2025, 7:42 PM UTC

---

[🧠 Fundamentals](/products/meet-pieces/fundamentals)

[🍎 Quickstart | macOS](/products/meet-pieces/macos-quickstart)

---

# Meet Pieces: AI-Driven Dev Efficiency

# Meet Pieces: AI-Driven Dev Efficiency

Getting to Know Pieces
======================

---

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734014941536/9c298363-d6b4-4e4a-9965-72db0fa59bc6.png?auto=compress,format&format=webp&q=75)

---

Pieces is an **AI-enabled productivity tool** designed to **increase developer efficiency** through **personalized workflow assistance** across the entire toolchain, featuring a dedicated desktop application and integrations with many popular IDEs.

---

Introducing Pieces for Developers
---------------------------------

This documentation is designed to provide a high-level overview of [Pieces features and functionalities](https://beta.docs.pieces.app/products/meet-pieces/fundamentals), with a quick-start and troubleshooting guides for [macOS](https://beta.docs.pieces.app/products/meet-pieces/get-started/macos), [Windows](https://beta.docs.pieces.app/products/meet-pieces/get-started/windows), and [Linux](https://beta.docs.pieces.app/products/meet-pieces/get-started/linux) to help you get started with Pieces as quick as possible.

Let’s answer a few basic questions:

### What is Pieces?

At its core, Pieces is an all-in-one productivity tool that helps developers work *smarter*, not harder, by anchoring engineers to their workflow with the power of the **Long-Term Memory Engine, Pieces Drive,** and the **Pieces Copilot.**

There are **[3]** core pillars of Pieces functionality:

1. [Long-Term Memory Engine (LTM-2)](https://beta.docs.pieces.app/products/meet-pieces/fundamentals#ltm-2): A powerful, AI-powered live context framework that understands what you’re working on across your entire development workflow. The LTM-2 helps by outsourcing the burden of memory and retrieval from the developer to AI to maximize space for creativity driven by human intent.
2. [Pieces Drive](https://beta.docs.pieces.app/products/meet-pieces/fundamentals#pieces-drive): The ability to save, search, reference, reuse, and share small developer resources like code snippets, screenshots, links, and text notes.
3. [Pieces Copilot](https://beta.docs.pieces.app/products/meet-pieces/fundamentals#pieces-copilot): An intelligent assistant that helps with generating code, answering questions, and adding code comments while utilizing a LLM of your choice—featuring an adjustable context window ranging from conversation-only to entire project repositories.

### Who is Pieces For?

To put it simply, Pieces is built from the ground up for developers who frequently reference or reuse small developer materials like code snippets or are looking to pick up where they left off and preserve the context of their workflow.

Pieces is an **excellent productivity option for developers of all levels** and across various fields, including front-end developers, data scientists, DevOps engineers, and students.

If you find yourself …

1. **Preserving Workflow Context:** If you’re wondering where you left off with trying to untangle that permissions mess in Google Cloud Console or Firestore database, the [LTM-2](https://beta.docs.pieces.app/products/meet-pieces/fundamentals#ltm-2) is an invaluable resource that can provide deep-links and anchors in the form of URLs and other helpful context.
2. **Managing Developer Materials**: If you find yourself needing to repurpose or refresh your memory with small developer resources throughout your workflow, the [Pieces Drive](https://beta.docs.pieces.app/products/meet-pieces/fundamentals#pieces-drive) can help you stay organized while providing an efficient pipeline for referencing and reusing them.
3. **Needing Code Assistance:** Stuck on a bug, or don’t know how to solve a complex algorithmic efficiency problem? Can’t center that `div`? Ask [Pieces Copilot](https://beta.docs.pieces.app/products/meet-pieces/fundamentals#pieces-copilot) to help you understand your function, script, code file or entire project and generate code to insert directly into your active file.

… then Pieces is intelligently designed with *you,* the developer, in mind.

Let Pieces do the heavy lifting and preserve your engineering creativity and ingenuity for where you need it most.

### How do I Use Pieces?

PiecesOS serves as the foundational layer of the entire Pieces for Developers Suite, much like Docker does for containerized applications—it powers the Pieces Desktop App along with all our browser and IDE extensions and plugins.

By installing PiecesOS, you enable the full functionality of the desktop app and our extensions, just like how Docker manages various containers.

We designed it this way to ensure that your data—including machine learning processes and inter-app communications—remains on-device, secure, private, and local.

Click one of the links below to fast-forward to the Pieces Suite installation guide for your operating system:

* [macOS](https://beta.docs.pieces.app/products/meet-pieces/macos-quickstart)
* [Windows](https://beta.docs.pieces.app/products/meet-pieces/windows-quickstart)
* [Linux](https://beta.docs.pieces.app/products/meet-pieces/linux-quickstart)

---

PiecesOS is required for any Pieces Software to work, including the Pieces Desktop App. However, the Pieces Desktop App is not itself required—but it is recommended to install both PiecesOS and the Pieces Desktop App.

---

Updated on March 5, 2025, 9:13 PM UTC

---

[🧠 Fundamentals](/products/meet-pieces/fundamentals)

---

# Microsoft Teams App

# Microsoft Teams App

Microsoft Teams App
===================

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729000522014/ad9b0fe4-0ee8-44a4-937b-f3fd022e60cf.png?auto=compress,format&format=webp&q=75)

V2 Documentation for the Pieces for Microsoft Teams App plugin is under construction 🚧 ... In the meantime, you can find current documentation for the Microsoft Teams plugin [here.](https://docs.pieces.app/extensions-plugins/teams)

Updated on March 5, 2025, 9:13 PM UTC

---

[

Select the text or excerpt in your note that you want to query.

2

### Right-Click

Right-click on the highlighted text.

3

### Select Command

Choose `Ask Copilot About Your Selection` from the context menu.

4

### Enter Question

Type your prompt in the text input field and press `return` (macOS) or `enter` (Windows/Linux).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/chat/right_context_ask_copilot_OBS.png)

### via Command Palette

1

### Open the Command Palette

Use `⌘+p` (macOS) or `ctrl+p` (Windows/Linux) to open the command palette in Obsidian.

2

### Run the Command

Type and run `Pieces for Developers: Ask Copilot About Your Selection`.

3

### Enter Question

Type your prompt in the text input field and press `return` (macOS) or `enter` (Windows/Linux).

This approach is ideal for localized queries where you need **quick insights or guidance on a specific selection.**

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/chat/command_pallete_ask_copilot_OBS.png)

Adding Context to Copilot Chats
-------------------------------

There are a number of individual items you can add as context to a chat, namely `Files`**,** `Folders`**,** `Snippets from the Pieces Drive`**,** `Websites`**,** and `Messages`**.**

This flexibility is particularly useful when the reference material you want to use isn’t directly accessible in Obsidian or when you want to compartmentalize context, avoiding overlap between files or projects.

To do this, you can select the **Starred Message Icon** in the bottom-left corner of your Copilot Chat window, openable from the Obsidian sidebar.

Click the **Starred Message Icon** then add whatever context items you need.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/chat/adding_snippet_to_chat.gif)

### Adding Code Snippets

You can paste snippets of code as a code block inside of any Copilot Chat by clicking the `{ }` icon inside the chat window, then pasting in your code.

This is useful for bringing in code that isn’t present immediately in the active file as context, or for comparisons and suggestions.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/chat/adding_snippets_to_chat_OBS.png)

### Extracting Code from Screenshots

You can also extract code from screenshots directly from the Copilot chat menu by selecting `Extract Code from Screenshot`, selecting the desired screenshot from your **Finder** (macOS) or **File Explorer** (Windows/Linux) menu, and confirming.

Pieces Copilot will then scan the screenshot and generate the code captured from the image into the chat, from which you can copy, insert at your cursor, save it as a snippet, and more.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/chat/extract_text_from_image.gif)

### Adding Folders from File Explorer

If you right-click on a folder in Obsidian’s file explorer, you’ll see the following options: `Pieces: Add Vault to Copilot Context` and `Pieces: Add File to Copilot Context`, so you can take any folder or file in the project you’re working in and immediately have the Pieces Copilot interact with it.

Improving Code Consistency & Standardization
--------------------------------------------

The Pieces Copilot helps improve code quality by identifying inconsistencies and providing actionable suggestions for standardization.

### Naming Inconsistencies

If functions across your workspace use inconsistent naming patterns (e.g., `authenticateUser` in `authHandler.go` vs. `retrieveUserProfile` in `userHandler.go`), Pieces Copilot can suggest adopting a standardized naming convention for better readability and maintainability, like this:

```
Copyfunc authenticateUser(ctx context.Context, credentials Credentials) (User, error) {
    if credentials.Username == "" || credentials.Password == "" {
        return User{}, errors.New("missing credentials")
    }
}

```

### Inconsistent Error Handling

If error-handling strategies differ across files (e.g., structured errors in `authService.go` vs. inconsistent handling in `userService.go`), Pieces Copilot can help unify the approach:

```
Copyfunc LoginUser(credentials Credentials) (string, error) {
    token, err := authenticate(credentials)
    if err != nil {
        return "", fmt.Errorf("login failed: %w", err)
    }
    return token, nil
}

```

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Copilot](/products/obsidian/pieces-copilot)

[LLM Settings](/products/obsidian/pieces-copilot/llm-settings)

---

# Configuring LLM Settings in Pieces Copilot for Obsidian

# Configuring LLM Settings in Pieces Copilot for Obsidian

---

Switching LLMs
==============

The [Pieces for Obsidian Plugin](https://obsidian.md/plugins?search=pieces-for-developers) currently supports 53 different LLMs (which includes both cloud-based and local models).

---

Available LLMs
--------------

We constantly update and configure our plugins and extensions, like the Pieces for Obsidian Plugin, to [work with the latest LLMs](https://github.com/pieces-app/support/discussions/121).

See the list of available models below.

---

### Cloud LLMs

The cloud-based models integrate effortlessly with the Pieces Copilot, offering high-performance and real-time responses to your queries.

PiecesOS offers a variety of 13 different cloud LLMs to suit any need you have.

| **Model Name** | **Context Window** | **Description** |
| --- | --- | --- |
| **GPT-4o Mini** | 128k tokens (Large) | Compact version of GPT-4o with efficiency. |
| --- | --- | --- |
| **GPT-4o** | 128k tokens (Large) | High-output GPT-4 variant for extended tasks. |
| **GPT-4 Turbo** | 128k tokens | Cost-efficient GPT-4 with large capacity. |
| **GPT-4** | 8k tokens | Advanced GPT-4 for high-quality responses. |
| **GPT-3.5** | 4k tokens | General-purpose versatile language model. |
| **Claude 3.5 Sonnet** | 40k tokens | Upgraded for improved reasoning. |
| **Claude 3 Sonnet** | 40k tokens | Designed for eloquent writing. |
| **Claude 3 Opus** | 40k tokens | High-capacity for detailed analysis. |
| **Claude 3 Haiku** | 40k tokens | Creative for precision tasks. |
| **Gemini Pro Chat** | 4k tokens | General-purpose language model. |
| **Gemini 2 Flash** | 4k tokens | Experimental, optimized for response time. |
| **Gemini 1.5 Pro** | 128k tokens (Large) | Advanced version with extended context. |
| **Gemini 1.5 Flash** | 256k tokens (Large) | Lightweight with extended context. |

---

### On-Device LLMs

We also support on-device LLMs for developers prioritizing privacy, security, or offline functionality.

[PiecesOS offers a variety of 41 different local LLMs, which you can see here.](https://beta.docs.pieces.app/products/core-dependencies/ollama/supported-models)

---

How To Configure Your LLM Runtime
---------------------------------

Switching your LLM model in the Pieces for Obsidian Plugin is a straightforward process, giving you the flexibility to choose the model that best suits your needs.

How to change your LLM:

1

### Open the Copilot Chat View

Open the Copilot Chat view by clicking the **Pieces Copilot** icon in the sidebar.

2

### Locate the Active Model

Locate the **Active Model** in the bottom-left corner of the view where the current model (e.g., *GPT-4o Mini*) is displayed

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/LLM%20Settings/showing_llm_switch_button_OBS.gif)

3

### View the Models

Click on `Change Model` to open the **Manage Copilot Runtime** modal

4

### Choose your Desired Model

Browse the list of local and cloud models, and select your preferred model

From here, you can browse and select from a variety of available models, such as the local and cloud-based models listed [in the table at the top of this page.](https://beta.docs.pieces.app/products/obsidian/configuration#supported-llms)

Once you’ve chosen a new model, the switch is instant, allowing you to continue your work seamlessly with the selected model's capabilities—*no need to restart or refresh anything.*

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/LLM%20Settings/changing_models_OBS.gif)

---

Cloud-hosted models offer access to the latest AI capabilities, while on-device models ensure offline functionality, making Pieces Copilot adaptable to your specific workflow and environment.

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Chat](/products/obsidian/pieces-copilot/chat)

[Pieces Drive](/products/obsidian/pieces-drive)

---

# Explore Pieces Copilot in Obsidian for AI Assistance

# Explore Pieces Copilot in Obsidian for AI Assistance

---

Pieces Copilot
==============

The [Pieces Copilot](https://beta.docs.pieces.app/products/obsidian/pieces-copilot) in the [Pie](https://beta.docs.pieces.app/products/extensions-plugins/visual-studio-code/pieces-copilot)[ces for Obsidian Plugin](https://obsidian.md/plugins?search=pieces-for-developers) integrates advanced AI capabilities into your workflow, like integrated swappable LLMs that generate additional code or notes, helpful comments, and more.

With the Pieces Copilot, you can save and search code snippets, use AI Quick Actions, and manage various workflows seamlessly in Obsidian.

---

Generative AI Conversations
---------------------------

Facing an issue or not sure how to tackle a challenge? You can [ask the Pieces Copilot specific questions](https://beta.docs.pieces.app/products/obsidian/pieces-copilot/chat) directly in Obsidian using the Copilot Chat side window.

You can ask questions that don't need context, like *“What is the basic format for a .JSON object?”* or more detailed questions where the Pieces Copilot requires context from your active note.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/MAIN_pieces_copilot/chat_example_question_OBS.png)

Adding Conversation Context
---------------------------

Contextual awareness lets the Pieces Copilot help you solve problems faster by providing answers that are truly relevant to the issue you're facing and your notes.

To use this feature, include details like error messages or [file context](https://beta.docs.pieces.app/products/obsidian/pieces-copilot#adding-conversation-context) for more accurate responses from the LLM conversation.

You can also add multiple files and other items as context to your question, giving the Pieces Copilot comprehensive information to help you troubleshoot.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/MAIN_pieces_copilot/add_context_menu_open_OBS.png)

Start by right-clicking a selection and select the following option from the tool menu:

* `Ask Copilot About Your Selection`: Includes the active selection with the conversation.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/MAIN_pieces_copilot/right_context_ask_copilot_OBS.png)

Selecting Your Pieces Copilot Runtime
-------------------------------------

Choose between [different LLMs directly within the Obsidian Editor](https://beta.docs.pieces.app/products/obsidian/pieces-copilot/llm-settings) by accessing the sidebar and selecting your preferred model by clicking the currently-utilized LLM under `Active Model` (GPT-40 Mini).

Options range from lightweight models for simple queries to advanced models for in-depth analysis, as well as **local** and **cloud-based LLMs.**

This flexibility allows you to tailor Pieces Copilot to your specific development needs, whether it’s speed or accuracy.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/MAIN_pieces_copilot/change_llm_option_OBS.png)

Read more about [what LLMs are available for use](https://beta.docs.pieces.app/products/obsidian/configuration#supported-llms) with the Pieces for Obsidian Plugin.

Pieces Copilot As a Daily Driver
--------------------------------

The Pieces Copilot is a powerful, adaptable tool that grows with you as you use it—*so use it!*

---

Collaborative Coding Made Easy

Troubleshoot and Resolve Bugs Swiftly

Quick Prototyping

Skill Enhancement

Efficient Code Refactoring

---

[Download the Pieces for Obsidian Plugin today!](https://obsidian.md/plugins?search=pieces-for-developers)

Updated on March 5, 2025, 9:13 PM UTC

---

[Get Started](/products/obsidian/get-started)

[Chat](/products/obsidian/pieces-copilot/chat)

---

# Search and Reuse Snippets in Pieces for Obsidian

# Search and Reuse Snippets in Pieces for Obsidian

---

Editing
=======

Maintaining an up-to-date library of code snippets in the [Pieces for Obsidian Plugin](https://obsidian.md/plugins?search=pieces-for-developers) is made easy through seamless editing.

---

How to Edit Snippets
--------------------

To modify an existing snippet, follow these steps:

1

### Open the Pieces Sidebar

Click the Pieces icon on the left-hand side of your Obsidian interface.

2

### Locate and Open the Snippet

Navigate to the **Saved Materials** section and click on the snippet you want to edit to open its quick view.

3

### Navigate to the Edit Button

In the section at the bottom of the quick view, click the `Edit Selected Material` button (pencil icon) to enter editing mode.

4

### Make Your Changes

Modify the snippet's content, name, or language as needed.

5

### Save Your Edits

Click the `Save Changes` button.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/edit_update/editing_snippet_OBS.png)

Your changes are automatically saved in real-time and reflected across the Pieces Sidebar.

Actions from Markdown Preview Mode
----------------------------------

When viewing a snippet in **Markdown Preview Mode** in the Pieces for Obsidian Plugin, you have access to several actions to manage and enhance your snippets directly from the `Pieces Actions` button below the snippet.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/edit_update/code_block_quick_actions_OBS.png)

### Material Management Actions

There are several material management options available to you when editing code snippets in the Pieces for Obsidian Plugin:

---

| `Copy Code to Clipboard` | Instantly copies the snippet's content to your clipboard for use elsewhere in your notes or projects. |
| --- | --- |
| `Edit Snippet` | Modifies the snippet's content or metadata. |
| --- | --- |
| `Edit Annotations` | Adds, updates, or removes annotations to provide additional context or notes for the snippet. |
| `Share via Pieces` | Creates a shareable link to the snippet for collaboration or external use. |

---

Actions from the Quick Preview Mode
-----------------------------------

When viewing a snippet in **Quick Preview Mode** in the Pieces for Obsidian plugin, several quick actions are available to streamline snippet management and enhance your workflow.

These actions can be accessed from the toolbar or the **Captured Context** section beneath the snippet.

### Toolbar Actions

You can share, edit, copy and manage auto-generated metadata for each snippet by using the `See Pieces Actions` or `Hide Pieces Actions` button, which is represented as the `Pieces` logo.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1735852860603/96dd81de-04ac-4e0f-8f91-20423d362a62.png?auto=compress,format&format=webp&q=75)

---

| `Edit Snippet` | Modifies the snippet's content or metadata. |
| --- | --- |
| `Copy Code to Clipboard` | Instantly copies the snippet's content to your clipboard for use elsewhere in your notes or projects. |
| --- | --- |
| `Share via Pieces` | Creates a shareable link to the snippet for collaboration or external use. |
| `Manage Annotations for Selected Material` | Adds, updates, or removes annotations to provide additional context or notes for the snippet. |
| `Open Quick Menu` | Opens a Quick Menu to access advanced snippet management options |

---

### Quick Menu Actions

The Pieces for Obsidian Plugin allows you to quickly manage your snippets by clicking the **three dots** inside of the Pieces Drive Sidebar—from there, you can select from a range of options outlined in the table below.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1735853054529/bd3f4259-a427-425d-83fb-780e62ffa82d.png?auto=compress,format&format=webp&q=75)

---

| `Reclassify` | Change the snippet’s classification. |
| --- | --- |
| `Rename` | Update the snippet’s title. |
| --- | --- |
| `Duplicate` | Create a copy of the snippet. |
| `Related Links` | Add or manage related links in the snippet’s metadata. |
| `Tags` | Add, update, or remove tags. |

---

Quickly Access Snippets
-----------------------

*Layers upon layers of functionality*—that’s the goal of all Pieces for Developers plugins and extensions.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/edit_update/editing_a_snippet.gif)

Updated on March 5, 2025, 9:13 PM UTC

---

[Search & Reuse](/products/obsidian/pieces-drive/search-reuse)

[Sharing](/products/obsidian/pieces-drive/sharing)

---

# Save Snippets Easily with Pieces for Obsidian Plugin

# Save Snippets Easily with Pieces for Obsidian Plugin

---

Saving
======

The [Pieces for Obsidian Plugin](https://obsidian.md/plugins?search=pieces-for-developers) provides several ways to save snippets, ensuring your most useful content is always at hand within your notes.

---

Saving Snippets
---------------

Save code snippets to the Pieces Drive in two ways: use the right-click menu or save embedded buttons in code sections.

You can use this feature to save all kinds of useful markdown and code materials, such as:

* API endpoint definitions
* Utility functions or commonly used helper methods
* Predefined templates for organizing notes
* Task Lists
* Code Blocks
* Reusable patterns for internal or external links

### via Right-Click Menu

To capture useful code snippets via the right-click menu:

1

### Highlight the Section

Select the section you want to save.

2

### Right-Click on the Highlighted Section

Open the context menu by right-clicking on the selected section.

3

### Choose Save to Pieces

From the menu, select Save to Pieces.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/saving_snippets/save_to_pieces_rightclick_OBS.png)

### via Embedded Buttons

To save code snippets directly from your notes:

1

### Locate the Code Block

Find the code block you want to save within your note.

2

### Click the Save Button

Use the **Save** button embedded within the code block to save it to Pieces Drive.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/saving_snippets/snippet_save_to_pieces.png)

### via Copilot Chat

You can take any code block existing in your Copilot Chat and click `Save to Pieces`—like code generated by Pieces Copilot, code blocks you added as context that weren’t saved as individual snippets, and any other kind of code.

To do so, click the `Save to Pieces` button on any code block within the Copilot Chat view.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/saving_snippets/save_to_pieces_copilot_chat_OBS.png)

What’s Stored When You Save a Snippet
-------------------------------------

When you save a snippet to your Pieces Drive, it’s more than just the code that gets stored.

The Pieces Copilot captures:

* `Type`: Categorizes the snippet (e.g., API call, function, class) with it’s code language.
* `Associated Tags`: Keywords associated with the snippet for easier searching.
* `Custom Description`**:** Specifies precisely which *lines* (in numerical form) the snippet is from, as well as the file from which it originated—very useful for mind-mapping.
* `Smart Description`: AI-generated descriptions that summarize the snippet’s purpose and function.
* `Suggested Searches`: Related searches that help you discover similar snippets.
* `Related Links`: References to documentation, code repositories, or other relevant resources.
* `Related People`: Associated collaborators or contributors.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/saving_snippets/saved_snippet_whats_stored_OBS.png)

Additionally, the Pieces Copilot **scans saved snippets for sensitive information**, such as API keys, passwords, or authentication tokens, to ensure no confidential data is accidentally stored.

Where Saved Snippets Live
-------------------------

Saved snippets are stored locally on your device, ensuring accessibility even when offline. This also means that any Pieces for Developers extension or plugin—or even the Pieces Desktop App—has constant, up-to-date access to your saved materials.

There are two ways to find your saved snippets—via the `Pieces Explorer` menu, or with the `Pieces: Search Pieces` feature.

[Read more about how to find your saved snippets here.](https://beta.docs.pieces.app/products/obsidian/pieces-drive/search-reuse#finding-saved-snippets)

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Drive](/products/obsidian/pieces-drive)

[Search & Reuse](/products/obsidian/pieces-drive/search-reuse)

---

# earch and Reuse Snippets in Pieces for Obsidian

# earch and Reuse Snippets in Pieces for Obsidian

---

Searching
=========

The [Pieces for Obsidian Plugin](https://obsidian.md/plugins?search=pieces-for-developers) makes finding saved snippets quick and seamless, helping you stay productive without breaking your workflow.

---

Finding Saved Snippets
----------------------

To locate your snippets, use the Pieces Sidebar menu.

### via Pieces Sidebar

To locate your snippets, use the Pieces Sidebar menu or the search feature:

1

### Open the Pieces Sidebar

Open the Pieces plugin from the Obsidian sidebar.

2

### Navigate to Saved Materials

Click on **Saved Materials** in the menu to display a list of your saved. materials

3

### Open a Snippet

Click on your desired snippet to view its content, associated metadata, and quick actions.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/search_reuse/copy_paste_snippet_OBS.gif)

### via Search Feature

If you know exactly what you’re looking for, you can search for specific snippets:

1

### Click the Search Bar

Open the search bar at the top of the Pieces Sidebar.

2

### Enter Your Query

Type in your search query.

3

### Navigate the Results

Scroll through the results or use arrow keys to find your desired snippet.

4

### Open the Snippet

Click on the snippet to open it and view its content, associated metadata, and quick actions.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/search_reuse/search_process.gif)

You can search with tags, descriptions, names, types, or even languages themselves to narrow down your search.

Adding Filters to Your Search
-----------------------------

Saved snippets being viewed in the Pieces Drive Sidebar can be sorted and filtered to narrow down your search results.

### Filtering Snippets

1

### Click the Search Bar

Click on the search bar at the top of the Pieces Drive Sidebar.

2

### Use Quick Filters

Apply quick filters such as `Titles`, `Annotations`, or `Content` that appear below the search bar.

3

### Filter by Tags or Keywords

Enter specific tags or keywords in the search bar to refine the displayed snippets.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/search_reuse/filtering_snippets.gif)

### Sorting Snippets

1

### Click the Sorting Icon

Click the icon at the top of the sidebar (e.g., clock icon for recent). The icon changes based on the selected sorting method.

2

### Choose Sorting Order

Select your preferred sorting order, such as `Recent`, `Suggested`, `Alphabetical`, or `Language`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/search_reuse/sorting_snippets.gif)

Viewing and Reusing Saved Snippets
----------------------------------

[Saved snippets](https://beta.docs.pieces.app/products/obsidian/pieces-drive/saving-snippets) can be viewed alongside their saved metadata by opening them directly from the Pieces Sidebar by clicking on them in the Pieces Drive once they’ve been found.

From this view, you can use Quick Actions, copy the snippet, or insert it at the cursor in your editor. You can also click `Open Markdown Preview` to **see the snippet in markdown preview mode** or click on the snippet for a quick overview.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/search_reuse/mardown_preview_mode_OBS.png)

From this view, you can use the `Pieces Actions` button at the bottom of the snippet to copy it, edit it, update annotations, generate a shareable link, toggle the visibility of the Pieces Actions buttons, or highlight and right-click to copy, or use `⌘+c` (macOS) or `ctrl+c` (Windows/Linux) to copy to your clipboard.

### via Pieces Sidebar

You can view snippets by opening the Pieces Drive Sidebar in Obsidian by clicking the Pieces icon on the left-hand side of your screen.

Once in the sidebar, you can insert a snippet into your note by clicking the `Insert at Cursor` button.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/search_reuse/insert_at_cursor_copy_paste_snippet_OBS.gif)

You can also right-click a snippet and select `Copy to Clipboard`, allowing you to paste it anywhere you need.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/search_reuse/copy_to_clipboard_OBS.png)

### Previewing Saved Snippets

When using the Pieces Drive Sidebar in Obsidian, you can click on a the **three vertical dots** on a saved code snippet to **delete** it, or select from 6 additional options:

---

| `View Preview` | `Start Copilot Chat` | `Copy to Clipboard` |
| --- | --- | --- |
| `Insert at cursor` | `Generate Shareable Link` | `Open Markdown Preview` |
| --- | --- | --- |

---

Real-Time Snippet Streaming
---------------------------

Every product within the Pieces Suite utilizes [PiecesOS](https://beta.docs.pieces.app/products/core-dependencies/pieces-os) to gather information regarding the context of your snippets.

When you modify a snippet in the [Pieces for Developers Desktop App](https://docs.pieces.app/installation-getting-started/what-am-i-installing)—like changing its name or description, tags, or any other metadata—those updates are automatically shown in your [Pieces for Obsidian Plugin](https://obsidian.md/plugins?search=pieces-for-developers) without the need for refreshing.

If your snippets aren’t updating immediately, refer to the [troubleshooting guide](https://beta.docs.pieces.app/products/obsidian/troubleshooting) for instructions on how to refresh your snippet list.

Updated on March 5, 2025, 9:13 PM UTC

---

[Saving Snippets](/products/obsidian/pieces-drive/saving-snippets)

[Edit & Update](/products/obsidian/pieces-drive/edit-update)

---

# Share Snippets with Pieces for Obsidian Plugin

# Share Snippets with Pieces for Obsidian Plugin

---

Sharing Snippets
================

The `Share` feature in the Pieces for Obsidian Plugin allows you to easily share your saved snippets from the Pieces Drive with colleagues, teams, or the wider community.

With this feature, you can generate a unique, shareable link for any snippet directly from the Obsidian tool window interface.

---

What Information Gets Shared
----------------------------

When a snippet is saved to the Pieces Cloud, the code is [enriched with valuable](https://beta.docs.pieces.app/products/obsidian/pieces-drive/saving-snippets#whats-stored-when-you-save-a-snippet) information such as related people, links, annotations, tags, and an automatically-generated description.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733970040011/f627038f-b8f3-46f8-8235-600d1a8a8efd.png?auto=compress,format&format=webp?auto=compress,format&format=webp&q=75)

How to Generate Shareable Links
-------------------------------

There are 3 ways to share saved snippets—by using the tool menu, right-click menu, or by the `Pieces Actions` button on previously-saved snippets within the **Pieces Drive.**

This link can easily be shared via email, Discord, Slack, or other platforms. The recipient can view the snippet **without needing to have a Pieces account.**

### via Right-Click Menu

Shareable Pieces links for your code snippets can be generated by right-clicking a portion of selected code, then clicking `Share via Pieces Link`.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/sharing/share_via_pieces_link_OBS.png)

### via Command Palette

You can open the command palette using `⌘+p` (macOS) or `ctrl+p` (Windows/Linux), type `Pieces for Developers: Share via Pieces`, and run the command to generate and copy a shareable link.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/sharing/share_via_command_prompt.gif)

### via Pieces Actions

When you are inside the **Markdown Preview** window in Obsidian, you can toggle the `Pieces` icon to unroll the `Pieces Actions`, then click `Share via Pieces` to generate a shareable link that’s automatically copied to your keyboard.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/sharing/pieces_actionss.png)

Sharing a Previously Saved Snippet
----------------------------------

If you save a material, but didn’t generate a shareable link at the time—no problem. You can still generate a shareable link (or copy, regenerate or delete the existing link) from the **Pieces Drive.**

1

### Open the Pieces Sidebar

Click the `Pieces icon` on the left-hand side of your Obsidian window.

2

### Locate the Snippet

Navigate to the **Pieces Drive** section and click on the snippet you want to share to open the Quick Preview.

3

### Generate the Link

At the bottom of the snippet Quick Preview, click the `Generate Shareable Link` option.

Alternatively, use the `Quick Menu` (three-dot icon) button to access sharing options

4

### Copy the Link

A new popup will appear giving you options to copy the personal link or generate a GitHub Gist.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/sharing/hovering_share_quick_view.png)

Enriched Sharing Experience
---------------------------

When you `Share` a snippet, it’s not just the code that’s included. The snippet comes with additional metadata to provide context—[you can read more about that here.](https://beta.docs.pieces.app/products/obsidian/pieces-drive/saving-snippets#whats-stored-when-you-save-a-snippet)

* `Snippet Type`: Identify the language or framework, such as Python or React.
* `Tags`: Useful keywords for quick categorization.
* `Description`: A short summary of what the snippet does.
* `Related Links`: Helpful resources or documentation tied to the snippet.
* `Author Information`: A record of who created the snippet.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733970528143/f4acf9e2-0d73-4634-8695-a6cdcfbd3814.png?auto=compress,format&format=webp?auto=compress,format&format=webp&q=75)

Sensitive Information Watchdog
------------------------------

The `Share` feature does more than just allow you to effectively share snippets across your entire team and other communities, though.

You'll see a section titled **Sensitive Information:**

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1733970500459/864946d3-8d27-435c-beb4-01f5d37e5fdc.png?auto=compress,format&format=webp?auto=compress,format&format=webp&q=75)

Our in-house ML model scans snippets for potentially sensitive information, like API keys or passwords, and alerts you so that you can make an informed decision before sharing the snippet.

The scan happens locally using on-device machine learning models **before the snippet is uploaded to the drive** for sharing—that way, you can make an informed decision about sharing your code.

Updated on March 5, 2025, 9:13 PM UTC

---

[Edit & Update](/products/obsidian/pieces-drive/edit-update)

[Commands](/products/obsidian/commands)

---

# Manage and Reuse Snippets with Pieces for Obsidian

# Manage and Reuse Snippets with Pieces for Obsidian

---

Pieces Drive
============

Snippets are useful pieces of code you can save, share, reuse, modify, and integrate into future projects to improve productivity and reduce time spent looking through old resources.

With Pieces Drive and PiecesOS for Obsidian plugin, you can save all kinds of code snippets and easily find, edit, and reuse them whenever, wherever, and however you need.

Here are some examples of developer materials you can reuse:

---

| `Logging Utilities` | A helper function for detailed server-side logging with timestamps and error levels. | Speeds up debugging and monitoring by inserting reliable logging methods. |
| --- | --- | --- |
| `Validation Functions` | A function to validate JSON payloads or form inputs before submission. | Ensures data integrity with reusable, thoroughly tested validation logic. |
| --- | --- | --- |
| `API Integration Code` | Prewritten `axios` code for making GET or POST requests, complete with error handling and response parsing. | Reduces repetitive work when integrating RESTful APIs or GraphQL endpoints. |
| `Component Templates` | A React functional component template with basic hooks and styling setup. | Provides a consistent starting point for building new components. |
| `Database Queries` | A MongoDB query to retrieve active user data filtered by last login. | Streamlines database tasks by reusing optimized query patterns |

---

Boosting Productivity with Snippet Management
---------------------------------------------

The Pieces Drive connects you with your notes and project files, allowing you to focus on what matters—building great software—while empowering you with tools for efficient code reuse.

* **Improved Productivity**: Focus on solving new problems rather than resolving old ones by quickly accessing and reusing code snippets.
* **Contextual Awareness**: Snippets are enriched with metadata, descriptions, and links to relevant searches, helping you remember the origin, purpose, and ideal usage scenarios for each piece of code.
* **Code Standardization**: Sharing best practices and reusable components ensures that uniform coding practices and conventions are available across teams and projects.

By using the Pieces Drive, you can capture and manage your snippets to streamline daily tasks and enhance your workflow in several ways:

### Save & Organize

Easily [save a function, script, or piece of boilerplate](https://beta.docs.pieces.app/products/obsidian/pieces-drive/saving-snippets) directly from the tool menu.

These snippets are not only saved to your personal Pieces Drive but are also enriched with context, metadata, and tags, making them easy to retrieve whenever you need them.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/getting_started/snippet_markdown_preview.png)

To save a snippet in Obsidian, right-click on the selected code and choose **Save to Pieces**.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/MAIN_using_snippets/save_snippet_pieces.gif)

### Search & Reuse

You can directly [search through your collection of saved materials in Pieces Drive](https://beta.docs.pieces.app/products/obsidian/pieces-drive/search-reuse) from within Obsidian, allowing you to quickly find snippets by keyword or context.

To search, access the **Search Pieces** action from the sidebar in the **Snippets** tab.

Enter your query into the search bar and press `return` (macOS) or `enter` (Windows/Linux) to see the search results.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/MAIN_using_snippets/search_process.gif)

Any related snippets will appear in the results list. From there, you can press `return` (macOS) or `enter` (Windows/Linux) to view your snippet, complete with all its saved context, rendered neatly inside the editor.

### Sharing

Share your snippets directly with team members in Obsidian, even if they don’t use Pieces.

This can be done without the recipient needing a Pieces for Developers Account.

Sharing useful bits of code can help remove productivity blockers, especially if a co-developer is unfamiliar with the project or if they’re a junior developer.

For example, a teammate working on server monitoring can use your shared script to automate daily tasks without additional setup.

These shared links also retain their [original enriched metadata](https://beta.docs.pieces.app/products/obsidian/pieces-drive/saving-snippets#whats-stored-when-you-save-a-snippet), including tags, descriptions, and other information, making it easier for teammates to understand and utilize the code.

To share a snippet in Obsidian, simply highlight the text you’d like to share, right-click, and click `Share Via Pieces Link`.

This generates a link you can share with teammates, ensuring easy access to your reusable code.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732741148257/c227792e-1abb-432e-9b46-15a486403994.png?auto=compress,format&format=webp?auto=compress,format&format=webp&q=75)

Use Cases
---------

With the Pieces for Obsidian Plugin, [your snippets become a powerful library](https://beta.docs.pieces.app/products/obsidian/pieces-drive/edit-update#how-to-edit-snippets) of reusable code. You can organize, search, edit, and share them across your projects, all within the Pieces Drive.

Here are some examples of how you can use them:

### Reusable Code Snippets for Data Science

If you frequently work on complex data science projects, algorithm design, or data processing pipelines, you can save reusable code snippets in your Pieces Drive.

These snippets can be easily imported into Obsidian for documenting workflows, analyzing results, and iterating on solutions in future projects.

```
Copy
data = pd.read_csv('data.csv')  

data.fillna(method='ffill', inplace=True)  
 
from sklearn.preprocessing import MinMaxScaler  
scaler = MinMaxScaler()  
data[['feature1', 'feature2']] = scaler.fit_transform(data[['feature1', 'feature2']])  

print(data.describe())  

```

### Code Snippet Documentation

If you frequently work on projects that involve monitoring file system changes, you can [save a helpful snippet to your Pieces Drive](https://beta.docs.pieces.app/products/obsidian/pieces-drive/saving-snippets#saving-snippets) that does exactly that, allowing you to import it over to Obsidian for documenting it:

```
Copy
func watchFileChanges(path string) {
	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		log.Fatal(err)
	}
	defer watcher.Close()

	err = watcher.Add(path)
	if err != nil {
		log.Fatal(err)
	}

	for {
		select {
		case event := <-watcher.Events:
			if event.Op&fsnotify.Write == fsnotify.Write {
				fmt.Println("Modified file:", event.Name)
			}
		case err := <-watcher.Errors:
			fmt.Println("Error:", err)
		}
	}
}

```

Additional Snippet Scenarios
----------------------------

Read up on some additional scenarios and use cases for Pieces Drive and see how the [Pieces for Obsidian Plugin](https://obsidian.md/plugins?id=pieces-for-developers) could benefit you and your workflow.

---

Testing Framework Templates

Command-Line Utilities

Error Handling & Logging

Quickly Create New Projects

---

[Download the Pieces for Obsidian Plugin today!](https://obsidian.md/plugins?id=pieces-for-developers)

Updated on March 5, 2025, 9:13 PM UTC

---

[LLM Settings](/products/obsidian/pieces-copilot/llm-settings)

[Saving Snippets](/products/obsidian/pieces-drive/saving-snippets)

---

# Troubleshoot Issues in Pieces for Obsidian Plugin

# Troubleshoot Issues in Pieces for Obsidian Plugin

---

Troubleshooting
===============

This page will guide you through resolving common issues with the [Pieces for Obsidian Plugin](https://obsidian.md/plugins?id=pieces-for-developers) and connecting with the Pieces support team or community.

---

Having Trouble with Pieces for Obsidian?
----------------------------------------

If the Pieces for Obsidian Plugin isn’t working as expected, verify the following steps:

Ensure You Have the Latest Versions
-----------------------------------

Confirm you’re using the latest version of the [Pieces for Obsidian Plugin](https://obsidian.md/plugins?id=pieces-for-developers) from the Obsidian community plugins marketplace. The minimum functioning version permitted is currently **1.7.7**. As well as the latest version of [PiecesOS](https://beta.docs.pieces.app/products/core-dependencies/pieces-os), which has a minimum functioning version of **11.0.0**.

Check PiecesOS Status
---------------------

Ensure that PiecesOS is running. It must be active for the Pieces for Obsidian Plugin to function properly.

Restart Obsidian After Updates
------------------------------

If you’ve recently installed or updated PiecesOS or the Pieces for Obsidian Plugin, restart Obsidian to apply the updates properly.

If the issue still persists, contact the [Pieces support team](https://getpieces.typeform.com/to/mCjBSIjF#docs-obsidian).

Refreshing Copilot Chats
------------------------

If you're using the Pieces Copilot chat and disconnect from WiFi or encounter issues with a cloud-based LLM, you may need to refresh the chat. This can resolve issues such as the LLM appearing to "hang" (e.g., generating a response that times out or enters into an infinite loop).

To refresh the chat, click the three vertical dots in the top-right corner of your Copilot Chat window and select **Refresh**.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/troubleshooting/refresh_copilot_chat_OBS.png)

Updated on March 5, 2025, 9:13 PM UTC

---

[Configuration](/products/obsidian/configuration)

[Microsoft Teams App](/products/microsoft-teams)

---

# Pieces for Obsidian Plugin

# Pieces for Obsidian Plugin

Pieces for Obsidian Plugin
==========================

---

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/MAIN_obsidian_plugin/documentation_parent_page.png)

---

The [Pieces for Obsidian Plugin](https://obsidian.md/plugins?search=pieces-for-developers) is a versatile tool that integrates seamlessly with the Obsidian Markdown editor.

It gives users a simple way to manage and use saved code snippets through the Pieces Drive, using the AI-powered features of the [Pieces Copilot](https://beta.docs.pieces.app/products/obsidian/pieces-copilot), all directly within their development environment.

* [Pieces Copilot](https://beta.docs.pieces.app/products/obsidian/pieces-copilot): Engage in AI-driven conversations to enhance productivity by providing contextual assistance for your projects—helping with code comprehension, comments, troubleshooting, and more—all by adding files and folders as context, with or without the powerful Long-Term Memory Engine (LTM-2).
* [Pieces Drive](https://beta.docs.pieces.app/products/obsidian/pieces-drive): Effortlessly save, find, and share your frequently used code snippets to your Pieces Drive. This makes it easy to organize your work, quickly access important code, and collaborate effectively with others.

![Getting Started](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1735324600755%2F1532f4ad-d0db-46c7-9086-7bf1e026e71b.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Getting Started

Follow [these instructions](https://beta.docs.pieces.app/products/obsidian/get-started) to download and install the Pieces for Obsidian.

![Support & Troubleshooting](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1735324568468%2F7aabc7b5-90af-483e-9829-66c3c76c5961.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Support & Troubleshooting

Explore [troubleshooting options](https://beta.docs.pieces.app/products/obsidian/troubleshooting), navigate to our [support page](https://beta.docs.pieces.app/products/support), or [directly book a call](https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr) with our engineers.

This extension is designed to offer **two main pillars of functionality** for developers working in the Obsidian editor—AI assistance with the Pieces Copilot and developer material management within the Pieces Drive.

### Enhanced AI Assistance

Through the Pieces for Obsidian Plugin, developers can enhance productivity by engaging in [context-based AI conversations](https://beta.docs.pieces.app/products/obsidian/pieces-copilot/chat)—contextualized with the relevant notes and folders, all within Obsidian.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/MAIN_obsidian_plugin/right_click_context_menu_OBS.png)

### Integrated Snippet Management

With Pieces Drive and PiecesOS embedded in Obsidian, developers can [save, search, and share their code snippets](https://beta.docs.pieces.app/products/obsidian/pieces-drive), boosting productivity by keeping reusable code easily accessible and organized within their notes and project files.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/MAIN_obsidian_plugin/pieces_snippet_manager_OBS.png)

Using Pieces Copilot
--------------------

The Pieces for Obsidian Plugin enhances your workflow by enabling you to save, manage, and share snippets directly within Obsidian. It offers features like snippet enrichment, sharing via custom links, and seamless integration with your development environment.

To explore available options, simply select the pieces logo below a code snippet.

From here, you’ll find several quick actions, including:

* `Save and Manage Snippets`**:** Effortlessly [save your code snippets to Pieces Drive for easy access and organization](https://beta.docs.pieces.app/products/obsidian/pieces-drive/saving-snippets#whats-stored-when-you-save-a-snippet).
* `Snippet Enrichment`**:** Automatically generate tags, descriptions, and related links for your code snippets, enhancing their context and usability.
* `Sharing Capabilities`**:** [Share your code snippets with others via custom links](https://beta.docs.pieces.app/products/obsidian/pieces-drive/sharing), facilitating collaboration and knowledge sharing.
* `Integration with Development Tools`**:** Seamlessly integrate with your development environment, allowing for efficient code management and retrieval.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/MAIN_obsidian_plugin/pieces_logo_activated_OBS.png)

Managing Your Code Snippets
---------------------------

Saving and managing code snippets with Pieces in the Obsidian plugin is simple and efficient.

To save a snippet, right-click the selected code, hover over `Pieces`, and choose `Save Current to Pieces`. You can also use the `Share via Pieces Link` option to share snippets with others, making collaboration easier within your notes and project files.

Common snippet types include utility functions, API requests, and reusable code blocks.

When you save snippets to your Pieces Drive with Pieces in Obsidian, they are enriched with AI-generated metadata, such as [tags, titles, authorship details, and descriptions](https://beta.docs.pieces.app/products/obsidian/pieces-drive/saving-snippets#whats-stored-when-you-save-a-snippet), keeping everything organized and easily accessible.

Here are some brief descriptions of the different material management options available within the Pieces for Obsidian Plugin:

* `Saving`: [Save selected code or text snippets directly to your Pieces repository](https://beta.docs.pieces.app/products/obsidian/pieces-drive/saving-snippets#whats-stored-when-you-save-a-snippet) for easy access later.
* `Enriching`: Automatically add relevant metadata like [tags, titles, and descriptions](https://beta.docs.pieces.app/products/obsidian/pieces-drive/saving-snippets#whats-stored-when-you-save-a-snippet) to improve the organization of your snippets.
* `Sharing`: [Share snippets with](https://beta.docs.pieces.app/products/obsidian/pieces-drive/sharing) your team, enabling collaboration and knowledge exchange.
* `Searching`: [Quickly search your saved snippets](https://beta.docs.pieces.app/products/obsidian/pieces-drive/search-reuse#via-search-feature) using keywords, tags, or other metadata to find the relevant code or text when needed.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/MAIN_obsidian_plugin/code_block_quick_actions_OBS.png)

### Referencing & Reusing

The [Pieces for Obsidian Plugin](https://obsidian.md/plugins?id=pieces-for-developers) offers powerful search tools to quickly find and access your snippets saved to Pieces Drive. You can search using keywords, tags, or other metadata, making it easy to locate relevant snippets within your notes and projects.

In Obsidian, you can perform broad searches or refine results using specific terms like function names, keywords, or tags, making it easy to locate the exact snippet you need.

To search for snippets, open your **Obsidian Vault** and navigate to the **Pieces** plugin in the sidebar.

From there, you can use the search bar at the top of the Pieces panel to input your query. You can search by specific terms, tags, or even parts of snippets.

Once you find the snippet you're looking for, you can easily insert it directly into your note or project by selecting `Insert At Cursor`. Once found, snippets [shared](https://beta.docs.pieces.app/products/obsidian/pieces-drive/sharing) or [copied](https://beta.docs.pieces.app/products/obsidian/pieces-drive/search-reuse#viewing-and-reusing-saved-snippets) directly into your project.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/MAIN_obsidian_plugin/search_bar_activated_OBS.png)

---

Download the Plugin
-------------------

Ready to streamline your development? Download the [Pieces for Obsidian Plugin](https://obsidian.md/plugins?search=pieces-for-developers) and follow our [installation guide to start.](https://beta.docs.pieces.app/products/obsidian/get-started)

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces CLI](/products/extensions-plugins/cli)

[Get Started](/products/obsidian/get-started)

---

# Pieces for Developers

# Pieces for Developers

---

Privacy, Security & Your Data
=============================

At Pieces for Developers, we believe that your trust is paramount—that’s why we’ve built our platform with a local-first approach that keeps your *code* and *data* safely on your device **by default.**

![](https://storage.googleapis.com/hashnode_product_documentation_assets/privacy_and_security/soc_secure_private.png)

---

Private and Secure
------------------

Your privacy and security are our **top priorities.**

Pieces for Developers is built with a local-first architecture, so your code stays on-device by default, with complete offline functionality and cloud capabilities *only if enabled.*

Designed for complete user control, all cloud features are opt-in only, telemetry is clearly marked and opt-out of, and you have full control over all privacy settings.

---

🛡️ *We are SOC 2 Certified & Enterprise-Ready!*

![](https://storage.googleapis.com/hashnode_product_documentation_assets/privacy_and_security/soc_compliance.png)

---

Data Storage & Control
----------------------

All of your data is stored locally. When interacting with cloud-based LLMs, Pieces for Developers defaults to the model provider’s Privacy Policy—like OpenAI—since we use their API to provide the model.

### Where Your Data Lives

All Pieces for Developers data is stored on your device and can be deleted, copied, compressed, or moved between devices without relying on cloud services. This allows easy transfer, simple backup, and no cloud dependency.

At any time, you can find your up-to-date log files can find your log files in the following locations, depending on your platform:

* macOS: `/Users/<username>/Library/com.pieces.os/`
* Windows: `C:/Users/<username>/Documents/com.pieces.os/`
* Linux: `/Users/<username>/Documents/com.pieces.os/`

Replace <username> with your system username.

Security Architecture
---------------------

Our system is built to run entirely on your device, ensuring your data never leaves your machine unless you choose to use cloud features.

* **All Core Features Work Offline:** Our platform runs on-device, processing your *code and sensitive data locally.* This minimizes exposure to external networks and reduces unauthorized access risks.
* **No Mandatory Cloud Connectivity:** You control your data. Cloud services are optional, and *no data is sent or stored remotely* unless you enable it.
* **Private By Default:** Your development environment is *isolated from external servers* by default, enhancing security and reducing data breach risks.

### Enterprise Security Features

We provide robust, isolated data storage and a scalable architecture designed to meet the high security demands of enterprise environments.

* **Individual User Repositories:** Each developer's data is stored separately in isolated micro-databases to prevent cross-contamination.
* **No Centralized Servers:** Our decentralized approach avoids a single point of failure, reducing the risk of large-scale breaches.
* **Dedicated Cloud Instances (If Enabled):** For those using cloud connectivity, we provide dedicated instances with high isolation, security, and enterprise-grade scalability.

### Compliance & Certifications

Our platform meets stringent industry standards—with SOC-2 compliance and regular security audits—ensuring you can trust our secure infrastructure.

1

### SOC-2 Compliant Infrastructure

Our systems meet the *stringent requirements* of SOC-2 compliance, a critical benchmark for security in enterprise environments.

2

### Regular Security Audits

We conduct frequent audits of our infrastructure to ensure that our security practices not only meet but exceed industry standards.

These audits help us identify potential vulnerabilities and *continuously improve* our systems.

3

### Enterprise-Ready Authentication with Auth0

Secure access is key to our security. Using Auth0, we ensure only *authorized* users access sensitive data, with advanced and multi-factor authentication options for extra protection.

Privacy Controls
----------------

We ensure users have full control over their privacy settings, data collection, and telemetry. **All data collection is opt-out**, telemetry is anonymous, and there are *clear opt-out options* in all our products. Each Pieces product offers detailed settings for *data sharing, Cloud connectivity, and telemetry controls.*

---

Our tools keep your data safe by processing it on your device. Tasks run locally, and we *never* use your data to train models. You can disable cloud processing anytime to keep data on your device.

---

### Available Offline Features

Many of the core pillars of Pieces for Developers functionality have been designed to be offline-flexible.

---

| **Feature** | **Local Available** | **Cloud Optional** |
| --- | --- | --- |
| Code Analysis | ✅ | ✅ |
| --- | --- | --- |
| Language Detection | ✅ | ✅ |
| Secret Detection | ✅ | ✅ |
| Tag Generation | ✅ | ✅ |

---

### Cloud Integration (Optional)

For users who choose to leverage cloud-based features, our platform offers secure, scalable cloud integration while keeping you in full control.

* **Individual Cloud Infrastructure:** Each user gets their own dedicated cloud setup so your data remains isolated and secure.
* **Unique Subdomain Per User:** Your cloud instance is accessed via a unique subdomain, further isolating your data from others.
* I**ndependent Scaling:** Our cloud services automatically scale based on *your* usage so you get consistent performance without compromising security.
* **Data Isolation:** Even when using cloud functionalities, we make sure your data remains segregated from other users’ data.

### Long-Term Memory (LTM-2) Security

Our Long-Term Memory (LTM-2) Engine is designed to protect your work through on-device processing and advanced local integration options.

* **On-device Processing:** All LTM functions run locally by default, keeping your sensitive data within your own environment.
* **Local LLM Options via** [Ollama](https://ollama.com/): You can integrate with local LLMs through the Pieces client’s usage of Ollama as a local model wrapper for added security.
* **Complete Control Over Data Sharing:** Decide when and if your data is shared, so you can be confident that you maintain full ownership and control over your information.

---

For users concerned about privacy, we strongly recommend using a local LLM with Pieces for Developers products, so the LTM-1, Pieces Copilot and Pieces Drive never send data through the cloud.

---

Privacy Policy Updates
----------------------

We maintain transparency about [our privacy practices](https://pieces.app/legal/privacy-policy).

For the latest updates or specific concerns, please [contact our support team.](https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr)

---

### Support & Documentation

Need help or have questions about privacy?

* Visit our [Support Page](https://beta.docs.pieces.app/products/support)
* Join our [Discord community](https://pieces.app/discord)
* Open a [GitHub issue](https://github.com/pieces-app/support/issues)

Updated on March 5, 2025, 9:13 PM UTC

---

[Raycast Plugin](/products/raycast)

[Compatible LLMs](/products/large-language-models)

---

# Pieces for Developers Raycast Extension

# Pieces for Developers Raycast Extension

Raycast Plugin
==============

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729000712202/830de9f7-cebb-4661-b893-d1816cf2fc13.png?auto=compress,format&format=webp&q=75)

V2 Documentation for the Pieces for Developers Raycast Plugin is under construction 🚧 ... In the meantime, you can find current documentation for the Raycast Plugin [here.](https://docs.pieces.app/extensions-plugins/raycast/)

Updated on March 5, 2025, 9:13 PM UTC

---

[Microsoft Teams App](/products/microsoft-teams)

[Privacy, Security & Your Data](/products/privacy-security-your-data)

---

# Pieces for Developers

# Pieces for Developers

---

Support
=======

Reach out to our engineers, open support tickets, and read discussions on our GitHub page for support with Pieces software.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734383533120/db6a6ede-80b3-43f2-95de-2f705b926c42.png?auto=compress,format&format=webp&q=75)

---

![We’ve been given an award!](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740434022759%2F22bf29e6-55dd-4480-9f04-832989db50e2.png%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

We’ve been given an award!

Pieces for Developers was recently awarded the ‘Best Support’ badge for Fall of 2024 by G2. [Read more here.](https://www.g2.com/products/pieces-for-developers/reviews?utm_source=rewards-badge)

---

Get Support or Submit Feedback
------------------------------

We've got you covered if you’re experiencing an issue or have feedback for the Pieces team.

### Live Support with Pieces

We want to ensure that your experience with PiecesOS, the Pieces Desktop App, and any of our IDE or browser integrations is as smooth and seamless as possible—and part of that is speaking with as many users as possible so we can continue iterating and improving on Pieces products.

If you need help getting everything up and running, feel free to book a call with our Founders & Engineering Leaders via [our support calendar.](https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr)

### Open a GitHub Issue[**​**](https://docs.pieces.app/extensions-plugins/sublime#get-support-or-share-feedback)

You can open GitHub issues for PiecesOS, the Pieces Desktop App, or any other Pieces plugin or extension by [opening an issue in our GitHub repository.](https://github.com/pieces-app/support/issues)

If you would prefer not to use GitHub, you can still [leave feedback or report a bug here.](https://getpieces.typeform.com/to/mCjBSIjF#page=docs-support)

### **Finding your Logs**

If opening a GitHub issue, attaching your logs helps developers on the Pieces team better identify issues so we can get you up and running quicker, as well as prevent more bugs in the future.

At any time, you can find your up-to-date log files can find your log files in the following locations, depending on your platform:

* macOS: `/Users/<username>/Library/com.pieces.os/`
* Windows: `C:/Users/<username>/Documents/com.pieces.os/`
* Linux: `/Users/<username>/Documents/com.pieces.os/`

Replace `username` with your system username.

### Join our Discord Community

We have a strong community presence on [our Discord channel,](https://discord.com/invite/getpieces) so feel free to reach out to other users or members of the Pieces for Developers team.

You can also catch up on product updates, speak with our power users, or participate in weekly Community Events.

### Join Community Discussions

We’re active within our community and are always looking for feedback and suggestions from our power users.

If this is you, feel free to [create or read through existing discussions on our GitHub](https://github.com/pieces-app/support/discussions)—that way you can inform our product roadmap and contribute feature requests.

Updated on March 5, 2025, 9:13 PM UTC

---

[Local Models](/products/large-language-models/local-models)

---

# Pieces for Developers

# Pieces for Developers

---

Aesthetics & Layouts
====================

The **Views & Layouts** and **Aesthetics** settings allow users to adjust the visual appearance of the app, including dark and light-themed UI modes, accent colors, and UI scaling.

---

Accessing Settings
------------------

To open the **Views & Layouts** and **Aesthetics** settings, click the `Settings` gear in the bottom-left of the *default view* when opening the Pieces Desktop App.

Then, navigate to either of the two sections:

1. **Views & Layouts**: Manage the layout of the Pieces Desktop app to customize it according to your preferences.
2. **Aesthetics**: Change the brightness, colors, and zoom level for the Pieces App to make sure you're comfortable while using it.

---

Changing Theme
--------------

Pieces allows users to toggle between *dark mode* and *light mode*, giving you full control over the appearance of the Pieces Desktop App.

### Dark & Light Mode

In the **Aesthetics** settings section, you can click the `Toggle Mode` button to switch between a *light* theme and a *dark* UI theme.

You can also use the keyboard shortcuts `⌘+shift+t` (macOS) or `ctrl+shift+t` for (Windows/Linux).

### Changing the Accent Color

Users can customize the UI with one of 35 preset accent colors.

Click the `Accent Color` dropdown in the **Aesthetics** settings section, select one of the available preset colors, and the accent color will apply to interactive elements like buttons and highlights, but not to the entire UI.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/aesthetics_and_layouts/gifs/changing_accent_color.gif)

### Font & UI Size

Use the `Font Size` setting to adjust the size of all text.

To zoom in, use `⌘+,+` (macOS) or `ctrl+,+` (Windows/Linux)—to zoom out, use `⌘+,-` (macOS) or `ctrl+,-` (Windows/Linux).

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/aesthetics_and_layouts/gifs/changing_font_and_ui.gif)

---

Adjusting Layout
----------------

There are several default layout behaviors to adjust within the **Views & Layouts** page.

### Default Layout

In this section, you can select the `Default Layout` option to determine which interface appears when Pieces Desktop first launches.

For example, setting it to Pieces Copilot allows you to start with the default generative AI interface, whereas Pieces Drive sets the default interface to the saved materials view on application launch.

---

### Default List View Sort

In this section, the `Default List View Sort` option lets you arrange materials in *List View* based on `Recent`, `Suggested`, or `Alphabetical`, and `Language` criteria.

This default sorting ensures you see new or popular items first (or in whichever order best suits your workflow), without needing to manually re-sort each time.

---

### Default Gallery View Sort

The **Views & Layout** settings also include `Default Gallery View Sort`, allowing you to specify how items appear in *Gallery View* (e.g., sorted by `Most Recent` or `Alphabetical`).

If you frequently rely on visual cues, this setting ensures you’ll quickly spot the snippets or media you need, saving time on manual sorting.

---

### Default Search Mode

You can pick `Default Search Mode` to define which search method Pieces uses by default.

For instance, selecting `Neural Code Search (NCS)` lets you enter natural language queries—perfect for quickly finding code snippets or references without remembering exact filenames or tags.

This is opposed to `Full Text Search (FTS)` or `Search with Snippet` which are more specific, hyper-focused querying workflows.

---

### Confirmation Settings

Confirmation prompts can protect you from unintended deletions or other irreversible changes.

Here, enabling or adjusting `Confirmation Settings` determines whether Pieces requests an extra step (such as “Are you sure?”) before making significant modifications.

---

### Metrics Summary Settings

Each setting in the **Metrics Summary** settings view addresses a distinct scenario or user action within *Pieces Drive*.

Under the *Gallery View*. for instance, `Smart Layout` automatically displays the context summary for smaller snippets, while `All` shows summaries whenever you navigate or hover over snippet icons.

The `Navigating` option triggers summaries only when you scroll or switch between snippets in the *Gallery View*, and `Hovering` keeps them hidden until you hover over the context icon.

By mixing and matching these options, you can highlight crucial snippet details precisely when you need them.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/aesthetics_and_layouts/layout_metrics_summary.png)

---

Theme changes are automatically saved when adjusted, and settings are stored locally, not syncing with Pieces Cloud.

---

Updated on March 5, 2025, 9:13 PM UTC

---

[Pieces Copilot & Machine Learning](/products/desktop-application/configuration/pieces-copilot-and-machine-learning)

[Additional Settings](/products/desktop-application/configuration/additional-settings)

---

# Pieces for Developers

# Pieces for Developers

---

Issues | macOS
==============

Learn about what troubleshooting steps to take if the Pieces Desktop App isn’t working as expected on your macOS device.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/troubleshooting_macos.png)

---

Alternative Installation Methods
--------------------------------

If you’re experiencing difficulties with installing the Pieces Desktop App, you can install the software manually by downloading the standalone `.dmg` installation files or by using terminal commands.

---

If you’re not sure which `.dmg` you need based on your device’s CPU, [click here.](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/macos#checking-cpu-type)

---

[![Pieces Desktop App — ARM .DMG](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740693233214%2F29654e9b-14b6-44e5-a9e1-cdadb65ddb47.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Pieces Desktop App — ARM .DMG

*macOS 12.0 (Monterey) or higher*](https://builds.pieces.app/stages/production/os_server/dmg/download?download=true&product=DOCUMENTATION_WEBSITE)[![Pieces Desktop App — Intel .DMG](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740693234272%2F7a5de5db-9b57-4cd9-9300-14544075e954.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Pieces Desktop App — Intel .DMG

*macOS 12.0 (Monterey) or higher*](https://builds.pieces.app/stages/production/pieces_for_x/dmg/download?download=true&product=DOCUMENTATION_WEBSITE)

![Installing via Homebrew](/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1740695766570%2Fdc1efa5e-6e16-47f6-a417-94e1356e2d88.webp%3Fw%3D200%26h%3D200%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=3840&q=75)

Installing via Homebrew

You can also install PiecesOS manually using Homebrew from your device’s terminal.

To do so:

1. Ensure Homebrew is installed on your system.
2. Run `brew install --cask pieces-os` in your terminal to install the Pieces Homebrew package.

---

Versions & Updates
------------------

Many issues can stem from out-of-date plugins, extensions, PiecesOS, or the desktop app itself.

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_checking_piecesos_for_updates.gif)

### Updating the Pieces Desktop App

Update the Pieces Desktop App on macOS by clicking the `User Icon` next to the **search bar** at the top of the Pieces Desktop Window. Then, click `Check for Desktop App Updates` or `Check for PiecesOS Updates`.

To check the Pieces Desktop App for updates on macOS:

1

### Open the Pieces Desktop App

Use the **Search** option or locate the Pieces Desktop App within your *Applications* folder

2

### Locate the Update Option

Click the `User Icon` to the right of the **Search Bar** at the top of the main app view

3

### Check for Updates

Click the `Check for Desktop App Updates` option

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_check_pfd_for_updates_profile_dropdown.gif)

You can also click `Check for PiecesOS Updates` as an alternative to doing so in from the PiecesOS system window in your taskbar.

Common Installation Issues
--------------------------

Common installation issues on Apple devices include having an outdated OS version or choosing the wrong installation package.

### Checking OS Version

Pieces applications need at least **macOS 12.0 (Monterey).** If you're having installation problems, first check that your OS version is up-to-date.

To determine your Apple device’s version of macOS:

1

### Locate the Apple Icon

Click the `Apple Icon` in the top-left corner of your screen

2

### Learn More About your Mac

Select `About This Mac`

3

### Find your OS Version

Under your device name (i.e. MacBook Air), look for the last line on the list, titled **macOS**

![](https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_checking_about_mac.gif)

### Checking CPU Type

Intel and Apple Silicon (ARM) devices run on entirely separate CPU architectures, so downloading the wrong package for your Apple device can cause Pieces Desktop to be rendered useless.

To determine what CPU architecture your Apple device utilizes:

1

### Open the Apple Options

Click the `Apple Icon` in the top-left corner of your screen.

2

### Locate Mac Information

Select `About This Mac`, and look for the **Overview section.** The first line will contain your CPU type:

* **Apple Silicon / ARM:** You will see an M-Series processor (i.e., Apple M3)
* **Intel:** You will see an Intel processor (i.e., 2.6 GHz Intel Core i7)

Once you’ve determined your CPU architecture, [download the correct installation package accordingly.](https://beta.docs.pieces.app/products/desktop-application/troubleshooting/macos#alternative-installation-methods)

Restart & Retry
---------------

If the installation fails because your macOS version is outdated or you installed the wrong package for your device's architecture, restart your machine and try the installation again from the beginning.

If the problem persists, please open a [GitHub issue](https://github.com/pieces-app/support/issues) for further assistance, or book a call with our engineers.

Updated on March 5, 2025, 9:13 PM UTC

---

[Cross-Platform](/products/desktop-application/troubleshooting/cross-platform)

[Windows](/products/desktop-application/troubleshooting/windows)

---
